// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_descriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_descriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_descriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_descriptor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_descriptor_2eproto;
namespace containerd {
namespace types {
class Descriptor;
struct DescriptorDefaultTypeInternal;
extern DescriptorDefaultTypeInternal _Descriptor_default_instance_;
class Descriptor_AnnotationsEntry_DoNotUse;
struct Descriptor_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Descriptor_AnnotationsEntry_DoNotUseDefaultTypeInternal _Descriptor_AnnotationsEntry_DoNotUse_default_instance_;
}  // namespace types
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::types::Descriptor* Arena::CreateMaybeMessage<::containerd::types::Descriptor>(Arena*);
template<> ::containerd::types::Descriptor_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::types::Descriptor_AnnotationsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace types {

// ===================================================================

class Descriptor_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Descriptor_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Descriptor_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Descriptor_AnnotationsEntry_DoNotUse();
  explicit constexpr Descriptor_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Descriptor_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Descriptor_AnnotationsEntry_DoNotUse& other);
  static const Descriptor_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Descriptor_AnnotationsEntry_DoNotUse*>(&_Descriptor_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.types.Descriptor.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.types.Descriptor.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Descriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.types.Descriptor) */ {
 public:
  inline Descriptor() : Descriptor(nullptr) {}
  ~Descriptor() override;
  explicit constexpr Descriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Descriptor(const Descriptor& from);
  Descriptor(Descriptor&& from) noexcept
    : Descriptor() {
    *this = ::std::move(from);
  }

  inline Descriptor& operator=(const Descriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Descriptor& operator=(Descriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Descriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Descriptor* internal_default_instance() {
    return reinterpret_cast<const Descriptor*>(
               &_Descriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Descriptor& a, Descriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(Descriptor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Descriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Descriptor* New() const final {
    return new Descriptor();
  }

  Descriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Descriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Descriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Descriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Descriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.types.Descriptor";
  }
  protected:
  explicit Descriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 5,
    kMediaTypeFieldNumber = 1,
    kDigestFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // map<string, string> annotations = 5;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string media_type = 1;
  void clear_media_type();
  const std::string& media_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_media_type();
  void set_allocated_media_type(std::string* media_type);
  private:
  const std::string& _internal_media_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_type(const std::string& value);
  std::string* _internal_mutable_media_type();
  public:

  // string digest = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/opencontainers/go-digest.Digest"];
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_MUST_USE_RESULT std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.types.Descriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Descriptor_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_descriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Descriptor

// string media_type = 1;
inline void Descriptor::clear_media_type() {
  media_type_.ClearToEmpty();
}
inline const std::string& Descriptor::media_type() const {
  // @@protoc_insertion_point(field_get:containerd.types.Descriptor.media_type)
  return _internal_media_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Descriptor::set_media_type(ArgT0&& arg0, ArgT... args) {
 
 media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.types.Descriptor.media_type)
}
inline std::string* Descriptor::mutable_media_type() {
  std::string* _s = _internal_mutable_media_type();
  // @@protoc_insertion_point(field_mutable:containerd.types.Descriptor.media_type)
  return _s;
}
inline const std::string& Descriptor::_internal_media_type() const {
  return media_type_.Get();
}
inline void Descriptor::_internal_set_media_type(const std::string& value) {
  
  media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Descriptor::_internal_mutable_media_type() {
  
  return media_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Descriptor::release_media_type() {
  // @@protoc_insertion_point(field_release:containerd.types.Descriptor.media_type)
  return media_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Descriptor::set_allocated_media_type(std::string* media_type) {
  if (media_type != nullptr) {
    
  } else {
    
  }
  media_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.types.Descriptor.media_type)
}

// string digest = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/opencontainers/go-digest.Digest"];
inline void Descriptor::clear_digest() {
  digest_.ClearToEmpty();
}
inline const std::string& Descriptor::digest() const {
  // @@protoc_insertion_point(field_get:containerd.types.Descriptor.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Descriptor::set_digest(ArgT0&& arg0, ArgT... args) {
 
 digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.types.Descriptor.digest)
}
inline std::string* Descriptor::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:containerd.types.Descriptor.digest)
  return _s;
}
inline const std::string& Descriptor::_internal_digest() const {
  return digest_.Get();
}
inline void Descriptor::_internal_set_digest(const std::string& value) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Descriptor::_internal_mutable_digest() {
  
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Descriptor::release_digest() {
  // @@protoc_insertion_point(field_release:containerd.types.Descriptor.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Descriptor::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.types.Descriptor.digest)
}

// int64 size = 3;
inline void Descriptor::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Descriptor::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Descriptor::size() const {
  // @@protoc_insertion_point(field_get:containerd.types.Descriptor.size)
  return _internal_size();
}
inline void Descriptor::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Descriptor::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:containerd.types.Descriptor.size)
}

// map<string, string> annotations = 5;
inline int Descriptor::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Descriptor::annotations_size() const {
  return _internal_annotations_size();
}
inline void Descriptor::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Descriptor::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Descriptor::annotations() const {
  // @@protoc_insertion_point(field_map:containerd.types.Descriptor.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Descriptor::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Descriptor::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:containerd.types.Descriptor.annotations)
  return _internal_mutable_annotations();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace containerd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_descriptor_2eproto
