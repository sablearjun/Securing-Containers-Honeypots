// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshots.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snapshots_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snapshots_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "mount.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snapshots_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snapshots_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snapshots_2eproto;
namespace containerd {
namespace services {
namespace snapshots {
namespace v1 {
class CleanupRequest;
struct CleanupRequestDefaultTypeInternal;
extern CleanupRequestDefaultTypeInternal _CleanupRequest_default_instance_;
class CommitSnapshotRequest;
struct CommitSnapshotRequestDefaultTypeInternal;
extern CommitSnapshotRequestDefaultTypeInternal _CommitSnapshotRequest_default_instance_;
class CommitSnapshotRequest_LabelsEntry_DoNotUse;
struct CommitSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern CommitSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal _CommitSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class Info;
struct InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
class Info_LabelsEntry_DoNotUse;
struct Info_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Info_LabelsEntry_DoNotUseDefaultTypeInternal _Info_LabelsEntry_DoNotUse_default_instance_;
class ListSnapshotsRequest;
struct ListSnapshotsRequestDefaultTypeInternal;
extern ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponse;
struct ListSnapshotsResponseDefaultTypeInternal;
extern ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
class MountsRequest;
struct MountsRequestDefaultTypeInternal;
extern MountsRequestDefaultTypeInternal _MountsRequest_default_instance_;
class MountsResponse;
struct MountsResponseDefaultTypeInternal;
extern MountsResponseDefaultTypeInternal _MountsResponse_default_instance_;
class PrepareSnapshotRequest;
struct PrepareSnapshotRequestDefaultTypeInternal;
extern PrepareSnapshotRequestDefaultTypeInternal _PrepareSnapshotRequest_default_instance_;
class PrepareSnapshotRequest_LabelsEntry_DoNotUse;
struct PrepareSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern PrepareSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal _PrepareSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class PrepareSnapshotResponse;
struct PrepareSnapshotResponseDefaultTypeInternal;
extern PrepareSnapshotResponseDefaultTypeInternal _PrepareSnapshotResponse_default_instance_;
class RemoveSnapshotRequest;
struct RemoveSnapshotRequestDefaultTypeInternal;
extern RemoveSnapshotRequestDefaultTypeInternal _RemoveSnapshotRequest_default_instance_;
class StatSnapshotRequest;
struct StatSnapshotRequestDefaultTypeInternal;
extern StatSnapshotRequestDefaultTypeInternal _StatSnapshotRequest_default_instance_;
class StatSnapshotResponse;
struct StatSnapshotResponseDefaultTypeInternal;
extern StatSnapshotResponseDefaultTypeInternal _StatSnapshotResponse_default_instance_;
class UpdateSnapshotRequest;
struct UpdateSnapshotRequestDefaultTypeInternal;
extern UpdateSnapshotRequestDefaultTypeInternal _UpdateSnapshotRequest_default_instance_;
class UpdateSnapshotResponse;
struct UpdateSnapshotResponseDefaultTypeInternal;
extern UpdateSnapshotResponseDefaultTypeInternal _UpdateSnapshotResponse_default_instance_;
class UsageRequest;
struct UsageRequestDefaultTypeInternal;
extern UsageRequestDefaultTypeInternal _UsageRequest_default_instance_;
class UsageResponse;
struct UsageResponseDefaultTypeInternal;
extern UsageResponseDefaultTypeInternal _UsageResponse_default_instance_;
class ViewSnapshotRequest;
struct ViewSnapshotRequestDefaultTypeInternal;
extern ViewSnapshotRequestDefaultTypeInternal _ViewSnapshotRequest_default_instance_;
class ViewSnapshotRequest_LabelsEntry_DoNotUse;
struct ViewSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ViewSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal _ViewSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class ViewSnapshotResponse;
struct ViewSnapshotResponseDefaultTypeInternal;
extern ViewSnapshotResponseDefaultTypeInternal _ViewSnapshotResponse_default_instance_;
}  // namespace v1
}  // namespace snapshots
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::services::snapshots::v1::CleanupRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::CleanupRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::CommitSnapshotRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::CommitSnapshotRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::CommitSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::CommitSnapshotRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::snapshots::v1::Info* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::Info>(Arena*);
template<> ::containerd::services::snapshots::v1::Info_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::Info_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::snapshots::v1::ListSnapshotsRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::ListSnapshotsRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::ListSnapshotsResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::ListSnapshotsResponse>(Arena*);
template<> ::containerd::services::snapshots::v1::MountsRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::MountsRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::MountsResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::MountsResponse>(Arena*);
template<> ::containerd::services::snapshots::v1::PrepareSnapshotRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::PrepareSnapshotRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::PrepareSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::PrepareSnapshotRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::snapshots::v1::PrepareSnapshotResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::PrepareSnapshotResponse>(Arena*);
template<> ::containerd::services::snapshots::v1::RemoveSnapshotRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::RemoveSnapshotRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::StatSnapshotRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::StatSnapshotRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::StatSnapshotResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::StatSnapshotResponse>(Arena*);
template<> ::containerd::services::snapshots::v1::UpdateSnapshotRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::UpdateSnapshotRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::UpdateSnapshotResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::UpdateSnapshotResponse>(Arena*);
template<> ::containerd::services::snapshots::v1::UsageRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::UsageRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::UsageResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::UsageResponse>(Arena*);
template<> ::containerd::services::snapshots::v1::ViewSnapshotRequest* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::ViewSnapshotRequest>(Arena*);
template<> ::containerd::services::snapshots::v1::ViewSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::ViewSnapshotRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::snapshots::v1::ViewSnapshotResponse* Arena::CreateMaybeMessage<::containerd::services::snapshots::v1::ViewSnapshotResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace services {
namespace snapshots {
namespace v1 {

enum Kind : int {
  UNKNOWN = 0,
  VIEW = 1,
  ACTIVE = 2,
  COMMITTED = 3,
  Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Kind_IsValid(int value);
constexpr Kind Kind_MIN = UNKNOWN;
constexpr Kind Kind_MAX = COMMITTED;
constexpr int Kind_ARRAYSIZE = Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kind_descriptor();
template<typename T>
inline const std::string& Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Kind_descriptor(), enum_t_value);
}
inline bool Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Kind>(
    Kind_descriptor(), name, value);
}
// ===================================================================

class PrepareSnapshotRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PrepareSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PrepareSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PrepareSnapshotRequest_LabelsEntry_DoNotUse();
  explicit constexpr PrepareSnapshotRequest_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PrepareSnapshotRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PrepareSnapshotRequest_LabelsEntry_DoNotUse& other);
  static const PrepareSnapshotRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PrepareSnapshotRequest_LabelsEntry_DoNotUse*>(&_PrepareSnapshotRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.PrepareSnapshotRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.PrepareSnapshotRequest.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PrepareSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.PrepareSnapshotRequest) */ {
 public:
  inline PrepareSnapshotRequest() : PrepareSnapshotRequest(nullptr) {}
  ~PrepareSnapshotRequest() override;
  explicit constexpr PrepareSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrepareSnapshotRequest(const PrepareSnapshotRequest& from);
  PrepareSnapshotRequest(PrepareSnapshotRequest&& from) noexcept
    : PrepareSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline PrepareSnapshotRequest& operator=(const PrepareSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareSnapshotRequest& operator=(PrepareSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrepareSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrepareSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareSnapshotRequest*>(
               &_PrepareSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrepareSnapshotRequest& a, PrepareSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareSnapshotRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareSnapshotRequest* New() const final {
    return new PrepareSnapshotRequest();
  }

  PrepareSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrepareSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrepareSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.PrepareSnapshotRequest";
  }
  protected:
  explicit PrepareSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kSnapshotterFieldNumber = 1,
    kKeyFieldNumber = 2,
    kParentFieldNumber = 3,
  };
  // map<string, string> labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string parent = 3;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_MUST_USE_RESULT std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.PrepareSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PrepareSnapshotRequest_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class PrepareSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.PrepareSnapshotResponse) */ {
 public:
  inline PrepareSnapshotResponse() : PrepareSnapshotResponse(nullptr) {}
  ~PrepareSnapshotResponse() override;
  explicit constexpr PrepareSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrepareSnapshotResponse(const PrepareSnapshotResponse& from);
  PrepareSnapshotResponse(PrepareSnapshotResponse&& from) noexcept
    : PrepareSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline PrepareSnapshotResponse& operator=(const PrepareSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareSnapshotResponse& operator=(PrepareSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrepareSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrepareSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareSnapshotResponse*>(
               &_PrepareSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrepareSnapshotResponse& a, PrepareSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareSnapshotResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareSnapshotResponse* New() const final {
    return new PrepareSnapshotResponse();
  }

  PrepareSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrepareSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrepareSnapshotResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.PrepareSnapshotResponse";
  }
  protected:
  explicit PrepareSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountsFieldNumber = 1,
  };
  // repeated .containerd.types.Mount mounts = 1;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::containerd::types::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_mounts();
  private:
  const ::containerd::types::Mount& _internal_mounts(int index) const;
  ::containerd::types::Mount* _internal_add_mounts();
  public:
  const ::containerd::types::Mount& mounts(int index) const;
  ::containerd::types::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      mounts() const;

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.PrepareSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > mounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class ViewSnapshotRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ViewSnapshotRequest_LabelsEntry_DoNotUse();
  explicit constexpr ViewSnapshotRequest_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ViewSnapshotRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ViewSnapshotRequest_LabelsEntry_DoNotUse& other);
  static const ViewSnapshotRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ViewSnapshotRequest_LabelsEntry_DoNotUse*>(&_ViewSnapshotRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.ViewSnapshotRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.ViewSnapshotRequest.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ViewSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.ViewSnapshotRequest) */ {
 public:
  inline ViewSnapshotRequest() : ViewSnapshotRequest(nullptr) {}
  ~ViewSnapshotRequest() override;
  explicit constexpr ViewSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewSnapshotRequest(const ViewSnapshotRequest& from);
  ViewSnapshotRequest(ViewSnapshotRequest&& from) noexcept
    : ViewSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline ViewSnapshotRequest& operator=(const ViewSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewSnapshotRequest& operator=(ViewSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const ViewSnapshotRequest*>(
               &_ViewSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ViewSnapshotRequest& a, ViewSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewSnapshotRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewSnapshotRequest* New() const final {
    return new ViewSnapshotRequest();
  }

  ViewSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.ViewSnapshotRequest";
  }
  protected:
  explicit ViewSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kSnapshotterFieldNumber = 1,
    kKeyFieldNumber = 2,
    kParentFieldNumber = 3,
  };
  // map<string, string> labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string parent = 3;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_MUST_USE_RESULT std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.ViewSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ViewSnapshotRequest_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class ViewSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.ViewSnapshotResponse) */ {
 public:
  inline ViewSnapshotResponse() : ViewSnapshotResponse(nullptr) {}
  ~ViewSnapshotResponse() override;
  explicit constexpr ViewSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewSnapshotResponse(const ViewSnapshotResponse& from);
  ViewSnapshotResponse(ViewSnapshotResponse&& from) noexcept
    : ViewSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline ViewSnapshotResponse& operator=(const ViewSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewSnapshotResponse& operator=(ViewSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const ViewSnapshotResponse*>(
               &_ViewSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ViewSnapshotResponse& a, ViewSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewSnapshotResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewSnapshotResponse* New() const final {
    return new ViewSnapshotResponse();
  }

  ViewSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewSnapshotResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.ViewSnapshotResponse";
  }
  protected:
  explicit ViewSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountsFieldNumber = 1,
  };
  // repeated .containerd.types.Mount mounts = 1;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::containerd::types::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_mounts();
  private:
  const ::containerd::types::Mount& _internal_mounts(int index) const;
  ::containerd::types::Mount* _internal_add_mounts();
  public:
  const ::containerd::types::Mount& mounts(int index) const;
  ::containerd::types::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      mounts() const;

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.ViewSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > mounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class MountsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.MountsRequest) */ {
 public:
  inline MountsRequest() : MountsRequest(nullptr) {}
  ~MountsRequest() override;
  explicit constexpr MountsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountsRequest(const MountsRequest& from);
  MountsRequest(MountsRequest&& from) noexcept
    : MountsRequest() {
    *this = ::std::move(from);
  }

  inline MountsRequest& operator=(const MountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountsRequest& operator=(MountsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MountsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountsRequest* internal_default_instance() {
    return reinterpret_cast<const MountsRequest*>(
               &_MountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MountsRequest& a, MountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MountsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountsRequest* New() const final {
    return new MountsRequest();
  }

  MountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MountsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MountsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.MountsRequest";
  }
  protected:
  explicit MountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotterFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.MountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class MountsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.MountsResponse) */ {
 public:
  inline MountsResponse() : MountsResponse(nullptr) {}
  ~MountsResponse() override;
  explicit constexpr MountsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountsResponse(const MountsResponse& from);
  MountsResponse(MountsResponse&& from) noexcept
    : MountsResponse() {
    *this = ::std::move(from);
  }

  inline MountsResponse& operator=(const MountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountsResponse& operator=(MountsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MountsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountsResponse* internal_default_instance() {
    return reinterpret_cast<const MountsResponse*>(
               &_MountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MountsResponse& a, MountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MountsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountsResponse* New() const final {
    return new MountsResponse();
  }

  MountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MountsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MountsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.MountsResponse";
  }
  protected:
  explicit MountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountsFieldNumber = 1,
  };
  // repeated .containerd.types.Mount mounts = 1;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::containerd::types::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_mounts();
  private:
  const ::containerd::types::Mount& _internal_mounts(int index) const;
  ::containerd::types::Mount* _internal_add_mounts();
  public:
  const ::containerd::types::Mount& mounts(int index) const;
  ::containerd::types::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      mounts() const;

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.MountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > mounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class RemoveSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.RemoveSnapshotRequest) */ {
 public:
  inline RemoveSnapshotRequest() : RemoveSnapshotRequest(nullptr) {}
  ~RemoveSnapshotRequest() override;
  explicit constexpr RemoveSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSnapshotRequest(const RemoveSnapshotRequest& from);
  RemoveSnapshotRequest(RemoveSnapshotRequest&& from) noexcept
    : RemoveSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline RemoveSnapshotRequest& operator=(const RemoveSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSnapshotRequest& operator=(RemoveSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveSnapshotRequest*>(
               &_RemoveSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoveSnapshotRequest& a, RemoveSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSnapshotRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSnapshotRequest* New() const final {
    return new RemoveSnapshotRequest();
  }

  RemoveSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.RemoveSnapshotRequest";
  }
  protected:
  explicit RemoveSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotterFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.RemoveSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class CommitSnapshotRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommitSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommitSnapshotRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CommitSnapshotRequest_LabelsEntry_DoNotUse();
  explicit constexpr CommitSnapshotRequest_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CommitSnapshotRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommitSnapshotRequest_LabelsEntry_DoNotUse& other);
  static const CommitSnapshotRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommitSnapshotRequest_LabelsEntry_DoNotUse*>(&_CommitSnapshotRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.CommitSnapshotRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.CommitSnapshotRequest.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CommitSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.CommitSnapshotRequest) */ {
 public:
  inline CommitSnapshotRequest() : CommitSnapshotRequest(nullptr) {}
  ~CommitSnapshotRequest() override;
  explicit constexpr CommitSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitSnapshotRequest(const CommitSnapshotRequest& from);
  CommitSnapshotRequest(CommitSnapshotRequest&& from) noexcept
    : CommitSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline CommitSnapshotRequest& operator=(const CommitSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitSnapshotRequest& operator=(CommitSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const CommitSnapshotRequest*>(
               &_CommitSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommitSnapshotRequest& a, CommitSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitSnapshotRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitSnapshotRequest* New() const final {
    return new CommitSnapshotRequest();
  }

  CommitSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommitSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.CommitSnapshotRequest";
  }
  protected:
  explicit CommitSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kSnapshotterFieldNumber = 1,
    kNameFieldNumber = 2,
    kKeyFieldNumber = 3,
  };
  // map<string, string> labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.CommitSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CommitSnapshotRequest_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class StatSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.StatSnapshotRequest) */ {
 public:
  inline StatSnapshotRequest() : StatSnapshotRequest(nullptr) {}
  ~StatSnapshotRequest() override;
  explicit constexpr StatSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatSnapshotRequest(const StatSnapshotRequest& from);
  StatSnapshotRequest(StatSnapshotRequest&& from) noexcept
    : StatSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline StatSnapshotRequest& operator=(const StatSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatSnapshotRequest& operator=(StatSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const StatSnapshotRequest*>(
               &_StatSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StatSnapshotRequest& a, StatSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatSnapshotRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatSnapshotRequest* New() const final {
    return new StatSnapshotRequest();
  }

  StatSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.StatSnapshotRequest";
  }
  protected:
  explicit StatSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotterFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.StatSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class Info_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Info_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Info_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Info_LabelsEntry_DoNotUse();
  explicit constexpr Info_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Info_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Info_LabelsEntry_DoNotUse& other);
  static const Info_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Info_LabelsEntry_DoNotUse*>(&_Info_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.Info.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.snapshots.v1.Info.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.Info) */ {
 public:
  inline Info() : Info(nullptr) {}
  ~Info() override;
  explicit constexpr Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Info(const Info& from);
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Info* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Info* New() const final {
    return new Info();
  }

  Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.Info";
  }
  protected:
  explicit Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 6,
    kNameFieldNumber = 1,
    kParentFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kKindFieldNumber = 3,
  };
  // map<string, string> labels = 6;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string parent = 2;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_MUST_USE_RESULT std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.protobuf.Timestamp created_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .containerd.services.snapshots.v1.Kind kind = 3;
  void clear_kind();
  ::containerd::services::snapshots::v1::Kind kind() const;
  void set_kind(::containerd::services::snapshots::v1::Kind value);
  private:
  ::containerd::services::snapshots::v1::Kind _internal_kind() const;
  void _internal_set_kind(::containerd::services::snapshots::v1::Kind value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Info_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class StatSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.StatSnapshotResponse) */ {
 public:
  inline StatSnapshotResponse() : StatSnapshotResponse(nullptr) {}
  ~StatSnapshotResponse() override;
  explicit constexpr StatSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatSnapshotResponse(const StatSnapshotResponse& from);
  StatSnapshotResponse(StatSnapshotResponse&& from) noexcept
    : StatSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline StatSnapshotResponse& operator=(const StatSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatSnapshotResponse& operator=(StatSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const StatSnapshotResponse*>(
               &_StatSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StatSnapshotResponse& a, StatSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatSnapshotResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatSnapshotResponse* New() const final {
    return new StatSnapshotResponse();
  }

  StatSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatSnapshotResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.StatSnapshotResponse";
  }
  protected:
  explicit StatSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .containerd.services.snapshots.v1.Info info = 1 [(.gogoproto.nullable) = false];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::containerd::services::snapshots::v1::Info& info() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::snapshots::v1::Info* release_info();
  ::containerd::services::snapshots::v1::Info* mutable_info();
  void set_allocated_info(::containerd::services::snapshots::v1::Info* info);
  private:
  const ::containerd::services::snapshots::v1::Info& _internal_info() const;
  ::containerd::services::snapshots::v1::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::containerd::services::snapshots::v1::Info* info);
  ::containerd::services::snapshots::v1::Info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.StatSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::snapshots::v1::Info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class UpdateSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.UpdateSnapshotRequest) */ {
 public:
  inline UpdateSnapshotRequest() : UpdateSnapshotRequest(nullptr) {}
  ~UpdateSnapshotRequest() override;
  explicit constexpr UpdateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSnapshotRequest(const UpdateSnapshotRequest& from);
  UpdateSnapshotRequest(UpdateSnapshotRequest&& from) noexcept
    : UpdateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSnapshotRequest& operator=(const UpdateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSnapshotRequest& operator=(UpdateSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSnapshotRequest*>(
               &_UpdateSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateSnapshotRequest& a, UpdateSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSnapshotRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSnapshotRequest* New() const final {
    return new UpdateSnapshotRequest();
  }

  UpdateSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.UpdateSnapshotRequest";
  }
  protected:
  explicit UpdateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotterFieldNumber = 1,
    kInfoFieldNumber = 2,
    kUpdateMaskFieldNumber = 3,
  };
  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // .containerd.services.snapshots.v1.Info info = 2 [(.gogoproto.nullable) = false];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::containerd::services::snapshots::v1::Info& info() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::snapshots::v1::Info* release_info();
  ::containerd::services::snapshots::v1::Info* mutable_info();
  void set_allocated_info(::containerd::services::snapshots::v1::Info* info);
  private:
  const ::containerd::services::snapshots::v1::Info& _internal_info() const;
  ::containerd::services::snapshots::v1::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::containerd::services::snapshots::v1::Info* info);
  ::containerd::services::snapshots::v1::Info* unsafe_arena_release_info();

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.UpdateSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::containerd::services::snapshots::v1::Info* info_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class UpdateSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.UpdateSnapshotResponse) */ {
 public:
  inline UpdateSnapshotResponse() : UpdateSnapshotResponse(nullptr) {}
  ~UpdateSnapshotResponse() override;
  explicit constexpr UpdateSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSnapshotResponse(const UpdateSnapshotResponse& from);
  UpdateSnapshotResponse(UpdateSnapshotResponse&& from) noexcept
    : UpdateSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSnapshotResponse& operator=(const UpdateSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSnapshotResponse& operator=(UpdateSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSnapshotResponse*>(
               &_UpdateSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateSnapshotResponse& a, UpdateSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSnapshotResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSnapshotResponse* New() const final {
    return new UpdateSnapshotResponse();
  }

  UpdateSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSnapshotResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.UpdateSnapshotResponse";
  }
  protected:
  explicit UpdateSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .containerd.services.snapshots.v1.Info info = 1 [(.gogoproto.nullable) = false];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::containerd::services::snapshots::v1::Info& info() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::snapshots::v1::Info* release_info();
  ::containerd::services::snapshots::v1::Info* mutable_info();
  void set_allocated_info(::containerd::services::snapshots::v1::Info* info);
  private:
  const ::containerd::services::snapshots::v1::Info& _internal_info() const;
  ::containerd::services::snapshots::v1::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::containerd::services::snapshots::v1::Info* info);
  ::containerd::services::snapshots::v1::Info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.UpdateSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::snapshots::v1::Info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.ListSnapshotsRequest) */ {
 public:
  inline ListSnapshotsRequest() : ListSnapshotsRequest(nullptr) {}
  ~ListSnapshotsRequest() override;
  explicit constexpr ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSnapshotsRequest(const ListSnapshotsRequest& from);
  ListSnapshotsRequest(ListSnapshotsRequest&& from) noexcept
    : ListSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsRequest& operator=(const ListSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsRequest& operator=(ListSnapshotsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSnapshotsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsRequest*>(
               &_ListSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListSnapshotsRequest& a, ListSnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsRequest* New() const final {
    return new ListSnapshotsRequest();
  }

  ListSnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSnapshotsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSnapshotsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.ListSnapshotsRequest";
  }
  protected:
  explicit ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 2,
    kSnapshotterFieldNumber = 1,
  };
  // repeated string filters = 2;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  const std::string& filters(int index) const;
  std::string* mutable_filters(int index);
  void set_filters(int index, const std::string& value);
  void set_filters(int index, std::string&& value);
  void set_filters(int index, const char* value);
  void set_filters(int index, const char* value, size_t size);
  std::string* add_filters();
  void add_filters(const std::string& value);
  void add_filters(std::string&& value);
  void add_filters(const char* value);
  void add_filters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filters();
  private:
  const std::string& _internal_filters(int index) const;
  std::string* _internal_add_filters();
  public:

  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.ListSnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.ListSnapshotsResponse) */ {
 public:
  inline ListSnapshotsResponse() : ListSnapshotsResponse(nullptr) {}
  ~ListSnapshotsResponse() override;
  explicit constexpr ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSnapshotsResponse(const ListSnapshotsResponse& from);
  ListSnapshotsResponse(ListSnapshotsResponse&& from) noexcept
    : ListSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsResponse& operator=(const ListSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsResponse& operator=(ListSnapshotsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSnapshotsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsResponse*>(
               &_ListSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListSnapshotsResponse& a, ListSnapshotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsResponse* New() const final {
    return new ListSnapshotsResponse();
  }

  ListSnapshotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSnapshotsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSnapshotsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.ListSnapshotsResponse";
  }
  protected:
  explicit ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .containerd.services.snapshots.v1.Info info = 1 [(.gogoproto.nullable) = false];
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::containerd::services::snapshots::v1::Info* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::snapshots::v1::Info >*
      mutable_info();
  private:
  const ::containerd::services::snapshots::v1::Info& _internal_info(int index) const;
  ::containerd::services::snapshots::v1::Info* _internal_add_info();
  public:
  const ::containerd::services::snapshots::v1::Info& info(int index) const;
  ::containerd::services::snapshots::v1::Info* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::snapshots::v1::Info >&
      info() const;

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.ListSnapshotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::snapshots::v1::Info > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class UsageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.UsageRequest) */ {
 public:
  inline UsageRequest() : UsageRequest(nullptr) {}
  ~UsageRequest() override;
  explicit constexpr UsageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsageRequest(const UsageRequest& from);
  UsageRequest(UsageRequest&& from) noexcept
    : UsageRequest() {
    *this = ::std::move(from);
  }

  inline UsageRequest& operator=(const UsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsageRequest& operator=(UsageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsageRequest* internal_default_instance() {
    return reinterpret_cast<const UsageRequest*>(
               &_UsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UsageRequest& a, UsageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UsageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsageRequest* New() const final {
    return new UsageRequest();
  }

  UsageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.UsageRequest";
  }
  protected:
  explicit UsageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotterFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.UsageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class UsageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.UsageResponse) */ {
 public:
  inline UsageResponse() : UsageResponse(nullptr) {}
  ~UsageResponse() override;
  explicit constexpr UsageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsageResponse(const UsageResponse& from);
  UsageResponse(UsageResponse&& from) noexcept
    : UsageResponse() {
    *this = ::std::move(from);
  }

  inline UsageResponse& operator=(const UsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsageResponse& operator=(UsageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsageResponse* internal_default_instance() {
    return reinterpret_cast<const UsageResponse*>(
               &_UsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UsageResponse& a, UsageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UsageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsageResponse* New() const final {
    return new UsageResponse();
  }

  UsageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.UsageResponse";
  }
  protected:
  explicit UsageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kInodesFieldNumber = 2,
  };
  // int64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 inodes = 2;
  void clear_inodes();
  ::PROTOBUF_NAMESPACE_ID::int64 inodes() const;
  void set_inodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inodes() const;
  void _internal_set_inodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.UsageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 inodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// -------------------------------------------------------------------

class CleanupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.snapshots.v1.CleanupRequest) */ {
 public:
  inline CleanupRequest() : CleanupRequest(nullptr) {}
  ~CleanupRequest() override;
  explicit constexpr CleanupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CleanupRequest(const CleanupRequest& from);
  CleanupRequest(CleanupRequest&& from) noexcept
    : CleanupRequest() {
    *this = ::std::move(from);
  }

  inline CleanupRequest& operator=(const CleanupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanupRequest& operator=(CleanupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanupRequest* internal_default_instance() {
    return reinterpret_cast<const CleanupRequest*>(
               &_CleanupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CleanupRequest& a, CleanupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanupRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CleanupRequest* New() const final {
    return new CleanupRequest();
  }

  CleanupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CleanupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CleanupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CleanupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.snapshots.v1.CleanupRequest";
  }
  protected:
  explicit CleanupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotterFieldNumber = 1,
  };
  // string snapshotter = 1;
  void clear_snapshotter();
  const std::string& snapshotter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshotter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshotter();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshotter();
  void set_allocated_snapshotter(std::string* snapshotter);
  private:
  const std::string& _internal_snapshotter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshotter(const std::string& value);
  std::string* _internal_mutable_snapshotter();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.snapshots.v1.CleanupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snapshots_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PrepareSnapshotRequest

// string snapshotter = 1;
inline void PrepareSnapshotRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& PrepareSnapshotRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.PrepareSnapshotRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrepareSnapshotRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.PrepareSnapshotRequest.snapshotter)
}
inline std::string* PrepareSnapshotRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.PrepareSnapshotRequest.snapshotter)
  return _s;
}
inline const std::string& PrepareSnapshotRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void PrepareSnapshotRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrepareSnapshotRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrepareSnapshotRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.PrepareSnapshotRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrepareSnapshotRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.PrepareSnapshotRequest.snapshotter)
}

// string key = 2;
inline void PrepareSnapshotRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PrepareSnapshotRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.PrepareSnapshotRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrepareSnapshotRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.PrepareSnapshotRequest.key)
}
inline std::string* PrepareSnapshotRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.PrepareSnapshotRequest.key)
  return _s;
}
inline const std::string& PrepareSnapshotRequest::_internal_key() const {
  return key_.Get();
}
inline void PrepareSnapshotRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrepareSnapshotRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrepareSnapshotRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.PrepareSnapshotRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrepareSnapshotRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.PrepareSnapshotRequest.key)
}

// string parent = 3;
inline void PrepareSnapshotRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& PrepareSnapshotRequest::parent() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.PrepareSnapshotRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrepareSnapshotRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.PrepareSnapshotRequest.parent)
}
inline std::string* PrepareSnapshotRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.PrepareSnapshotRequest.parent)
  return _s;
}
inline const std::string& PrepareSnapshotRequest::_internal_parent() const {
  return parent_.Get();
}
inline void PrepareSnapshotRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrepareSnapshotRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrepareSnapshotRequest::release_parent() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.PrepareSnapshotRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrepareSnapshotRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.PrepareSnapshotRequest.parent)
}

// map<string, string> labels = 4;
inline int PrepareSnapshotRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int PrepareSnapshotRequest::labels_size() const {
  return _internal_labels_size();
}
inline void PrepareSnapshotRequest::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PrepareSnapshotRequest::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PrepareSnapshotRequest::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.snapshots.v1.PrepareSnapshotRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PrepareSnapshotRequest::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PrepareSnapshotRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.snapshots.v1.PrepareSnapshotRequest.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// PrepareSnapshotResponse

// repeated .containerd.types.Mount mounts = 1;
inline int PrepareSnapshotResponse::_internal_mounts_size() const {
  return mounts_.size();
}
inline int PrepareSnapshotResponse::mounts_size() const {
  return _internal_mounts_size();
}
inline ::containerd::types::Mount* PrepareSnapshotResponse::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.PrepareSnapshotResponse.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
PrepareSnapshotResponse::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.snapshots.v1.PrepareSnapshotResponse.mounts)
  return &mounts_;
}
inline const ::containerd::types::Mount& PrepareSnapshotResponse::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::containerd::types::Mount& PrepareSnapshotResponse::mounts(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.PrepareSnapshotResponse.mounts)
  return _internal_mounts(index);
}
inline ::containerd::types::Mount* PrepareSnapshotResponse::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::containerd::types::Mount* PrepareSnapshotResponse::add_mounts() {
  ::containerd::types::Mount* _add = _internal_add_mounts();
  // @@protoc_insertion_point(field_add:containerd.services.snapshots.v1.PrepareSnapshotResponse.mounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
PrepareSnapshotResponse::mounts() const {
  // @@protoc_insertion_point(field_list:containerd.services.snapshots.v1.PrepareSnapshotResponse.mounts)
  return mounts_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ViewSnapshotRequest

// string snapshotter = 1;
inline void ViewSnapshotRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& ViewSnapshotRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ViewSnapshotRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewSnapshotRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.ViewSnapshotRequest.snapshotter)
}
inline std::string* ViewSnapshotRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ViewSnapshotRequest.snapshotter)
  return _s;
}
inline const std::string& ViewSnapshotRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void ViewSnapshotRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewSnapshotRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewSnapshotRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.ViewSnapshotRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewSnapshotRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.ViewSnapshotRequest.snapshotter)
}

// string key = 2;
inline void ViewSnapshotRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ViewSnapshotRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ViewSnapshotRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewSnapshotRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.ViewSnapshotRequest.key)
}
inline std::string* ViewSnapshotRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ViewSnapshotRequest.key)
  return _s;
}
inline const std::string& ViewSnapshotRequest::_internal_key() const {
  return key_.Get();
}
inline void ViewSnapshotRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewSnapshotRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewSnapshotRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.ViewSnapshotRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewSnapshotRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.ViewSnapshotRequest.key)
}

// string parent = 3;
inline void ViewSnapshotRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ViewSnapshotRequest::parent() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ViewSnapshotRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewSnapshotRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.ViewSnapshotRequest.parent)
}
inline std::string* ViewSnapshotRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ViewSnapshotRequest.parent)
  return _s;
}
inline const std::string& ViewSnapshotRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ViewSnapshotRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewSnapshotRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewSnapshotRequest::release_parent() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.ViewSnapshotRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewSnapshotRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.ViewSnapshotRequest.parent)
}

// map<string, string> labels = 4;
inline int ViewSnapshotRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int ViewSnapshotRequest::labels_size() const {
  return _internal_labels_size();
}
inline void ViewSnapshotRequest::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ViewSnapshotRequest::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ViewSnapshotRequest::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.snapshots.v1.ViewSnapshotRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ViewSnapshotRequest::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ViewSnapshotRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.snapshots.v1.ViewSnapshotRequest.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// ViewSnapshotResponse

// repeated .containerd.types.Mount mounts = 1;
inline int ViewSnapshotResponse::_internal_mounts_size() const {
  return mounts_.size();
}
inline int ViewSnapshotResponse::mounts_size() const {
  return _internal_mounts_size();
}
inline ::containerd::types::Mount* ViewSnapshotResponse::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ViewSnapshotResponse.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
ViewSnapshotResponse::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.snapshots.v1.ViewSnapshotResponse.mounts)
  return &mounts_;
}
inline const ::containerd::types::Mount& ViewSnapshotResponse::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::containerd::types::Mount& ViewSnapshotResponse::mounts(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ViewSnapshotResponse.mounts)
  return _internal_mounts(index);
}
inline ::containerd::types::Mount* ViewSnapshotResponse::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::containerd::types::Mount* ViewSnapshotResponse::add_mounts() {
  ::containerd::types::Mount* _add = _internal_add_mounts();
  // @@protoc_insertion_point(field_add:containerd.services.snapshots.v1.ViewSnapshotResponse.mounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
ViewSnapshotResponse::mounts() const {
  // @@protoc_insertion_point(field_list:containerd.services.snapshots.v1.ViewSnapshotResponse.mounts)
  return mounts_;
}

// -------------------------------------------------------------------

// MountsRequest

// string snapshotter = 1;
inline void MountsRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& MountsRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.MountsRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MountsRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.MountsRequest.snapshotter)
}
inline std::string* MountsRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.MountsRequest.snapshotter)
  return _s;
}
inline const std::string& MountsRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void MountsRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MountsRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MountsRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.MountsRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MountsRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.MountsRequest.snapshotter)
}

// string key = 2;
inline void MountsRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& MountsRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.MountsRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MountsRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.MountsRequest.key)
}
inline std::string* MountsRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.MountsRequest.key)
  return _s;
}
inline const std::string& MountsRequest::_internal_key() const {
  return key_.Get();
}
inline void MountsRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MountsRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MountsRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.MountsRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MountsRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.MountsRequest.key)
}

// -------------------------------------------------------------------

// MountsResponse

// repeated .containerd.types.Mount mounts = 1;
inline int MountsResponse::_internal_mounts_size() const {
  return mounts_.size();
}
inline int MountsResponse::mounts_size() const {
  return _internal_mounts_size();
}
inline ::containerd::types::Mount* MountsResponse::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.MountsResponse.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
MountsResponse::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.snapshots.v1.MountsResponse.mounts)
  return &mounts_;
}
inline const ::containerd::types::Mount& MountsResponse::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::containerd::types::Mount& MountsResponse::mounts(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.MountsResponse.mounts)
  return _internal_mounts(index);
}
inline ::containerd::types::Mount* MountsResponse::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::containerd::types::Mount* MountsResponse::add_mounts() {
  ::containerd::types::Mount* _add = _internal_add_mounts();
  // @@protoc_insertion_point(field_add:containerd.services.snapshots.v1.MountsResponse.mounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
MountsResponse::mounts() const {
  // @@protoc_insertion_point(field_list:containerd.services.snapshots.v1.MountsResponse.mounts)
  return mounts_;
}

// -------------------------------------------------------------------

// RemoveSnapshotRequest

// string snapshotter = 1;
inline void RemoveSnapshotRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& RemoveSnapshotRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.RemoveSnapshotRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveSnapshotRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.RemoveSnapshotRequest.snapshotter)
}
inline std::string* RemoveSnapshotRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.RemoveSnapshotRequest.snapshotter)
  return _s;
}
inline const std::string& RemoveSnapshotRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void RemoveSnapshotRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoveSnapshotRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoveSnapshotRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.RemoveSnapshotRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoveSnapshotRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.RemoveSnapshotRequest.snapshotter)
}

// string key = 2;
inline void RemoveSnapshotRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RemoveSnapshotRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.RemoveSnapshotRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveSnapshotRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.RemoveSnapshotRequest.key)
}
inline std::string* RemoveSnapshotRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.RemoveSnapshotRequest.key)
  return _s;
}
inline const std::string& RemoveSnapshotRequest::_internal_key() const {
  return key_.Get();
}
inline void RemoveSnapshotRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoveSnapshotRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoveSnapshotRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.RemoveSnapshotRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoveSnapshotRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.RemoveSnapshotRequest.key)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommitSnapshotRequest

// string snapshotter = 1;
inline void CommitSnapshotRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& CommitSnapshotRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.CommitSnapshotRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommitSnapshotRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.CommitSnapshotRequest.snapshotter)
}
inline std::string* CommitSnapshotRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.CommitSnapshotRequest.snapshotter)
  return _s;
}
inline const std::string& CommitSnapshotRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void CommitSnapshotRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommitSnapshotRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommitSnapshotRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.CommitSnapshotRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommitSnapshotRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.CommitSnapshotRequest.snapshotter)
}

// string name = 2;
inline void CommitSnapshotRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CommitSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.CommitSnapshotRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommitSnapshotRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.CommitSnapshotRequest.name)
}
inline std::string* CommitSnapshotRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.CommitSnapshotRequest.name)
  return _s;
}
inline const std::string& CommitSnapshotRequest::_internal_name() const {
  return name_.Get();
}
inline void CommitSnapshotRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommitSnapshotRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommitSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.CommitSnapshotRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommitSnapshotRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.CommitSnapshotRequest.name)
}

// string key = 3;
inline void CommitSnapshotRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CommitSnapshotRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.CommitSnapshotRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommitSnapshotRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.CommitSnapshotRequest.key)
}
inline std::string* CommitSnapshotRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.CommitSnapshotRequest.key)
  return _s;
}
inline const std::string& CommitSnapshotRequest::_internal_key() const {
  return key_.Get();
}
inline void CommitSnapshotRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommitSnapshotRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommitSnapshotRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.CommitSnapshotRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommitSnapshotRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.CommitSnapshotRequest.key)
}

// map<string, string> labels = 4;
inline int CommitSnapshotRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int CommitSnapshotRequest::labels_size() const {
  return _internal_labels_size();
}
inline void CommitSnapshotRequest::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommitSnapshotRequest::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommitSnapshotRequest::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.snapshots.v1.CommitSnapshotRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommitSnapshotRequest::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommitSnapshotRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.snapshots.v1.CommitSnapshotRequest.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// StatSnapshotRequest

// string snapshotter = 1;
inline void StatSnapshotRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& StatSnapshotRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.StatSnapshotRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatSnapshotRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.StatSnapshotRequest.snapshotter)
}
inline std::string* StatSnapshotRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.StatSnapshotRequest.snapshotter)
  return _s;
}
inline const std::string& StatSnapshotRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void StatSnapshotRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatSnapshotRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatSnapshotRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.StatSnapshotRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatSnapshotRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.StatSnapshotRequest.snapshotter)
}

// string key = 2;
inline void StatSnapshotRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StatSnapshotRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.StatSnapshotRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatSnapshotRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.StatSnapshotRequest.key)
}
inline std::string* StatSnapshotRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.StatSnapshotRequest.key)
  return _s;
}
inline const std::string& StatSnapshotRequest::_internal_key() const {
  return key_.Get();
}
inline void StatSnapshotRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatSnapshotRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatSnapshotRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.StatSnapshotRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatSnapshotRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.StatSnapshotRequest.key)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Info

// string name = 1;
inline void Info::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Info::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.Info.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Info::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.Info.name)
}
inline std::string* Info::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.Info.name)
  return _s;
}
inline const std::string& Info::_internal_name() const {
  return name_.Get();
}
inline void Info::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Info::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Info::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.Info.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.Info.name)
}

// string parent = 2;
inline void Info::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& Info::parent() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.Info.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Info::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.Info.parent)
}
inline std::string* Info::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.Info.parent)
  return _s;
}
inline const std::string& Info::_internal_parent() const {
  return parent_.Get();
}
inline void Info::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Info::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Info::release_parent() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.Info.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Info::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.Info.parent)
}

// .containerd.services.snapshots.v1.Kind kind = 3;
inline void Info::clear_kind() {
  kind_ = 0;
}
inline ::containerd::services::snapshots::v1::Kind Info::_internal_kind() const {
  return static_cast< ::containerd::services::snapshots::v1::Kind >(kind_);
}
inline ::containerd::services::snapshots::v1::Kind Info::kind() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.Info.kind)
  return _internal_kind();
}
inline void Info::_internal_set_kind(::containerd::services::snapshots::v1::Kind value) {
  
  kind_ = value;
}
inline void Info::set_kind(::containerd::services::snapshots::v1::Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.Info.kind)
}

// .google.protobuf.Timestamp created_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Info::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Info::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Info::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Info::created_at() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.Info.created_at)
  return _internal_created_at();
}
inline void Info::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.snapshots.v1.Info.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.Info.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::mutable_created_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.Info.created_at)
  return _msg;
}
inline void Info::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.Info.created_at)
}

// .google.protobuf.Timestamp updated_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Info::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Info::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Info::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Info::updated_at() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.Info.updated_at)
  return _internal_updated_at();
}
inline void Info::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.snapshots.v1.Info.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.Info.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Info::mutable_updated_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.Info.updated_at)
  return _msg;
}
inline void Info::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.Info.updated_at)
}

// map<string, string> labels = 6;
inline int Info::_internal_labels_size() const {
  return labels_.size();
}
inline int Info::labels_size() const {
  return _internal_labels_size();
}
inline void Info::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Info::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Info::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.snapshots.v1.Info.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Info::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Info::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.snapshots.v1.Info.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// StatSnapshotResponse

// .containerd.services.snapshots.v1.Info info = 1 [(.gogoproto.nullable) = false];
inline bool StatSnapshotResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StatSnapshotResponse::has_info() const {
  return _internal_has_info();
}
inline void StatSnapshotResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::containerd::services::snapshots::v1::Info& StatSnapshotResponse::_internal_info() const {
  const ::containerd::services::snapshots::v1::Info* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::snapshots::v1::Info&>(
      ::containerd::services::snapshots::v1::_Info_default_instance_);
}
inline const ::containerd::services::snapshots::v1::Info& StatSnapshotResponse::info() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.StatSnapshotResponse.info)
  return _internal_info();
}
inline void StatSnapshotResponse::unsafe_arena_set_allocated_info(
    ::containerd::services::snapshots::v1::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.snapshots.v1.StatSnapshotResponse.info)
}
inline ::containerd::services::snapshots::v1::Info* StatSnapshotResponse::release_info() {
  
  ::containerd::services::snapshots::v1::Info* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::snapshots::v1::Info* StatSnapshotResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.StatSnapshotResponse.info)
  
  ::containerd::services::snapshots::v1::Info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::containerd::services::snapshots::v1::Info* StatSnapshotResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::snapshots::v1::Info>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::containerd::services::snapshots::v1::Info* StatSnapshotResponse::mutable_info() {
  ::containerd::services::snapshots::v1::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.StatSnapshotResponse.info)
  return _msg;
}
inline void StatSnapshotResponse::set_allocated_info(::containerd::services::snapshots::v1::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::snapshots::v1::Info>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.StatSnapshotResponse.info)
}

// -------------------------------------------------------------------

// UpdateSnapshotRequest

// string snapshotter = 1;
inline void UpdateSnapshotRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& UpdateSnapshotRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UpdateSnapshotRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSnapshotRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.UpdateSnapshotRequest.snapshotter)
}
inline std::string* UpdateSnapshotRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.UpdateSnapshotRequest.snapshotter)
  return _s;
}
inline const std::string& UpdateSnapshotRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void UpdateSnapshotRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSnapshotRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSnapshotRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.UpdateSnapshotRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSnapshotRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotRequest.snapshotter)
}

// .containerd.services.snapshots.v1.Info info = 2 [(.gogoproto.nullable) = false];
inline bool UpdateSnapshotRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateSnapshotRequest::has_info() const {
  return _internal_has_info();
}
inline void UpdateSnapshotRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::containerd::services::snapshots::v1::Info& UpdateSnapshotRequest::_internal_info() const {
  const ::containerd::services::snapshots::v1::Info* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::snapshots::v1::Info&>(
      ::containerd::services::snapshots::v1::_Info_default_instance_);
}
inline const ::containerd::services::snapshots::v1::Info& UpdateSnapshotRequest::info() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UpdateSnapshotRequest.info)
  return _internal_info();
}
inline void UpdateSnapshotRequest::unsafe_arena_set_allocated_info(
    ::containerd::services::snapshots::v1::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotRequest.info)
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotRequest::release_info() {
  
  ::containerd::services::snapshots::v1::Info* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.UpdateSnapshotRequest.info)
  
  ::containerd::services::snapshots::v1::Info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::snapshots::v1::Info>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotRequest::mutable_info() {
  ::containerd::services::snapshots::v1::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.UpdateSnapshotRequest.info)
  return _msg;
}
inline void UpdateSnapshotRequest::set_allocated_info(::containerd::services::snapshots::v1::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::snapshots::v1::Info>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotRequest.info)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateSnapshotRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateSnapshotRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSnapshotRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSnapshotRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UpdateSnapshotRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSnapshotRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.UpdateSnapshotRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnapshotRequest::mutable_update_mask() {
  PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.UpdateSnapshotRequest.update_mask)
  return _msg;
}
inline void UpdateSnapshotRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotRequest.update_mask)
}

// -------------------------------------------------------------------

// UpdateSnapshotResponse

// .containerd.services.snapshots.v1.Info info = 1 [(.gogoproto.nullable) = false];
inline bool UpdateSnapshotResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateSnapshotResponse::has_info() const {
  return _internal_has_info();
}
inline void UpdateSnapshotResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::containerd::services::snapshots::v1::Info& UpdateSnapshotResponse::_internal_info() const {
  const ::containerd::services::snapshots::v1::Info* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::snapshots::v1::Info&>(
      ::containerd::services::snapshots::v1::_Info_default_instance_);
}
inline const ::containerd::services::snapshots::v1::Info& UpdateSnapshotResponse::info() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UpdateSnapshotResponse.info)
  return _internal_info();
}
inline void UpdateSnapshotResponse::unsafe_arena_set_allocated_info(
    ::containerd::services::snapshots::v1::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotResponse.info)
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotResponse::release_info() {
  
  ::containerd::services::snapshots::v1::Info* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.UpdateSnapshotResponse.info)
  
  ::containerd::services::snapshots::v1::Info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::snapshots::v1::Info>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::containerd::services::snapshots::v1::Info* UpdateSnapshotResponse::mutable_info() {
  ::containerd::services::snapshots::v1::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.UpdateSnapshotResponse.info)
  return _msg;
}
inline void UpdateSnapshotResponse::set_allocated_info(::containerd::services::snapshots::v1::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::snapshots::v1::Info>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.UpdateSnapshotResponse.info)
}

// -------------------------------------------------------------------

// ListSnapshotsRequest

// string snapshotter = 1;
inline void ListSnapshotsRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& ListSnapshotsRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ListSnapshotsRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnapshotsRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.ListSnapshotsRequest.snapshotter)
}
inline std::string* ListSnapshotsRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ListSnapshotsRequest.snapshotter)
  return _s;
}
inline const std::string& ListSnapshotsRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void ListSnapshotsRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSnapshotsRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSnapshotsRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.ListSnapshotsRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSnapshotsRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.ListSnapshotsRequest.snapshotter)
}

// repeated string filters = 2;
inline int ListSnapshotsRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int ListSnapshotsRequest::filters_size() const {
  return _internal_filters_size();
}
inline void ListSnapshotsRequest::clear_filters() {
  filters_.Clear();
}
inline std::string* ListSnapshotsRequest::add_filters() {
  std::string* _s = _internal_add_filters();
  // @@protoc_insertion_point(field_add_mutable:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
  return _s;
}
inline const std::string& ListSnapshotsRequest::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const std::string& ListSnapshotsRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
  return _internal_filters(index);
}
inline std::string* ListSnapshotsRequest::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
  return filters_.Mutable(index);
}
inline void ListSnapshotsRequest::set_filters(int index, const std::string& value) {
  filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline void ListSnapshotsRequest::set_filters(int index, std::string&& value) {
  filters_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline void ListSnapshotsRequest::set_filters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline void ListSnapshotsRequest::set_filters(int index, const char* value, size_t size) {
  filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline std::string* ListSnapshotsRequest::_internal_add_filters() {
  return filters_.Add();
}
inline void ListSnapshotsRequest::add_filters(const std::string& value) {
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline void ListSnapshotsRequest::add_filters(std::string&& value) {
  filters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline void ListSnapshotsRequest::add_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline void ListSnapshotsRequest::add_filters(const char* value, size_t size) {
  filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSnapshotsRequest::filters() const {
  // @@protoc_insertion_point(field_list:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSnapshotsRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.snapshots.v1.ListSnapshotsRequest.filters)
  return &filters_;
}

// -------------------------------------------------------------------

// ListSnapshotsResponse

// repeated .containerd.services.snapshots.v1.Info info = 1 [(.gogoproto.nullable) = false];
inline int ListSnapshotsResponse::_internal_info_size() const {
  return info_.size();
}
inline int ListSnapshotsResponse::info_size() const {
  return _internal_info_size();
}
inline void ListSnapshotsResponse::clear_info() {
  info_.Clear();
}
inline ::containerd::services::snapshots::v1::Info* ListSnapshotsResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.ListSnapshotsResponse.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::snapshots::v1::Info >*
ListSnapshotsResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.snapshots.v1.ListSnapshotsResponse.info)
  return &info_;
}
inline const ::containerd::services::snapshots::v1::Info& ListSnapshotsResponse::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::containerd::services::snapshots::v1::Info& ListSnapshotsResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.ListSnapshotsResponse.info)
  return _internal_info(index);
}
inline ::containerd::services::snapshots::v1::Info* ListSnapshotsResponse::_internal_add_info() {
  return info_.Add();
}
inline ::containerd::services::snapshots::v1::Info* ListSnapshotsResponse::add_info() {
  ::containerd::services::snapshots::v1::Info* _add = _internal_add_info();
  // @@protoc_insertion_point(field_add:containerd.services.snapshots.v1.ListSnapshotsResponse.info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::snapshots::v1::Info >&
ListSnapshotsResponse::info() const {
  // @@protoc_insertion_point(field_list:containerd.services.snapshots.v1.ListSnapshotsResponse.info)
  return info_;
}

// -------------------------------------------------------------------

// UsageRequest

// string snapshotter = 1;
inline void UsageRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& UsageRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UsageRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsageRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.UsageRequest.snapshotter)
}
inline std::string* UsageRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.UsageRequest.snapshotter)
  return _s;
}
inline const std::string& UsageRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void UsageRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsageRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsageRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.UsageRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsageRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.UsageRequest.snapshotter)
}

// string key = 2;
inline void UsageRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& UsageRequest::key() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UsageRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsageRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.UsageRequest.key)
}
inline std::string* UsageRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.UsageRequest.key)
  return _s;
}
inline const std::string& UsageRequest::_internal_key() const {
  return key_.Get();
}
inline void UsageRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsageRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsageRequest::release_key() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.UsageRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsageRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.UsageRequest.key)
}

// -------------------------------------------------------------------

// UsageResponse

// int64 size = 1;
inline void UsageResponse::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UsageResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UsageResponse::size() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UsageResponse.size)
  return _internal_size();
}
inline void UsageResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void UsageResponse::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.UsageResponse.size)
}

// int64 inodes = 2;
inline void UsageResponse::clear_inodes() {
  inodes_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UsageResponse::_internal_inodes() const {
  return inodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UsageResponse::inodes() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.UsageResponse.inodes)
  return _internal_inodes();
}
inline void UsageResponse::_internal_set_inodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inodes_ = value;
}
inline void UsageResponse::set_inodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inodes(value);
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.UsageResponse.inodes)
}

// -------------------------------------------------------------------

// CleanupRequest

// string snapshotter = 1;
inline void CleanupRequest::clear_snapshotter() {
  snapshotter_.ClearToEmpty();
}
inline const std::string& CleanupRequest::snapshotter() const {
  // @@protoc_insertion_point(field_get:containerd.services.snapshots.v1.CleanupRequest.snapshotter)
  return _internal_snapshotter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CleanupRequest::set_snapshotter(ArgT0&& arg0, ArgT... args) {
 
 snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.snapshots.v1.CleanupRequest.snapshotter)
}
inline std::string* CleanupRequest::mutable_snapshotter() {
  std::string* _s = _internal_mutable_snapshotter();
  // @@protoc_insertion_point(field_mutable:containerd.services.snapshots.v1.CleanupRequest.snapshotter)
  return _s;
}
inline const std::string& CleanupRequest::_internal_snapshotter() const {
  return snapshotter_.Get();
}
inline void CleanupRequest::_internal_set_snapshotter(const std::string& value) {
  
  snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CleanupRequest::_internal_mutable_snapshotter() {
  
  return snapshotter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CleanupRequest::release_snapshotter() {
  // @@protoc_insertion_point(field_release:containerd.services.snapshots.v1.CleanupRequest.snapshotter)
  return snapshotter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CleanupRequest::set_allocated_snapshotter(std::string* snapshotter) {
  if (snapshotter != nullptr) {
    
  } else {
    
  }
  snapshotter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.snapshots.v1.CleanupRequest.snapshotter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace snapshots
}  // namespace services
}  // namespace containerd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::containerd::services::snapshots::v1::Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::containerd::services::snapshots::v1::Kind>() {
  return ::containerd::services::snapshots::v1::Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snapshots_2eproto
