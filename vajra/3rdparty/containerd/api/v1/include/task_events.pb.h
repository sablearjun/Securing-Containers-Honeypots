// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "mount.pb.h"
#include "fieldpath.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_5fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_5fevents_2eproto;
namespace containerd {
namespace events {
class TaskCheckpointed;
struct TaskCheckpointedDefaultTypeInternal;
extern TaskCheckpointedDefaultTypeInternal _TaskCheckpointed_default_instance_;
class TaskCreate;
struct TaskCreateDefaultTypeInternal;
extern TaskCreateDefaultTypeInternal _TaskCreate_default_instance_;
class TaskDelete;
struct TaskDeleteDefaultTypeInternal;
extern TaskDeleteDefaultTypeInternal _TaskDelete_default_instance_;
class TaskExecAdded;
struct TaskExecAddedDefaultTypeInternal;
extern TaskExecAddedDefaultTypeInternal _TaskExecAdded_default_instance_;
class TaskExecStarted;
struct TaskExecStartedDefaultTypeInternal;
extern TaskExecStartedDefaultTypeInternal _TaskExecStarted_default_instance_;
class TaskExit;
struct TaskExitDefaultTypeInternal;
extern TaskExitDefaultTypeInternal _TaskExit_default_instance_;
class TaskIO;
struct TaskIODefaultTypeInternal;
extern TaskIODefaultTypeInternal _TaskIO_default_instance_;
class TaskOOM;
struct TaskOOMDefaultTypeInternal;
extern TaskOOMDefaultTypeInternal _TaskOOM_default_instance_;
class TaskPaused;
struct TaskPausedDefaultTypeInternal;
extern TaskPausedDefaultTypeInternal _TaskPaused_default_instance_;
class TaskResumed;
struct TaskResumedDefaultTypeInternal;
extern TaskResumedDefaultTypeInternal _TaskResumed_default_instance_;
class TaskStart;
struct TaskStartDefaultTypeInternal;
extern TaskStartDefaultTypeInternal _TaskStart_default_instance_;
}  // namespace events
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::events::TaskCheckpointed* Arena::CreateMaybeMessage<::containerd::events::TaskCheckpointed>(Arena*);
template<> ::containerd::events::TaskCreate* Arena::CreateMaybeMessage<::containerd::events::TaskCreate>(Arena*);
template<> ::containerd::events::TaskDelete* Arena::CreateMaybeMessage<::containerd::events::TaskDelete>(Arena*);
template<> ::containerd::events::TaskExecAdded* Arena::CreateMaybeMessage<::containerd::events::TaskExecAdded>(Arena*);
template<> ::containerd::events::TaskExecStarted* Arena::CreateMaybeMessage<::containerd::events::TaskExecStarted>(Arena*);
template<> ::containerd::events::TaskExit* Arena::CreateMaybeMessage<::containerd::events::TaskExit>(Arena*);
template<> ::containerd::events::TaskIO* Arena::CreateMaybeMessage<::containerd::events::TaskIO>(Arena*);
template<> ::containerd::events::TaskOOM* Arena::CreateMaybeMessage<::containerd::events::TaskOOM>(Arena*);
template<> ::containerd::events::TaskPaused* Arena::CreateMaybeMessage<::containerd::events::TaskPaused>(Arena*);
template<> ::containerd::events::TaskResumed* Arena::CreateMaybeMessage<::containerd::events::TaskResumed>(Arena*);
template<> ::containerd::events::TaskStart* Arena::CreateMaybeMessage<::containerd::events::TaskStart>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace events {

// ===================================================================

class TaskCreate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskCreate) */ {
 public:
  inline TaskCreate() : TaskCreate(nullptr) {}
  ~TaskCreate() override;
  explicit constexpr TaskCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCreate(const TaskCreate& from);
  TaskCreate(TaskCreate&& from) noexcept
    : TaskCreate() {
    *this = ::std::move(from);
  }

  inline TaskCreate& operator=(const TaskCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCreate& operator=(TaskCreate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCreate* internal_default_instance() {
    return reinterpret_cast<const TaskCreate*>(
               &_TaskCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskCreate& a, TaskCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCreate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskCreate* New() const final {
    return new TaskCreate();
  }

  TaskCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskCreate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskCreate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskCreate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskCreate";
  }
  protected:
  explicit TaskCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootfsFieldNumber = 3,
    kContainerIdFieldNumber = 1,
    kBundleFieldNumber = 2,
    kCheckpointFieldNumber = 5,
    kIoFieldNumber = 4,
    kPidFieldNumber = 6,
  };
  // repeated .containerd.types.Mount rootfs = 3;
  int rootfs_size() const;
  private:
  int _internal_rootfs_size() const;
  public:
  void clear_rootfs();
  ::containerd::types::Mount* mutable_rootfs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_rootfs();
  private:
  const ::containerd::types::Mount& _internal_rootfs(int index) const;
  ::containerd::types::Mount* _internal_add_rootfs();
  public:
  const ::containerd::types::Mount& rootfs(int index) const;
  ::containerd::types::Mount* add_rootfs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      rootfs() const;

  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string bundle = 2;
  void clear_bundle();
  const std::string& bundle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bundle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bundle();
  PROTOBUF_MUST_USE_RESULT std::string* release_bundle();
  void set_allocated_bundle(std::string* bundle);
  private:
  const std::string& _internal_bundle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bundle(const std::string& value);
  std::string* _internal_mutable_bundle();
  public:

  // string checkpoint = 5;
  void clear_checkpoint();
  const std::string& checkpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_checkpoint();
  void set_allocated_checkpoint(std::string* checkpoint);
  private:
  const std::string& _internal_checkpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkpoint(const std::string& value);
  std::string* _internal_mutable_checkpoint();
  public:

  // .containerd.events.TaskIO io = 4 [(.gogoproto.customname) = "IO"];
  bool has_io() const;
  private:
  bool _internal_has_io() const;
  public:
  void clear_io();
  const ::containerd::events::TaskIO& io() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::events::TaskIO* release_io();
  ::containerd::events::TaskIO* mutable_io();
  void set_allocated_io(::containerd::events::TaskIO* io);
  private:
  const ::containerd::events::TaskIO& _internal_io() const;
  ::containerd::events::TaskIO* _internal_mutable_io();
  public:
  void unsafe_arena_set_allocated_io(
      ::containerd::events::TaskIO* io);
  ::containerd::events::TaskIO* unsafe_arena_release_io();

  // uint32 pid = 6;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > rootfs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_;
  ::containerd::events::TaskIO* io_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskStart) */ {
 public:
  inline TaskStart() : TaskStart(nullptr) {}
  ~TaskStart() override;
  explicit constexpr TaskStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskStart(const TaskStart& from);
  TaskStart(TaskStart&& from) noexcept
    : TaskStart() {
    *this = ::std::move(from);
  }

  inline TaskStart& operator=(const TaskStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStart& operator=(TaskStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStart* internal_default_instance() {
    return reinterpret_cast<const TaskStart*>(
               &_TaskStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskStart& a, TaskStart& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStart* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskStart* New() const final {
    return new TaskStart();
  }

  TaskStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskStart";
  }
  protected:
  explicit TaskStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // uint32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskDelete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskDelete) */ {
 public:
  inline TaskDelete() : TaskDelete(nullptr) {}
  ~TaskDelete() override;
  explicit constexpr TaskDelete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskDelete(const TaskDelete& from);
  TaskDelete(TaskDelete&& from) noexcept
    : TaskDelete() {
    *this = ::std::move(from);
  }

  inline TaskDelete& operator=(const TaskDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskDelete& operator=(TaskDelete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskDelete& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskDelete* internal_default_instance() {
    return reinterpret_cast<const TaskDelete*>(
               &_TaskDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskDelete& a, TaskDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskDelete* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskDelete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskDelete* New() const final {
    return new TaskDelete();
  }

  TaskDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskDelete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskDelete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskDelete& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskDelete";
  }
  protected:
  explicit TaskDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kIdFieldNumber = 5,
    kExitedAtFieldNumber = 4,
    kPidFieldNumber = 2,
    kExitStatusFieldNumber = 3,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string id = 5;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_exited_at() const;
  private:
  bool _internal_has_exited_at() const;
  public:
  void clear_exited_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_exited_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exited_at();
  void set_allocated_exited_at(PROTOBUF_NAMESPACE_ID::Timestamp* exited_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exited_at();
  public:
  void unsafe_arena_set_allocated_exited_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* exited_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exited_at();

  // uint32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exit_status = 3;
  void clear_exit_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status() const;
  void set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_status() const;
  void _internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskDelete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* exited_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskIO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskIO) */ {
 public:
  inline TaskIO() : TaskIO(nullptr) {}
  ~TaskIO() override;
  explicit constexpr TaskIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskIO(const TaskIO& from);
  TaskIO(TaskIO&& from) noexcept
    : TaskIO() {
    *this = ::std::move(from);
  }

  inline TaskIO& operator=(const TaskIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskIO& operator=(TaskIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskIO* internal_default_instance() {
    return reinterpret_cast<const TaskIO*>(
               &_TaskIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskIO& a, TaskIO& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskIO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskIO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskIO* New() const final {
    return new TaskIO();
  }

  TaskIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskIO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskIO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskIO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskIO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskIO";
  }
  protected:
  explicit TaskIO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdinFieldNumber = 1,
    kStdoutFieldNumber = 2,
    kStderrFieldNumber = 3,
    kTerminalFieldNumber = 4,
  };
  // string stdin = 1;
  void clear_stdin();
  const std::string& stdin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stdin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stdin();
  PROTOBUF_MUST_USE_RESULT std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // string stdout = 2;
  void clear_stdout();
  const std::string& stdout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stdout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stdout();
  PROTOBUF_MUST_USE_RESULT std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // string stderr = 3;
  void clear_stderr();
  const std::string& stderr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stderr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stderr();
  PROTOBUF_MUST_USE_RESULT std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // bool terminal = 4;
  void clear_terminal();
  bool terminal() const;
  void set_terminal(bool value);
  private:
  bool _internal_terminal() const;
  void _internal_set_terminal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  bool terminal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskExit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskExit) */ {
 public:
  inline TaskExit() : TaskExit(nullptr) {}
  ~TaskExit() override;
  explicit constexpr TaskExit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExit(const TaskExit& from);
  TaskExit(TaskExit&& from) noexcept
    : TaskExit() {
    *this = ::std::move(from);
  }

  inline TaskExit& operator=(const TaskExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExit& operator=(TaskExit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExit& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExit* internal_default_instance() {
    return reinterpret_cast<const TaskExit*>(
               &_TaskExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskExit& a, TaskExit& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskExit* New() const final {
    return new TaskExit();
  }

  TaskExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskExit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskExit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskExit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskExit";
  }
  protected:
  explicit TaskExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kExitedAtFieldNumber = 5,
    kPidFieldNumber = 3,
    kExitStatusFieldNumber = 4,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp exited_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_exited_at() const;
  private:
  bool _internal_has_exited_at() const;
  public:
  void clear_exited_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_exited_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exited_at();
  void set_allocated_exited_at(PROTOBUF_NAMESPACE_ID::Timestamp* exited_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exited_at();
  public:
  void unsafe_arena_set_allocated_exited_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* exited_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exited_at();

  // uint32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exit_status = 4;
  void clear_exit_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status() const;
  void set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_status() const;
  void _internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* exited_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskOOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskOOM) */ {
 public:
  inline TaskOOM() : TaskOOM(nullptr) {}
  ~TaskOOM() override;
  explicit constexpr TaskOOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskOOM(const TaskOOM& from);
  TaskOOM(TaskOOM&& from) noexcept
    : TaskOOM() {
    *this = ::std::move(from);
  }

  inline TaskOOM& operator=(const TaskOOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskOOM& operator=(TaskOOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskOOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskOOM* internal_default_instance() {
    return reinterpret_cast<const TaskOOM*>(
               &_TaskOOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TaskOOM& a, TaskOOM& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskOOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskOOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskOOM* New() const final {
    return new TaskOOM();
  }

  TaskOOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskOOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskOOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskOOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskOOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskOOM";
  }
  protected:
  explicit TaskOOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskOOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskExecAdded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskExecAdded) */ {
 public:
  inline TaskExecAdded() : TaskExecAdded(nullptr) {}
  ~TaskExecAdded() override;
  explicit constexpr TaskExecAdded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecAdded(const TaskExecAdded& from);
  TaskExecAdded(TaskExecAdded&& from) noexcept
    : TaskExecAdded() {
    *this = ::std::move(from);
  }

  inline TaskExecAdded& operator=(const TaskExecAdded& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecAdded& operator=(TaskExecAdded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecAdded& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecAdded* internal_default_instance() {
    return reinterpret_cast<const TaskExecAdded*>(
               &_TaskExecAdded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskExecAdded& a, TaskExecAdded& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecAdded* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecAdded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskExecAdded* New() const final {
    return new TaskExecAdded();
  }

  TaskExecAdded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecAdded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskExecAdded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskExecAdded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecAdded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskExecAdded";
  }
  protected:
  explicit TaskExecAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kExecIdFieldNumber = 2,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string exec_id = 2;
  void clear_exec_id();
  const std::string& exec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_exec_id();
  void set_allocated_exec_id(std::string* exec_id);
  private:
  const std::string& _internal_exec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_id(const std::string& value);
  std::string* _internal_mutable_exec_id();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskExecAdded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskExecStarted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskExecStarted) */ {
 public:
  inline TaskExecStarted() : TaskExecStarted(nullptr) {}
  ~TaskExecStarted() override;
  explicit constexpr TaskExecStarted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecStarted(const TaskExecStarted& from);
  TaskExecStarted(TaskExecStarted&& from) noexcept
    : TaskExecStarted() {
    *this = ::std::move(from);
  }

  inline TaskExecStarted& operator=(const TaskExecStarted& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecStarted& operator=(TaskExecStarted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecStarted& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecStarted* internal_default_instance() {
    return reinterpret_cast<const TaskExecStarted*>(
               &_TaskExecStarted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TaskExecStarted& a, TaskExecStarted& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecStarted* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecStarted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskExecStarted* New() const final {
    return new TaskExecStarted();
  }

  TaskExecStarted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecStarted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskExecStarted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskExecStarted& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecStarted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskExecStarted";
  }
  protected:
  explicit TaskExecStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kExecIdFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string exec_id = 2;
  void clear_exec_id();
  const std::string& exec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_exec_id();
  void set_allocated_exec_id(std::string* exec_id);
  private:
  const std::string& _internal_exec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_id(const std::string& value);
  std::string* _internal_mutable_exec_id();
  public:

  // uint32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskExecStarted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskPaused final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskPaused) */ {
 public:
  inline TaskPaused() : TaskPaused(nullptr) {}
  ~TaskPaused() override;
  explicit constexpr TaskPaused(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskPaused(const TaskPaused& from);
  TaskPaused(TaskPaused&& from) noexcept
    : TaskPaused() {
    *this = ::std::move(from);
  }

  inline TaskPaused& operator=(const TaskPaused& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskPaused& operator=(TaskPaused&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskPaused& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskPaused* internal_default_instance() {
    return reinterpret_cast<const TaskPaused*>(
               &_TaskPaused_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TaskPaused& a, TaskPaused& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskPaused* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskPaused* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskPaused* New() const final {
    return new TaskPaused();
  }

  TaskPaused* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskPaused>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskPaused& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskPaused& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskPaused* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskPaused";
  }
  protected:
  explicit TaskPaused(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskPaused)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskResumed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskResumed) */ {
 public:
  inline TaskResumed() : TaskResumed(nullptr) {}
  ~TaskResumed() override;
  explicit constexpr TaskResumed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskResumed(const TaskResumed& from);
  TaskResumed(TaskResumed&& from) noexcept
    : TaskResumed() {
    *this = ::std::move(from);
  }

  inline TaskResumed& operator=(const TaskResumed& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResumed& operator=(TaskResumed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResumed& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResumed* internal_default_instance() {
    return reinterpret_cast<const TaskResumed*>(
               &_TaskResumed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TaskResumed& a, TaskResumed& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResumed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResumed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskResumed* New() const final {
    return new TaskResumed();
  }

  TaskResumed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskResumed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskResumed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskResumed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResumed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskResumed";
  }
  protected:
  explicit TaskResumed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskResumed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TaskCheckpointed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.TaskCheckpointed) */ {
 public:
  inline TaskCheckpointed() : TaskCheckpointed(nullptr) {}
  ~TaskCheckpointed() override;
  explicit constexpr TaskCheckpointed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCheckpointed(const TaskCheckpointed& from);
  TaskCheckpointed(TaskCheckpointed&& from) noexcept
    : TaskCheckpointed() {
    *this = ::std::move(from);
  }

  inline TaskCheckpointed& operator=(const TaskCheckpointed& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCheckpointed& operator=(TaskCheckpointed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCheckpointed& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCheckpointed* internal_default_instance() {
    return reinterpret_cast<const TaskCheckpointed*>(
               &_TaskCheckpointed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TaskCheckpointed& a, TaskCheckpointed& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCheckpointed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCheckpointed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskCheckpointed* New() const final {
    return new TaskCheckpointed();
  }

  TaskCheckpointed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskCheckpointed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskCheckpointed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskCheckpointed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCheckpointed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.TaskCheckpointed";
  }
  protected:
  explicit TaskCheckpointed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kCheckpointFieldNumber = 2,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string checkpoint = 2;
  void clear_checkpoint();
  const std::string& checkpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_checkpoint();
  void set_allocated_checkpoint(std::string* checkpoint);
  private:
  const std::string& _internal_checkpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkpoint(const std::string& value);
  std::string* _internal_mutable_checkpoint();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.TaskCheckpointed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskCreate

// string container_id = 1;
inline void TaskCreate::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskCreate::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCreate.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskCreate::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskCreate.container_id)
}
inline std::string* TaskCreate::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCreate.container_id)
  return _s;
}
inline const std::string& TaskCreate::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskCreate::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskCreate::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskCreate::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskCreate.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskCreate::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskCreate.container_id)
}

// string bundle = 2;
inline void TaskCreate::clear_bundle() {
  bundle_.ClearToEmpty();
}
inline const std::string& TaskCreate::bundle() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCreate.bundle)
  return _internal_bundle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskCreate::set_bundle(ArgT0&& arg0, ArgT... args) {
 
 bundle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskCreate.bundle)
}
inline std::string* TaskCreate::mutable_bundle() {
  std::string* _s = _internal_mutable_bundle();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCreate.bundle)
  return _s;
}
inline const std::string& TaskCreate::_internal_bundle() const {
  return bundle_.Get();
}
inline void TaskCreate::_internal_set_bundle(const std::string& value) {
  
  bundle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskCreate::_internal_mutable_bundle() {
  
  return bundle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskCreate::release_bundle() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskCreate.bundle)
  return bundle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskCreate::set_allocated_bundle(std::string* bundle) {
  if (bundle != nullptr) {
    
  } else {
    
  }
  bundle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskCreate.bundle)
}

// repeated .containerd.types.Mount rootfs = 3;
inline int TaskCreate::_internal_rootfs_size() const {
  return rootfs_.size();
}
inline int TaskCreate::rootfs_size() const {
  return _internal_rootfs_size();
}
inline ::containerd::types::Mount* TaskCreate::mutable_rootfs(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCreate.rootfs)
  return rootfs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
TaskCreate::mutable_rootfs() {
  // @@protoc_insertion_point(field_mutable_list:containerd.events.TaskCreate.rootfs)
  return &rootfs_;
}
inline const ::containerd::types::Mount& TaskCreate::_internal_rootfs(int index) const {
  return rootfs_.Get(index);
}
inline const ::containerd::types::Mount& TaskCreate::rootfs(int index) const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCreate.rootfs)
  return _internal_rootfs(index);
}
inline ::containerd::types::Mount* TaskCreate::_internal_add_rootfs() {
  return rootfs_.Add();
}
inline ::containerd::types::Mount* TaskCreate::add_rootfs() {
  ::containerd::types::Mount* _add = _internal_add_rootfs();
  // @@protoc_insertion_point(field_add:containerd.events.TaskCreate.rootfs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
TaskCreate::rootfs() const {
  // @@protoc_insertion_point(field_list:containerd.events.TaskCreate.rootfs)
  return rootfs_;
}

// .containerd.events.TaskIO io = 4 [(.gogoproto.customname) = "IO"];
inline bool TaskCreate::_internal_has_io() const {
  return this != internal_default_instance() && io_ != nullptr;
}
inline bool TaskCreate::has_io() const {
  return _internal_has_io();
}
inline void TaskCreate::clear_io() {
  if (GetArenaForAllocation() == nullptr && io_ != nullptr) {
    delete io_;
  }
  io_ = nullptr;
}
inline const ::containerd::events::TaskIO& TaskCreate::_internal_io() const {
  const ::containerd::events::TaskIO* p = io_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::events::TaskIO&>(
      ::containerd::events::_TaskIO_default_instance_);
}
inline const ::containerd::events::TaskIO& TaskCreate::io() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCreate.io)
  return _internal_io();
}
inline void TaskCreate::unsafe_arena_set_allocated_io(
    ::containerd::events::TaskIO* io) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(io_);
  }
  io_ = io;
  if (io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.events.TaskCreate.io)
}
inline ::containerd::events::TaskIO* TaskCreate::release_io() {
  
  ::containerd::events::TaskIO* temp = io_;
  io_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::events::TaskIO* TaskCreate::unsafe_arena_release_io() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskCreate.io)
  
  ::containerd::events::TaskIO* temp = io_;
  io_ = nullptr;
  return temp;
}
inline ::containerd::events::TaskIO* TaskCreate::_internal_mutable_io() {
  
  if (io_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::events::TaskIO>(GetArenaForAllocation());
    io_ = p;
  }
  return io_;
}
inline ::containerd::events::TaskIO* TaskCreate::mutable_io() {
  ::containerd::events::TaskIO* _msg = _internal_mutable_io();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCreate.io)
  return _msg;
}
inline void TaskCreate::set_allocated_io(::containerd::events::TaskIO* io) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete io_;
  }
  if (io) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::events::TaskIO>::GetOwningArena(io);
    if (message_arena != submessage_arena) {
      io = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, io, submessage_arena);
    }
    
  } else {
    
  }
  io_ = io;
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskCreate.io)
}

// string checkpoint = 5;
inline void TaskCreate::clear_checkpoint() {
  checkpoint_.ClearToEmpty();
}
inline const std::string& TaskCreate::checkpoint() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCreate.checkpoint)
  return _internal_checkpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskCreate::set_checkpoint(ArgT0&& arg0, ArgT... args) {
 
 checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskCreate.checkpoint)
}
inline std::string* TaskCreate::mutable_checkpoint() {
  std::string* _s = _internal_mutable_checkpoint();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCreate.checkpoint)
  return _s;
}
inline const std::string& TaskCreate::_internal_checkpoint() const {
  return checkpoint_.Get();
}
inline void TaskCreate::_internal_set_checkpoint(const std::string& value) {
  
  checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskCreate::_internal_mutable_checkpoint() {
  
  return checkpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskCreate::release_checkpoint() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskCreate.checkpoint)
  return checkpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskCreate::set_allocated_checkpoint(std::string* checkpoint) {
  if (checkpoint != nullptr) {
    
  } else {
    
  }
  checkpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskCreate.checkpoint)
}

// uint32 pid = 6;
inline void TaskCreate::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskCreate::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskCreate::pid() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCreate.pid)
  return _internal_pid();
}
inline void TaskCreate::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void TaskCreate::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskCreate.pid)
}

// -------------------------------------------------------------------

// TaskStart

// string container_id = 1;
inline void TaskStart::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskStart::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskStart.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskStart::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskStart.container_id)
}
inline std::string* TaskStart::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskStart.container_id)
  return _s;
}
inline const std::string& TaskStart::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskStart::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskStart::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskStart::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskStart.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskStart::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskStart.container_id)
}

// uint32 pid = 2;
inline void TaskStart::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStart::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStart::pid() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskStart.pid)
  return _internal_pid();
}
inline void TaskStart::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void TaskStart::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskStart.pid)
}

// -------------------------------------------------------------------

// TaskDelete

// string container_id = 1;
inline void TaskDelete::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskDelete::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskDelete.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskDelete::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskDelete.container_id)
}
inline std::string* TaskDelete::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskDelete.container_id)
  return _s;
}
inline const std::string& TaskDelete::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskDelete::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskDelete::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskDelete::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskDelete.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskDelete::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskDelete.container_id)
}

// uint32 pid = 2;
inline void TaskDelete::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskDelete::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskDelete::pid() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskDelete.pid)
  return _internal_pid();
}
inline void TaskDelete::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void TaskDelete::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskDelete.pid)
}

// uint32 exit_status = 3;
inline void TaskDelete::clear_exit_status() {
  exit_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskDelete::_internal_exit_status() const {
  return exit_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskDelete::exit_status() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskDelete.exit_status)
  return _internal_exit_status();
}
inline void TaskDelete::_internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_status_ = value;
}
inline void TaskDelete::set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_status(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskDelete.exit_status)
}

// .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool TaskDelete::_internal_has_exited_at() const {
  return this != internal_default_instance() && exited_at_ != nullptr;
}
inline bool TaskDelete::has_exited_at() const {
  return _internal_has_exited_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TaskDelete::_internal_exited_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = exited_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TaskDelete::exited_at() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskDelete.exited_at)
  return _internal_exited_at();
}
inline void TaskDelete::unsafe_arena_set_allocated_exited_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* exited_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at_);
  }
  exited_at_ = exited_at;
  if (exited_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.events.TaskDelete.exited_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskDelete::release_exited_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exited_at_;
  exited_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskDelete::unsafe_arena_release_exited_at() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskDelete.exited_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exited_at_;
  exited_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskDelete::_internal_mutable_exited_at() {
  
  if (exited_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    exited_at_ = p;
  }
  return exited_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskDelete::mutable_exited_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exited_at();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskDelete.exited_at)
  return _msg;
}
inline void TaskDelete::set_allocated_exited_at(PROTOBUF_NAMESPACE_ID::Timestamp* exited_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at_);
  }
  if (exited_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at));
    if (message_arena != submessage_arena) {
      exited_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exited_at, submessage_arena);
    }
    
  } else {
    
  }
  exited_at_ = exited_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskDelete.exited_at)
}

// string id = 5;
inline void TaskDelete::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TaskDelete::id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskDelete.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskDelete::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskDelete.id)
}
inline std::string* TaskDelete::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskDelete.id)
  return _s;
}
inline const std::string& TaskDelete::_internal_id() const {
  return id_.Get();
}
inline void TaskDelete::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskDelete::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskDelete::release_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskDelete.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskDelete::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskDelete.id)
}

// -------------------------------------------------------------------

// TaskIO

// string stdin = 1;
inline void TaskIO::clear_stdin() {
  stdin_.ClearToEmpty();
}
inline const std::string& TaskIO::stdin() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskIO.stdin)
  return _internal_stdin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskIO::set_stdin(ArgT0&& arg0, ArgT... args) {
 
 stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskIO.stdin)
}
inline std::string* TaskIO::mutable_stdin() {
  std::string* _s = _internal_mutable_stdin();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskIO.stdin)
  return _s;
}
inline const std::string& TaskIO::_internal_stdin() const {
  return stdin_.Get();
}
inline void TaskIO::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskIO::_internal_mutable_stdin() {
  
  return stdin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskIO::release_stdin() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskIO.stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskIO::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskIO.stdin)
}

// string stdout = 2;
inline void TaskIO::clear_stdout() {
  stdout_.ClearToEmpty();
}
inline const std::string& TaskIO::stdout() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskIO.stdout)
  return _internal_stdout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskIO::set_stdout(ArgT0&& arg0, ArgT... args) {
 
 stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskIO.stdout)
}
inline std::string* TaskIO::mutable_stdout() {
  std::string* _s = _internal_mutable_stdout();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskIO.stdout)
  return _s;
}
inline const std::string& TaskIO::_internal_stdout() const {
  return stdout_.Get();
}
inline void TaskIO::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskIO::_internal_mutable_stdout() {
  
  return stdout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskIO::release_stdout() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskIO.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskIO::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskIO.stdout)
}

// string stderr = 3;
inline void TaskIO::clear_stderr() {
  stderr_.ClearToEmpty();
}
inline const std::string& TaskIO::stderr() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskIO.stderr)
  return _internal_stderr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskIO::set_stderr(ArgT0&& arg0, ArgT... args) {
 
 stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskIO.stderr)
}
inline std::string* TaskIO::mutable_stderr() {
  std::string* _s = _internal_mutable_stderr();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskIO.stderr)
  return _s;
}
inline const std::string& TaskIO::_internal_stderr() const {
  return stderr_.Get();
}
inline void TaskIO::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskIO::_internal_mutable_stderr() {
  
  return stderr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskIO::release_stderr() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskIO.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskIO::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskIO.stderr)
}

// bool terminal = 4;
inline void TaskIO::clear_terminal() {
  terminal_ = false;
}
inline bool TaskIO::_internal_terminal() const {
  return terminal_;
}
inline bool TaskIO::terminal() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskIO.terminal)
  return _internal_terminal();
}
inline void TaskIO::_internal_set_terminal(bool value) {
  
  terminal_ = value;
}
inline void TaskIO::set_terminal(bool value) {
  _internal_set_terminal(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskIO.terminal)
}

// -------------------------------------------------------------------

// TaskExit

// string container_id = 1;
inline void TaskExit::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskExit::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExit.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExit::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskExit.container_id)
}
inline std::string* TaskExit::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExit.container_id)
  return _s;
}
inline const std::string& TaskExit::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskExit::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExit::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExit::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExit.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExit::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExit.container_id)
}

// string id = 2;
inline void TaskExit::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TaskExit::id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExit.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExit::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskExit.id)
}
inline std::string* TaskExit::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExit.id)
  return _s;
}
inline const std::string& TaskExit::_internal_id() const {
  return id_.Get();
}
inline void TaskExit::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExit::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExit::release_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExit.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExit::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExit.id)
}

// uint32 pid = 3;
inline void TaskExit::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskExit::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskExit::pid() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExit.pid)
  return _internal_pid();
}
inline void TaskExit::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void TaskExit::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskExit.pid)
}

// uint32 exit_status = 4;
inline void TaskExit::clear_exit_status() {
  exit_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskExit::_internal_exit_status() const {
  return exit_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskExit::exit_status() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExit.exit_status)
  return _internal_exit_status();
}
inline void TaskExit::_internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_status_ = value;
}
inline void TaskExit::set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_status(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskExit.exit_status)
}

// .google.protobuf.Timestamp exited_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool TaskExit::_internal_has_exited_at() const {
  return this != internal_default_instance() && exited_at_ != nullptr;
}
inline bool TaskExit::has_exited_at() const {
  return _internal_has_exited_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TaskExit::_internal_exited_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = exited_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TaskExit::exited_at() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExit.exited_at)
  return _internal_exited_at();
}
inline void TaskExit::unsafe_arena_set_allocated_exited_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* exited_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at_);
  }
  exited_at_ = exited_at;
  if (exited_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.events.TaskExit.exited_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskExit::release_exited_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exited_at_;
  exited_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskExit::unsafe_arena_release_exited_at() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExit.exited_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exited_at_;
  exited_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskExit::_internal_mutable_exited_at() {
  
  if (exited_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    exited_at_ = p;
  }
  return exited_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TaskExit::mutable_exited_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exited_at();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExit.exited_at)
  return _msg;
}
inline void TaskExit::set_allocated_exited_at(PROTOBUF_NAMESPACE_ID::Timestamp* exited_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at_);
  }
  if (exited_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at));
    if (message_arena != submessage_arena) {
      exited_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exited_at, submessage_arena);
    }
    
  } else {
    
  }
  exited_at_ = exited_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExit.exited_at)
}

// -------------------------------------------------------------------

// TaskOOM

// string container_id = 1;
inline void TaskOOM::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskOOM::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskOOM.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskOOM::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskOOM.container_id)
}
inline std::string* TaskOOM::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskOOM.container_id)
  return _s;
}
inline const std::string& TaskOOM::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskOOM::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskOOM::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskOOM::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskOOM.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskOOM::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskOOM.container_id)
}

// -------------------------------------------------------------------

// TaskExecAdded

// string container_id = 1;
inline void TaskExecAdded::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskExecAdded::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExecAdded.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecAdded::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskExecAdded.container_id)
}
inline std::string* TaskExecAdded::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExecAdded.container_id)
  return _s;
}
inline const std::string& TaskExecAdded::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskExecAdded::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecAdded::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecAdded::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExecAdded.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecAdded::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExecAdded.container_id)
}

// string exec_id = 2;
inline void TaskExecAdded::clear_exec_id() {
  exec_id_.ClearToEmpty();
}
inline const std::string& TaskExecAdded::exec_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExecAdded.exec_id)
  return _internal_exec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecAdded::set_exec_id(ArgT0&& arg0, ArgT... args) {
 
 exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskExecAdded.exec_id)
}
inline std::string* TaskExecAdded::mutable_exec_id() {
  std::string* _s = _internal_mutable_exec_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExecAdded.exec_id)
  return _s;
}
inline const std::string& TaskExecAdded::_internal_exec_id() const {
  return exec_id_.Get();
}
inline void TaskExecAdded::_internal_set_exec_id(const std::string& value) {
  
  exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecAdded::_internal_mutable_exec_id() {
  
  return exec_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecAdded::release_exec_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExecAdded.exec_id)
  return exec_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecAdded::set_allocated_exec_id(std::string* exec_id) {
  if (exec_id != nullptr) {
    
  } else {
    
  }
  exec_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exec_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExecAdded.exec_id)
}

// -------------------------------------------------------------------

// TaskExecStarted

// string container_id = 1;
inline void TaskExecStarted::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskExecStarted::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExecStarted.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecStarted::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskExecStarted.container_id)
}
inline std::string* TaskExecStarted::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExecStarted.container_id)
  return _s;
}
inline const std::string& TaskExecStarted::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskExecStarted::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecStarted::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecStarted::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExecStarted.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecStarted::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExecStarted.container_id)
}

// string exec_id = 2;
inline void TaskExecStarted::clear_exec_id() {
  exec_id_.ClearToEmpty();
}
inline const std::string& TaskExecStarted::exec_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExecStarted.exec_id)
  return _internal_exec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecStarted::set_exec_id(ArgT0&& arg0, ArgT... args) {
 
 exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskExecStarted.exec_id)
}
inline std::string* TaskExecStarted::mutable_exec_id() {
  std::string* _s = _internal_mutable_exec_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskExecStarted.exec_id)
  return _s;
}
inline const std::string& TaskExecStarted::_internal_exec_id() const {
  return exec_id_.Get();
}
inline void TaskExecStarted::_internal_set_exec_id(const std::string& value) {
  
  exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecStarted::_internal_mutable_exec_id() {
  
  return exec_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecStarted::release_exec_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskExecStarted.exec_id)
  return exec_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecStarted::set_allocated_exec_id(std::string* exec_id) {
  if (exec_id != nullptr) {
    
  } else {
    
  }
  exec_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exec_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskExecStarted.exec_id)
}

// uint32 pid = 3;
inline void TaskExecStarted::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskExecStarted::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskExecStarted::pid() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskExecStarted.pid)
  return _internal_pid();
}
inline void TaskExecStarted::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void TaskExecStarted::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.events.TaskExecStarted.pid)
}

// -------------------------------------------------------------------

// TaskPaused

// string container_id = 1;
inline void TaskPaused::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskPaused::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskPaused.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskPaused::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskPaused.container_id)
}
inline std::string* TaskPaused::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskPaused.container_id)
  return _s;
}
inline const std::string& TaskPaused::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskPaused::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskPaused::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskPaused::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskPaused.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskPaused::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskPaused.container_id)
}

// -------------------------------------------------------------------

// TaskResumed

// string container_id = 1;
inline void TaskResumed::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskResumed::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskResumed.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskResumed::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskResumed.container_id)
}
inline std::string* TaskResumed::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskResumed.container_id)
  return _s;
}
inline const std::string& TaskResumed::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskResumed::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskResumed::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskResumed::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskResumed.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskResumed::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskResumed.container_id)
}

// -------------------------------------------------------------------

// TaskCheckpointed

// string container_id = 1;
inline void TaskCheckpointed::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& TaskCheckpointed::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCheckpointed.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskCheckpointed::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskCheckpointed.container_id)
}
inline std::string* TaskCheckpointed::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCheckpointed.container_id)
  return _s;
}
inline const std::string& TaskCheckpointed::_internal_container_id() const {
  return container_id_.Get();
}
inline void TaskCheckpointed::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskCheckpointed::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskCheckpointed::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskCheckpointed.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskCheckpointed::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskCheckpointed.container_id)
}

// string checkpoint = 2;
inline void TaskCheckpointed::clear_checkpoint() {
  checkpoint_.ClearToEmpty();
}
inline const std::string& TaskCheckpointed::checkpoint() const {
  // @@protoc_insertion_point(field_get:containerd.events.TaskCheckpointed.checkpoint)
  return _internal_checkpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskCheckpointed::set_checkpoint(ArgT0&& arg0, ArgT... args) {
 
 checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.TaskCheckpointed.checkpoint)
}
inline std::string* TaskCheckpointed::mutable_checkpoint() {
  std::string* _s = _internal_mutable_checkpoint();
  // @@protoc_insertion_point(field_mutable:containerd.events.TaskCheckpointed.checkpoint)
  return _s;
}
inline const std::string& TaskCheckpointed::_internal_checkpoint() const {
  return checkpoint_.Get();
}
inline void TaskCheckpointed::_internal_set_checkpoint(const std::string& value) {
  
  checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskCheckpointed::_internal_mutable_checkpoint() {
  
  return checkpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskCheckpointed::release_checkpoint() {
  // @@protoc_insertion_point(field_release:containerd.events.TaskCheckpointed.checkpoint)
  return checkpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskCheckpointed::set_allocated_checkpoint(std::string* checkpoint) {
  if (checkpoint != nullptr) {
    
  } else {
    
  }
  checkpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.TaskCheckpointed.checkpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events
}  // namespace containerd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_5fevents_2eproto
