// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namespace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_namespace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_namespace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_namespace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_namespace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_namespace_2eproto;
namespace containerd {
namespace services {
namespace namespaces {
namespace v1 {
class CreateNamespaceRequest;
struct CreateNamespaceRequestDefaultTypeInternal;
extern CreateNamespaceRequestDefaultTypeInternal _CreateNamespaceRequest_default_instance_;
class CreateNamespaceResponse;
struct CreateNamespaceResponseDefaultTypeInternal;
extern CreateNamespaceResponseDefaultTypeInternal _CreateNamespaceResponse_default_instance_;
class DeleteNamespaceRequest;
struct DeleteNamespaceRequestDefaultTypeInternal;
extern DeleteNamespaceRequestDefaultTypeInternal _DeleteNamespaceRequest_default_instance_;
class GetNamespaceRequest;
struct GetNamespaceRequestDefaultTypeInternal;
extern GetNamespaceRequestDefaultTypeInternal _GetNamespaceRequest_default_instance_;
class GetNamespaceResponse;
struct GetNamespaceResponseDefaultTypeInternal;
extern GetNamespaceResponseDefaultTypeInternal _GetNamespaceResponse_default_instance_;
class ListNamespacesRequest;
struct ListNamespacesRequestDefaultTypeInternal;
extern ListNamespacesRequestDefaultTypeInternal _ListNamespacesRequest_default_instance_;
class ListNamespacesResponse;
struct ListNamespacesResponseDefaultTypeInternal;
extern ListNamespacesResponseDefaultTypeInternal _ListNamespacesResponse_default_instance_;
class Namespace;
struct NamespaceDefaultTypeInternal;
extern NamespaceDefaultTypeInternal _Namespace_default_instance_;
class Namespace_LabelsEntry_DoNotUse;
struct Namespace_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Namespace_LabelsEntry_DoNotUseDefaultTypeInternal _Namespace_LabelsEntry_DoNotUse_default_instance_;
class UpdateNamespaceRequest;
struct UpdateNamespaceRequestDefaultTypeInternal;
extern UpdateNamespaceRequestDefaultTypeInternal _UpdateNamespaceRequest_default_instance_;
class UpdateNamespaceResponse;
struct UpdateNamespaceResponseDefaultTypeInternal;
extern UpdateNamespaceResponseDefaultTypeInternal _UpdateNamespaceResponse_default_instance_;
}  // namespace v1
}  // namespace namespaces
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::services::namespaces::v1::CreateNamespaceRequest* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::CreateNamespaceRequest>(Arena*);
template<> ::containerd::services::namespaces::v1::CreateNamespaceResponse* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::CreateNamespaceResponse>(Arena*);
template<> ::containerd::services::namespaces::v1::DeleteNamespaceRequest* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::DeleteNamespaceRequest>(Arena*);
template<> ::containerd::services::namespaces::v1::GetNamespaceRequest* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::GetNamespaceRequest>(Arena*);
template<> ::containerd::services::namespaces::v1::GetNamespaceResponse* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::GetNamespaceResponse>(Arena*);
template<> ::containerd::services::namespaces::v1::ListNamespacesRequest* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::ListNamespacesRequest>(Arena*);
template<> ::containerd::services::namespaces::v1::ListNamespacesResponse* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::ListNamespacesResponse>(Arena*);
template<> ::containerd::services::namespaces::v1::Namespace* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace>(Arena*);
template<> ::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::namespaces::v1::UpdateNamespaceRequest* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::UpdateNamespaceRequest>(Arena*);
template<> ::containerd::services::namespaces::v1::UpdateNamespaceResponse* Arena::CreateMaybeMessage<::containerd::services::namespaces::v1::UpdateNamespaceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace services {
namespace namespaces {
namespace v1 {

// ===================================================================

class Namespace_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Namespace_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Namespace_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Namespace_LabelsEntry_DoNotUse();
  explicit constexpr Namespace_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Namespace_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Namespace_LabelsEntry_DoNotUse& other);
  static const Namespace_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Namespace_LabelsEntry_DoNotUse*>(&_Namespace_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.namespaces.v1.Namespace.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.namespaces.v1.Namespace.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Namespace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.Namespace) */ {
 public:
  inline Namespace() : Namespace(nullptr) {}
  ~Namespace() override;
  explicit constexpr Namespace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Namespace(const Namespace& from);
  Namespace(Namespace&& from) noexcept
    : Namespace() {
    *this = ::std::move(from);
  }

  inline Namespace& operator=(const Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Namespace& operator=(Namespace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Namespace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Namespace* internal_default_instance() {
    return reinterpret_cast<const Namespace*>(
               &_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Namespace& a, Namespace& b) {
    a.Swap(&b);
  }
  inline void Swap(Namespace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Namespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Namespace* New() const final {
    return new Namespace();
  }

  Namespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Namespace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Namespace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Namespace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Namespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.Namespace";
  }
  protected:
  explicit Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.Namespace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Namespace_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class GetNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.GetNamespaceRequest) */ {
 public:
  inline GetNamespaceRequest() : GetNamespaceRequest(nullptr) {}
  ~GetNamespaceRequest() override;
  explicit constexpr GetNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNamespaceRequest(const GetNamespaceRequest& from);
  GetNamespaceRequest(GetNamespaceRequest&& from) noexcept
    : GetNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline GetNamespaceRequest& operator=(const GetNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNamespaceRequest& operator=(GetNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const GetNamespaceRequest*>(
               &_GetNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetNamespaceRequest& a, GetNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNamespaceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNamespaceRequest* New() const final {
    return new GetNamespaceRequest();
  }

  GetNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNamespaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.GetNamespaceRequest";
  }
  protected:
  explicit GetNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.GetNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class GetNamespaceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.GetNamespaceResponse) */ {
 public:
  inline GetNamespaceResponse() : GetNamespaceResponse(nullptr) {}
  ~GetNamespaceResponse() override;
  explicit constexpr GetNamespaceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNamespaceResponse(const GetNamespaceResponse& from);
  GetNamespaceResponse(GetNamespaceResponse&& from) noexcept
    : GetNamespaceResponse() {
    *this = ::std::move(from);
  }

  inline GetNamespaceResponse& operator=(const GetNamespaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNamespaceResponse& operator=(GetNamespaceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNamespaceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNamespaceResponse* internal_default_instance() {
    return reinterpret_cast<const GetNamespaceResponse*>(
               &_GetNamespaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetNamespaceResponse& a, GetNamespaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNamespaceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNamespaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNamespaceResponse* New() const final {
    return new GetNamespaceResponse();
  }

  GetNamespaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNamespaceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNamespaceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNamespaceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNamespaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.GetNamespaceResponse";
  }
  protected:
  explicit GetNamespaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
  };
  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::containerd::services::namespaces::v1::Namespace& namespace_() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::namespaces::v1::Namespace* release_namespace_();
  ::containerd::services::namespaces::v1::Namespace* mutable_namespace_();
  void set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_);
  private:
  const ::containerd::services::namespaces::v1::Namespace& _internal_namespace_() const;
  ::containerd::services::namespaces::v1::Namespace* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::containerd::services::namespaces::v1::Namespace* namespace_);
  ::containerd::services::namespaces::v1::Namespace* unsafe_arena_release_namespace_();

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.GetNamespaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::namespaces::v1::Namespace* namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class ListNamespacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.ListNamespacesRequest) */ {
 public:
  inline ListNamespacesRequest() : ListNamespacesRequest(nullptr) {}
  ~ListNamespacesRequest() override;
  explicit constexpr ListNamespacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNamespacesRequest(const ListNamespacesRequest& from);
  ListNamespacesRequest(ListNamespacesRequest&& from) noexcept
    : ListNamespacesRequest() {
    *this = ::std::move(from);
  }

  inline ListNamespacesRequest& operator=(const ListNamespacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNamespacesRequest& operator=(ListNamespacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNamespacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNamespacesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNamespacesRequest*>(
               &_ListNamespacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListNamespacesRequest& a, ListNamespacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNamespacesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNamespacesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNamespacesRequest* New() const final {
    return new ListNamespacesRequest();
  }

  ListNamespacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNamespacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNamespacesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNamespacesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNamespacesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.ListNamespacesRequest";
  }
  protected:
  explicit ListNamespacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // string filter = 1;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_MUST_USE_RESULT std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.ListNamespacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class ListNamespacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.ListNamespacesResponse) */ {
 public:
  inline ListNamespacesResponse() : ListNamespacesResponse(nullptr) {}
  ~ListNamespacesResponse() override;
  explicit constexpr ListNamespacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNamespacesResponse(const ListNamespacesResponse& from);
  ListNamespacesResponse(ListNamespacesResponse&& from) noexcept
    : ListNamespacesResponse() {
    *this = ::std::move(from);
  }

  inline ListNamespacesResponse& operator=(const ListNamespacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNamespacesResponse& operator=(ListNamespacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNamespacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNamespacesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNamespacesResponse*>(
               &_ListNamespacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListNamespacesResponse& a, ListNamespacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNamespacesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNamespacesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNamespacesResponse* New() const final {
    return new ListNamespacesResponse();
  }

  ListNamespacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNamespacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNamespacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNamespacesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNamespacesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.ListNamespacesResponse";
  }
  protected:
  explicit ListNamespacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespacesFieldNumber = 1,
  };
  // repeated .containerd.services.namespaces.v1.Namespace namespaces = 1 [(.gogoproto.nullable) = false];
  int namespaces_size() const;
  private:
  int _internal_namespaces_size() const;
  public:
  void clear_namespaces();
  ::containerd::services::namespaces::v1::Namespace* mutable_namespaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::namespaces::v1::Namespace >*
      mutable_namespaces();
  private:
  const ::containerd::services::namespaces::v1::Namespace& _internal_namespaces(int index) const;
  ::containerd::services::namespaces::v1::Namespace* _internal_add_namespaces();
  public:
  const ::containerd::services::namespaces::v1::Namespace& namespaces(int index) const;
  ::containerd::services::namespaces::v1::Namespace* add_namespaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::namespaces::v1::Namespace >&
      namespaces() const;

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.ListNamespacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::namespaces::v1::Namespace > namespaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class CreateNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.CreateNamespaceRequest) */ {
 public:
  inline CreateNamespaceRequest() : CreateNamespaceRequest(nullptr) {}
  ~CreateNamespaceRequest() override;
  explicit constexpr CreateNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNamespaceRequest(const CreateNamespaceRequest& from);
  CreateNamespaceRequest(CreateNamespaceRequest&& from) noexcept
    : CreateNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline CreateNamespaceRequest& operator=(const CreateNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNamespaceRequest& operator=(CreateNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNamespaceRequest*>(
               &_CreateNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateNamespaceRequest& a, CreateNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNamespaceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNamespaceRequest* New() const final {
    return new CreateNamespaceRequest();
  }

  CreateNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNamespaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.CreateNamespaceRequest";
  }
  protected:
  explicit CreateNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
  };
  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::containerd::services::namespaces::v1::Namespace& namespace_() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::namespaces::v1::Namespace* release_namespace_();
  ::containerd::services::namespaces::v1::Namespace* mutable_namespace_();
  void set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_);
  private:
  const ::containerd::services::namespaces::v1::Namespace& _internal_namespace_() const;
  ::containerd::services::namespaces::v1::Namespace* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::containerd::services::namespaces::v1::Namespace* namespace_);
  ::containerd::services::namespaces::v1::Namespace* unsafe_arena_release_namespace_();

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.CreateNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::namespaces::v1::Namespace* namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class CreateNamespaceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.CreateNamespaceResponse) */ {
 public:
  inline CreateNamespaceResponse() : CreateNamespaceResponse(nullptr) {}
  ~CreateNamespaceResponse() override;
  explicit constexpr CreateNamespaceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNamespaceResponse(const CreateNamespaceResponse& from);
  CreateNamespaceResponse(CreateNamespaceResponse&& from) noexcept
    : CreateNamespaceResponse() {
    *this = ::std::move(from);
  }

  inline CreateNamespaceResponse& operator=(const CreateNamespaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNamespaceResponse& operator=(CreateNamespaceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNamespaceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNamespaceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNamespaceResponse*>(
               &_CreateNamespaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateNamespaceResponse& a, CreateNamespaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNamespaceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNamespaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNamespaceResponse* New() const final {
    return new CreateNamespaceResponse();
  }

  CreateNamespaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNamespaceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNamespaceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNamespaceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNamespaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.CreateNamespaceResponse";
  }
  protected:
  explicit CreateNamespaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
  };
  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::containerd::services::namespaces::v1::Namespace& namespace_() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::namespaces::v1::Namespace* release_namespace_();
  ::containerd::services::namespaces::v1::Namespace* mutable_namespace_();
  void set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_);
  private:
  const ::containerd::services::namespaces::v1::Namespace& _internal_namespace_() const;
  ::containerd::services::namespaces::v1::Namespace* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::containerd::services::namespaces::v1::Namespace* namespace_);
  ::containerd::services::namespaces::v1::Namespace* unsafe_arena_release_namespace_();

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.CreateNamespaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::namespaces::v1::Namespace* namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class UpdateNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.UpdateNamespaceRequest) */ {
 public:
  inline UpdateNamespaceRequest() : UpdateNamespaceRequest(nullptr) {}
  ~UpdateNamespaceRequest() override;
  explicit constexpr UpdateNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNamespaceRequest(const UpdateNamespaceRequest& from);
  UpdateNamespaceRequest(UpdateNamespaceRequest&& from) noexcept
    : UpdateNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNamespaceRequest& operator=(const UpdateNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNamespaceRequest& operator=(UpdateNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNamespaceRequest*>(
               &_UpdateNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateNamespaceRequest& a, UpdateNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNamespaceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateNamespaceRequest* New() const final {
    return new UpdateNamespaceRequest();
  }

  UpdateNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNamespaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.UpdateNamespaceRequest";
  }
  protected:
  explicit UpdateNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::containerd::services::namespaces::v1::Namespace& namespace_() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::namespaces::v1::Namespace* release_namespace_();
  ::containerd::services::namespaces::v1::Namespace* mutable_namespace_();
  void set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_);
  private:
  const ::containerd::services::namespaces::v1::Namespace& _internal_namespace_() const;
  ::containerd::services::namespaces::v1::Namespace* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::containerd::services::namespaces::v1::Namespace* namespace_);
  ::containerd::services::namespaces::v1::Namespace* unsafe_arena_release_namespace_();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.UpdateNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::namespaces::v1::Namespace* namespace__;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class UpdateNamespaceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.UpdateNamespaceResponse) */ {
 public:
  inline UpdateNamespaceResponse() : UpdateNamespaceResponse(nullptr) {}
  ~UpdateNamespaceResponse() override;
  explicit constexpr UpdateNamespaceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNamespaceResponse(const UpdateNamespaceResponse& from);
  UpdateNamespaceResponse(UpdateNamespaceResponse&& from) noexcept
    : UpdateNamespaceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateNamespaceResponse& operator=(const UpdateNamespaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNamespaceResponse& operator=(UpdateNamespaceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNamespaceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNamespaceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateNamespaceResponse*>(
               &_UpdateNamespaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateNamespaceResponse& a, UpdateNamespaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNamespaceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNamespaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateNamespaceResponse* New() const final {
    return new UpdateNamespaceResponse();
  }

  UpdateNamespaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNamespaceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNamespaceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNamespaceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNamespaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.UpdateNamespaceResponse";
  }
  protected:
  explicit UpdateNamespaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
  };
  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::containerd::services::namespaces::v1::Namespace& namespace_() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::namespaces::v1::Namespace* release_namespace_();
  ::containerd::services::namespaces::v1::Namespace* mutable_namespace_();
  void set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_);
  private:
  const ::containerd::services::namespaces::v1::Namespace& _internal_namespace_() const;
  ::containerd::services::namespaces::v1::Namespace* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::containerd::services::namespaces::v1::Namespace* namespace_);
  ::containerd::services::namespaces::v1::Namespace* unsafe_arena_release_namespace_();

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.UpdateNamespaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::namespaces::v1::Namespace* namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// -------------------------------------------------------------------

class DeleteNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.namespaces.v1.DeleteNamespaceRequest) */ {
 public:
  inline DeleteNamespaceRequest() : DeleteNamespaceRequest(nullptr) {}
  ~DeleteNamespaceRequest() override;
  explicit constexpr DeleteNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNamespaceRequest(const DeleteNamespaceRequest& from);
  DeleteNamespaceRequest(DeleteNamespaceRequest&& from) noexcept
    : DeleteNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNamespaceRequest& operator=(const DeleteNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNamespaceRequest& operator=(DeleteNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNamespaceRequest*>(
               &_DeleteNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteNamespaceRequest& a, DeleteNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNamespaceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteNamespaceRequest* New() const final {
    return new DeleteNamespaceRequest();
  }

  DeleteNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNamespaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.namespaces.v1.DeleteNamespaceRequest";
  }
  protected:
  explicit DeleteNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.namespaces.v1.DeleteNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namespace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Namespace

// string name = 1;
inline void Namespace::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Namespace::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.Namespace.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Namespace::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.namespaces.v1.Namespace.name)
}
inline std::string* Namespace::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.Namespace.name)
  return _s;
}
inline const std::string& Namespace::_internal_name() const {
  return name_.Get();
}
inline void Namespace::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Namespace::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Namespace::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.Namespace.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Namespace::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.Namespace.name)
}

// map<string, string> labels = 2;
inline int Namespace::_internal_labels_size() const {
  return labels_.size();
}
inline int Namespace::labels_size() const {
  return _internal_labels_size();
}
inline void Namespace::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Namespace::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Namespace::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.namespaces.v1.Namespace.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Namespace::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Namespace::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.namespaces.v1.Namespace.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// GetNamespaceRequest

// string name = 1;
inline void GetNamespaceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNamespaceRequest::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.GetNamespaceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNamespaceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.namespaces.v1.GetNamespaceRequest.name)
}
inline std::string* GetNamespaceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.GetNamespaceRequest.name)
  return _s;
}
inline const std::string& GetNamespaceRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNamespaceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNamespaceRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNamespaceRequest::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.GetNamespaceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNamespaceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.GetNamespaceRequest.name)
}

// -------------------------------------------------------------------

// GetNamespaceResponse

// .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
inline bool GetNamespaceResponse::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool GetNamespaceResponse::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void GetNamespaceResponse::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
inline const ::containerd::services::namespaces::v1::Namespace& GetNamespaceResponse::_internal_namespace_() const {
  const ::containerd::services::namespaces::v1::Namespace* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::namespaces::v1::Namespace&>(
      ::containerd::services::namespaces::v1::_Namespace_default_instance_);
}
inline const ::containerd::services::namespaces::v1::Namespace& GetNamespaceResponse::namespace_() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.GetNamespaceResponse.namespace)
  return _internal_namespace_();
}
inline void GetNamespaceResponse::unsafe_arena_set_allocated_namespace_(
    ::containerd::services::namespaces::v1::Namespace* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.namespaces.v1.GetNamespaceResponse.namespace)
}
inline ::containerd::services::namespaces::v1::Namespace* GetNamespaceResponse::release_namespace_() {
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* GetNamespaceResponse::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.GetNamespaceResponse.namespace)
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* GetNamespaceResponse::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::containerd::services::namespaces::v1::Namespace* GetNamespaceResponse::mutable_namespace_() {
  ::containerd::services::namespaces::v1::Namespace* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.GetNamespaceResponse.namespace)
  return _msg;
}
inline void GetNamespaceResponse::set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete namespace__;
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::namespaces::v1::Namespace>::GetOwningArena(namespace_);
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.GetNamespaceResponse.namespace)
}

// -------------------------------------------------------------------

// ListNamespacesRequest

// string filter = 1;
inline void ListNamespacesRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListNamespacesRequest::filter() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.ListNamespacesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNamespacesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.namespaces.v1.ListNamespacesRequest.filter)
}
inline std::string* ListNamespacesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.ListNamespacesRequest.filter)
  return _s;
}
inline const std::string& ListNamespacesRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListNamespacesRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNamespacesRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNamespacesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.ListNamespacesRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNamespacesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.ListNamespacesRequest.filter)
}

// -------------------------------------------------------------------

// ListNamespacesResponse

// repeated .containerd.services.namespaces.v1.Namespace namespaces = 1 [(.gogoproto.nullable) = false];
inline int ListNamespacesResponse::_internal_namespaces_size() const {
  return namespaces_.size();
}
inline int ListNamespacesResponse::namespaces_size() const {
  return _internal_namespaces_size();
}
inline void ListNamespacesResponse::clear_namespaces() {
  namespaces_.Clear();
}
inline ::containerd::services::namespaces::v1::Namespace* ListNamespacesResponse::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.ListNamespacesResponse.namespaces)
  return namespaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::namespaces::v1::Namespace >*
ListNamespacesResponse::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.namespaces.v1.ListNamespacesResponse.namespaces)
  return &namespaces_;
}
inline const ::containerd::services::namespaces::v1::Namespace& ListNamespacesResponse::_internal_namespaces(int index) const {
  return namespaces_.Get(index);
}
inline const ::containerd::services::namespaces::v1::Namespace& ListNamespacesResponse::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.ListNamespacesResponse.namespaces)
  return _internal_namespaces(index);
}
inline ::containerd::services::namespaces::v1::Namespace* ListNamespacesResponse::_internal_add_namespaces() {
  return namespaces_.Add();
}
inline ::containerd::services::namespaces::v1::Namespace* ListNamespacesResponse::add_namespaces() {
  ::containerd::services::namespaces::v1::Namespace* _add = _internal_add_namespaces();
  // @@protoc_insertion_point(field_add:containerd.services.namespaces.v1.ListNamespacesResponse.namespaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::namespaces::v1::Namespace >&
ListNamespacesResponse::namespaces() const {
  // @@protoc_insertion_point(field_list:containerd.services.namespaces.v1.ListNamespacesResponse.namespaces)
  return namespaces_;
}

// -------------------------------------------------------------------

// CreateNamespaceRequest

// .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
inline bool CreateNamespaceRequest::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool CreateNamespaceRequest::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void CreateNamespaceRequest::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
inline const ::containerd::services::namespaces::v1::Namespace& CreateNamespaceRequest::_internal_namespace_() const {
  const ::containerd::services::namespaces::v1::Namespace* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::namespaces::v1::Namespace&>(
      ::containerd::services::namespaces::v1::_Namespace_default_instance_);
}
inline const ::containerd::services::namespaces::v1::Namespace& CreateNamespaceRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.CreateNamespaceRequest.namespace)
  return _internal_namespace_();
}
inline void CreateNamespaceRequest::unsafe_arena_set_allocated_namespace_(
    ::containerd::services::namespaces::v1::Namespace* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.namespaces.v1.CreateNamespaceRequest.namespace)
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceRequest::release_namespace_() {
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceRequest::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.CreateNamespaceRequest.namespace)
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceRequest::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceRequest::mutable_namespace_() {
  ::containerd::services::namespaces::v1::Namespace* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.CreateNamespaceRequest.namespace)
  return _msg;
}
inline void CreateNamespaceRequest::set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete namespace__;
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::namespaces::v1::Namespace>::GetOwningArena(namespace_);
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.CreateNamespaceRequest.namespace)
}

// -------------------------------------------------------------------

// CreateNamespaceResponse

// .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
inline bool CreateNamespaceResponse::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool CreateNamespaceResponse::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void CreateNamespaceResponse::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
inline const ::containerd::services::namespaces::v1::Namespace& CreateNamespaceResponse::_internal_namespace_() const {
  const ::containerd::services::namespaces::v1::Namespace* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::namespaces::v1::Namespace&>(
      ::containerd::services::namespaces::v1::_Namespace_default_instance_);
}
inline const ::containerd::services::namespaces::v1::Namespace& CreateNamespaceResponse::namespace_() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.CreateNamespaceResponse.namespace)
  return _internal_namespace_();
}
inline void CreateNamespaceResponse::unsafe_arena_set_allocated_namespace_(
    ::containerd::services::namespaces::v1::Namespace* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.namespaces.v1.CreateNamespaceResponse.namespace)
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceResponse::release_namespace_() {
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceResponse::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.CreateNamespaceResponse.namespace)
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceResponse::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::containerd::services::namespaces::v1::Namespace* CreateNamespaceResponse::mutable_namespace_() {
  ::containerd::services::namespaces::v1::Namespace* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.CreateNamespaceResponse.namespace)
  return _msg;
}
inline void CreateNamespaceResponse::set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete namespace__;
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::namespaces::v1::Namespace>::GetOwningArena(namespace_);
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.CreateNamespaceResponse.namespace)
}

// -------------------------------------------------------------------

// UpdateNamespaceRequest

// .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
inline bool UpdateNamespaceRequest::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool UpdateNamespaceRequest::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void UpdateNamespaceRequest::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
inline const ::containerd::services::namespaces::v1::Namespace& UpdateNamespaceRequest::_internal_namespace_() const {
  const ::containerd::services::namespaces::v1::Namespace* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::namespaces::v1::Namespace&>(
      ::containerd::services::namespaces::v1::_Namespace_default_instance_);
}
inline const ::containerd::services::namespaces::v1::Namespace& UpdateNamespaceRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.UpdateNamespaceRequest.namespace)
  return _internal_namespace_();
}
inline void UpdateNamespaceRequest::unsafe_arena_set_allocated_namespace_(
    ::containerd::services::namespaces::v1::Namespace* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.namespaces.v1.UpdateNamespaceRequest.namespace)
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceRequest::release_namespace_() {
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceRequest::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.UpdateNamespaceRequest.namespace)
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceRequest::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceRequest::mutable_namespace_() {
  ::containerd::services::namespaces::v1::Namespace* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.UpdateNamespaceRequest.namespace)
  return _msg;
}
inline void UpdateNamespaceRequest::set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete namespace__;
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::namespaces::v1::Namespace>::GetOwningArena(namespace_);
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.UpdateNamespaceRequest.namespace)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNamespaceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNamespaceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNamespaceRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNamespaceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.UpdateNamespaceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNamespaceRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.namespaces.v1.UpdateNamespaceRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNamespaceRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNamespaceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.UpdateNamespaceRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNamespaceRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNamespaceRequest::mutable_update_mask() {
  PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.UpdateNamespaceRequest.update_mask)
  return _msg;
}
inline void UpdateNamespaceRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.UpdateNamespaceRequest.update_mask)
}

// -------------------------------------------------------------------

// UpdateNamespaceResponse

// .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
inline bool UpdateNamespaceResponse::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool UpdateNamespaceResponse::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void UpdateNamespaceResponse::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
inline const ::containerd::services::namespaces::v1::Namespace& UpdateNamespaceResponse::_internal_namespace_() const {
  const ::containerd::services::namespaces::v1::Namespace* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::namespaces::v1::Namespace&>(
      ::containerd::services::namespaces::v1::_Namespace_default_instance_);
}
inline const ::containerd::services::namespaces::v1::Namespace& UpdateNamespaceResponse::namespace_() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.UpdateNamespaceResponse.namespace)
  return _internal_namespace_();
}
inline void UpdateNamespaceResponse::unsafe_arena_set_allocated_namespace_(
    ::containerd::services::namespaces::v1::Namespace* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.namespaces.v1.UpdateNamespaceResponse.namespace)
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceResponse::release_namespace_() {
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceResponse::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.UpdateNamespaceResponse.namespace)
  
  ::containerd::services::namespaces::v1::Namespace* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceResponse::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::namespaces::v1::Namespace>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::containerd::services::namespaces::v1::Namespace* UpdateNamespaceResponse::mutable_namespace_() {
  ::containerd::services::namespaces::v1::Namespace* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.UpdateNamespaceResponse.namespace)
  return _msg;
}
inline void UpdateNamespaceResponse::set_allocated_namespace_(::containerd::services::namespaces::v1::Namespace* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete namespace__;
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::namespaces::v1::Namespace>::GetOwningArena(namespace_);
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.UpdateNamespaceResponse.namespace)
}

// -------------------------------------------------------------------

// DeleteNamespaceRequest

// string name = 1;
inline void DeleteNamespaceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNamespaceRequest::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.namespaces.v1.DeleteNamespaceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNamespaceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.namespaces.v1.DeleteNamespaceRequest.name)
}
inline std::string* DeleteNamespaceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.namespaces.v1.DeleteNamespaceRequest.name)
  return _s;
}
inline const std::string& DeleteNamespaceRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNamespaceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNamespaceRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNamespaceRequest::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.namespaces.v1.DeleteNamespaceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNamespaceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.namespaces.v1.DeleteNamespaceRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace namespaces
}  // namespace services
}  // namespace containerd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_namespace_2eproto
