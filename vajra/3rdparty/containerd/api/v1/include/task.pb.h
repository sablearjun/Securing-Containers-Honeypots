// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto;
namespace containerd {
namespace v1 {
namespace types {
class Process;
struct ProcessDefaultTypeInternal;
extern ProcessDefaultTypeInternal _Process_default_instance_;
class ProcessInfo;
struct ProcessInfoDefaultTypeInternal;
extern ProcessInfoDefaultTypeInternal _ProcessInfo_default_instance_;
}  // namespace types
}  // namespace v1
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::v1::types::Process* Arena::CreateMaybeMessage<::containerd::v1::types::Process>(Arena*);
template<> ::containerd::v1::types::ProcessInfo* Arena::CreateMaybeMessage<::containerd::v1::types::ProcessInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace v1 {
namespace types {

enum Status : int {
  UNKNOWN = 0,
  CREATED = 1,
  RUNNING = 2,
  STOPPED = 3,
  PAUSED = 4,
  PAUSING = 5,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = UNKNOWN;
constexpr Status Status_MAX = PAUSING;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Process final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.v1.types.Process) */ {
 public:
  inline Process() : Process(nullptr) {}
  ~Process() override;
  explicit constexpr Process(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Process(const Process& from);
  Process(Process&& from) noexcept
    : Process() {
    *this = ::std::move(from);
  }

  inline Process& operator=(const Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline Process& operator=(Process&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Process& default_instance() {
    return *internal_default_instance();
  }
  static inline const Process* internal_default_instance() {
    return reinterpret_cast<const Process*>(
               &_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Process& a, Process& b) {
    a.Swap(&b);
  }
  inline void Swap(Process* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Process* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Process* New() const final {
    return new Process();
  }

  Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Process>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Process& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Process& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.v1.types.Process";
  }
  protected:
  explicit Process(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kStdinFieldNumber = 5,
    kStdoutFieldNumber = 6,
    kStderrFieldNumber = 7,
    kExitedAtFieldNumber = 10,
    kPidFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTerminalFieldNumber = 8,
    kExitStatusFieldNumber = 9,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string stdin = 5;
  void clear_stdin();
  const std::string& stdin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stdin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stdin();
  PROTOBUF_MUST_USE_RESULT std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // string stdout = 6;
  void clear_stdout();
  const std::string& stdout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stdout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stdout();
  PROTOBUF_MUST_USE_RESULT std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // string stderr = 7;
  void clear_stderr();
  const std::string& stderr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stderr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stderr();
  PROTOBUF_MUST_USE_RESULT std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // .google.protobuf.Timestamp exited_at = 10 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_exited_at() const;
  private:
  bool _internal_has_exited_at() const;
  public:
  void clear_exited_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_exited_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exited_at();
  void set_allocated_exited_at(PROTOBUF_NAMESPACE_ID::Timestamp* exited_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exited_at();
  public:
  void unsafe_arena_set_allocated_exited_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* exited_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exited_at();

  // uint32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .containerd.v1.types.Status status = 4;
  void clear_status();
  ::containerd::v1::types::Status status() const;
  void set_status(::containerd::v1::types::Status value);
  private:
  ::containerd::v1::types::Status _internal_status() const;
  void _internal_set_status(::containerd::v1::types::Status value);
  public:

  // bool terminal = 8;
  void clear_terminal();
  bool terminal() const;
  void set_terminal(bool value);
  private:
  bool _internal_terminal() const;
  void _internal_set_terminal(bool value);
  public:

  // uint32 exit_status = 9;
  void clear_exit_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status() const;
  void set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_status() const;
  void _internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.v1.types.Process)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  PROTOBUF_NAMESPACE_ID::Timestamp* exited_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  int status_;
  bool terminal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ProcessInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.v1.types.ProcessInfo) */ {
 public:
  inline ProcessInfo() : ProcessInfo(nullptr) {}
  ~ProcessInfo() override;
  explicit constexpr ProcessInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessInfo(const ProcessInfo& from);
  ProcessInfo(ProcessInfo&& from) noexcept
    : ProcessInfo() {
    *this = ::std::move(from);
  }

  inline ProcessInfo& operator=(const ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessInfo& operator=(ProcessInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessInfo*>(
               &_ProcessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessInfo& a, ProcessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessInfo* New() const final {
    return new ProcessInfo();
  }

  ProcessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.v1.types.ProcessInfo";
  }
  protected:
  explicit ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // .google.protobuf.Any info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const PROTOBUF_NAMESPACE_ID::Any& info() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_info();
  PROTOBUF_NAMESPACE_ID::Any* mutable_info();
  void set_allocated_info(PROTOBUF_NAMESPACE_ID::Any* info);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_info() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      PROTOBUF_NAMESPACE_ID::Any* info);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_info();

  // uint32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.v1.types.ProcessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Process

// string container_id = 1;
inline void Process::clear_container_id() {
  container_id_.ClearToEmpty();
}
inline const std::string& Process::container_id() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Process::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.container_id)
}
inline std::string* Process::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.Process.container_id)
  return _s;
}
inline const std::string& Process::_internal_container_id() const {
  return container_id_.Get();
}
inline void Process::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Process::_internal_mutable_container_id() {
  
  return container_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Process::release_container_id() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.Process.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Process::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.Process.container_id)
}

// string id = 2;
inline void Process::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Process::id() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Process::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.id)
}
inline std::string* Process::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.Process.id)
  return _s;
}
inline const std::string& Process::_internal_id() const {
  return id_.Get();
}
inline void Process::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Process::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Process::release_id() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.Process.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Process::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.Process.id)
}

// uint32 pid = 3;
inline void Process::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Process::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Process::pid() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.pid)
  return _internal_pid();
}
inline void Process::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void Process::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.pid)
}

// .containerd.v1.types.Status status = 4;
inline void Process::clear_status() {
  status_ = 0;
}
inline ::containerd::v1::types::Status Process::_internal_status() const {
  return static_cast< ::containerd::v1::types::Status >(status_);
}
inline ::containerd::v1::types::Status Process::status() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.status)
  return _internal_status();
}
inline void Process::_internal_set_status(::containerd::v1::types::Status value) {
  
  status_ = value;
}
inline void Process::set_status(::containerd::v1::types::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.status)
}

// string stdin = 5;
inline void Process::clear_stdin() {
  stdin_.ClearToEmpty();
}
inline const std::string& Process::stdin() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.stdin)
  return _internal_stdin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Process::set_stdin(ArgT0&& arg0, ArgT... args) {
 
 stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.stdin)
}
inline std::string* Process::mutable_stdin() {
  std::string* _s = _internal_mutable_stdin();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.Process.stdin)
  return _s;
}
inline const std::string& Process::_internal_stdin() const {
  return stdin_.Get();
}
inline void Process::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Process::_internal_mutable_stdin() {
  
  return stdin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Process::release_stdin() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.Process.stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Process::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.Process.stdin)
}

// string stdout = 6;
inline void Process::clear_stdout() {
  stdout_.ClearToEmpty();
}
inline const std::string& Process::stdout() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.stdout)
  return _internal_stdout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Process::set_stdout(ArgT0&& arg0, ArgT... args) {
 
 stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.stdout)
}
inline std::string* Process::mutable_stdout() {
  std::string* _s = _internal_mutable_stdout();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.Process.stdout)
  return _s;
}
inline const std::string& Process::_internal_stdout() const {
  return stdout_.Get();
}
inline void Process::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Process::_internal_mutable_stdout() {
  
  return stdout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Process::release_stdout() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.Process.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Process::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.Process.stdout)
}

// string stderr = 7;
inline void Process::clear_stderr() {
  stderr_.ClearToEmpty();
}
inline const std::string& Process::stderr() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.stderr)
  return _internal_stderr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Process::set_stderr(ArgT0&& arg0, ArgT... args) {
 
 stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.stderr)
}
inline std::string* Process::mutable_stderr() {
  std::string* _s = _internal_mutable_stderr();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.Process.stderr)
  return _s;
}
inline const std::string& Process::_internal_stderr() const {
  return stderr_.Get();
}
inline void Process::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Process::_internal_mutable_stderr() {
  
  return stderr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Process::release_stderr() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.Process.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Process::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.Process.stderr)
}

// bool terminal = 8;
inline void Process::clear_terminal() {
  terminal_ = false;
}
inline bool Process::_internal_terminal() const {
  return terminal_;
}
inline bool Process::terminal() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.terminal)
  return _internal_terminal();
}
inline void Process::_internal_set_terminal(bool value) {
  
  terminal_ = value;
}
inline void Process::set_terminal(bool value) {
  _internal_set_terminal(value);
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.terminal)
}

// uint32 exit_status = 9;
inline void Process::clear_exit_status() {
  exit_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Process::_internal_exit_status() const {
  return exit_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Process::exit_status() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.exit_status)
  return _internal_exit_status();
}
inline void Process::_internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_status_ = value;
}
inline void Process::set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_status(value);
  // @@protoc_insertion_point(field_set:containerd.v1.types.Process.exit_status)
}

// .google.protobuf.Timestamp exited_at = 10 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Process::_internal_has_exited_at() const {
  return this != internal_default_instance() && exited_at_ != nullptr;
}
inline bool Process::has_exited_at() const {
  return _internal_has_exited_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Process::_internal_exited_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = exited_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Process::exited_at() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.Process.exited_at)
  return _internal_exited_at();
}
inline void Process::unsafe_arena_set_allocated_exited_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* exited_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at_);
  }
  exited_at_ = exited_at;
  if (exited_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.v1.types.Process.exited_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Process::release_exited_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exited_at_;
  exited_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Process::unsafe_arena_release_exited_at() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.Process.exited_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exited_at_;
  exited_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Process::_internal_mutable_exited_at() {
  
  if (exited_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    exited_at_ = p;
  }
  return exited_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Process::mutable_exited_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exited_at();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.Process.exited_at)
  return _msg;
}
inline void Process::set_allocated_exited_at(PROTOBUF_NAMESPACE_ID::Timestamp* exited_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at_);
  }
  if (exited_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exited_at));
    if (message_arena != submessage_arena) {
      exited_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exited_at, submessage_arena);
    }
    
  } else {
    
  }
  exited_at_ = exited_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.Process.exited_at)
}

// -------------------------------------------------------------------

// ProcessInfo

// uint32 pid = 1;
inline void ProcessInfo::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessInfo::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessInfo::pid() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.ProcessInfo.pid)
  return _internal_pid();
}
inline void ProcessInfo::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void ProcessInfo::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containerd.v1.types.ProcessInfo.pid)
}

// .google.protobuf.Any info = 2;
inline bool ProcessInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ProcessInfo::has_info() const {
  return _internal_has_info();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ProcessInfo::_internal_info() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ProcessInfo::info() const {
  // @@protoc_insertion_point(field_get:containerd.v1.types.ProcessInfo.info)
  return _internal_info();
}
inline void ProcessInfo::unsafe_arena_set_allocated_info(
    PROTOBUF_NAMESPACE_ID::Any* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.v1.types.ProcessInfo.info)
}
inline PROTOBUF_NAMESPACE_ID::Any* ProcessInfo::release_info() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ProcessInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:containerd.v1.types.ProcessInfo.info)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = info_;
  info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ProcessInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ProcessInfo::mutable_info() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:containerd.v1.types.ProcessInfo.info)
  return _msg;
}
inline void ProcessInfo::set_allocated_info(PROTOBUF_NAMESPACE_ID::Any* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:containerd.v1.types.ProcessInfo.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace v1
}  // namespace containerd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::containerd::v1::types::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::containerd::v1::types::Status>() {
  return ::containerd::v1::types::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_2eproto
