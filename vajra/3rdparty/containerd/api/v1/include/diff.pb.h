// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diff.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_diff_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_diff_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include <google/protobuf/any.pb.h>
#include "mount.pb.h"
#include "descriptor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_diff_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_diff_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diff_2eproto;
namespace containerd {
namespace services {
namespace diff {
namespace v1 {
class ApplyRequest;
struct ApplyRequestDefaultTypeInternal;
extern ApplyRequestDefaultTypeInternal _ApplyRequest_default_instance_;
class ApplyRequest_PayloadsEntry_DoNotUse;
struct ApplyRequest_PayloadsEntry_DoNotUseDefaultTypeInternal;
extern ApplyRequest_PayloadsEntry_DoNotUseDefaultTypeInternal _ApplyRequest_PayloadsEntry_DoNotUse_default_instance_;
class ApplyResponse;
struct ApplyResponseDefaultTypeInternal;
extern ApplyResponseDefaultTypeInternal _ApplyResponse_default_instance_;
class DiffRequest;
struct DiffRequestDefaultTypeInternal;
extern DiffRequestDefaultTypeInternal _DiffRequest_default_instance_;
class DiffRequest_LabelsEntry_DoNotUse;
struct DiffRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern DiffRequest_LabelsEntry_DoNotUseDefaultTypeInternal _DiffRequest_LabelsEntry_DoNotUse_default_instance_;
class DiffResponse;
struct DiffResponseDefaultTypeInternal;
extern DiffResponseDefaultTypeInternal _DiffResponse_default_instance_;
}  // namespace v1
}  // namespace diff
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::services::diff::v1::ApplyRequest* Arena::CreateMaybeMessage<::containerd::services::diff::v1::ApplyRequest>(Arena*);
template<> ::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::diff::v1::ApplyResponse* Arena::CreateMaybeMessage<::containerd::services::diff::v1::ApplyResponse>(Arena*);
template<> ::containerd::services::diff::v1::DiffRequest* Arena::CreateMaybeMessage<::containerd::services::diff::v1::DiffRequest>(Arena*);
template<> ::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::diff::v1::DiffResponse* Arena::CreateMaybeMessage<::containerd::services::diff::v1::DiffResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace services {
namespace diff {
namespace v1 {

// ===================================================================

class ApplyRequest_PayloadsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApplyRequest_PayloadsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApplyRequest_PayloadsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ApplyRequest_PayloadsEntry_DoNotUse();
  explicit constexpr ApplyRequest_PayloadsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ApplyRequest_PayloadsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ApplyRequest_PayloadsEntry_DoNotUse& other);
  static const ApplyRequest_PayloadsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ApplyRequest_PayloadsEntry_DoNotUse*>(&_ApplyRequest_PayloadsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.diff.v1.ApplyRequest.PayloadsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ApplyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.diff.v1.ApplyRequest) */ {
 public:
  inline ApplyRequest() : ApplyRequest(nullptr) {}
  ~ApplyRequest() override;
  explicit constexpr ApplyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyRequest(const ApplyRequest& from);
  ApplyRequest(ApplyRequest&& from) noexcept
    : ApplyRequest() {
    *this = ::std::move(from);
  }

  inline ApplyRequest& operator=(const ApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyRequest& operator=(ApplyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyRequest* internal_default_instance() {
    return reinterpret_cast<const ApplyRequest*>(
               &_ApplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplyRequest& a, ApplyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyRequest* New() const final {
    return new ApplyRequest();
  }

  ApplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.diff.v1.ApplyRequest";
  }
  protected:
  explicit ApplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMountsFieldNumber = 2,
    kPayloadsFieldNumber = 3,
    kDiffFieldNumber = 1,
  };
  // repeated .containerd.types.Mount mounts = 2;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::containerd::types::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_mounts();
  private:
  const ::containerd::types::Mount& _internal_mounts(int index) const;
  ::containerd::types::Mount* _internal_add_mounts();
  public:
  const ::containerd::types::Mount& mounts(int index) const;
  ::containerd::types::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      mounts() const;

  // map<string, .google.protobuf.Any> payloads = 3;
  int payloads_size() const;
  private:
  int _internal_payloads_size() const;
  public:
  void clear_payloads();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      _internal_payloads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_payloads();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      payloads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      mutable_payloads();

  // .containerd.types.Descriptor diff = 1;
  bool has_diff() const;
  private:
  bool _internal_has_diff() const;
  public:
  void clear_diff();
  const ::containerd::types::Descriptor& diff() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::types::Descriptor* release_diff();
  ::containerd::types::Descriptor* mutable_diff();
  void set_allocated_diff(::containerd::types::Descriptor* diff);
  private:
  const ::containerd::types::Descriptor& _internal_diff() const;
  ::containerd::types::Descriptor* _internal_mutable_diff();
  public:
  void unsafe_arena_set_allocated_diff(
      ::containerd::types::Descriptor* diff);
  ::containerd::types::Descriptor* unsafe_arena_release_diff();

  // @@protoc_insertion_point(class_scope:containerd.services.diff.v1.ApplyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > mounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ApplyRequest_PayloadsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> payloads_;
  ::containerd::types::Descriptor* diff_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diff_2eproto;
};
// -------------------------------------------------------------------

class ApplyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.diff.v1.ApplyResponse) */ {
 public:
  inline ApplyResponse() : ApplyResponse(nullptr) {}
  ~ApplyResponse() override;
  explicit constexpr ApplyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyResponse(const ApplyResponse& from);
  ApplyResponse(ApplyResponse&& from) noexcept
    : ApplyResponse() {
    *this = ::std::move(from);
  }

  inline ApplyResponse& operator=(const ApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyResponse& operator=(ApplyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyResponse* internal_default_instance() {
    return reinterpret_cast<const ApplyResponse*>(
               &_ApplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApplyResponse& a, ApplyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyResponse* New() const final {
    return new ApplyResponse();
  }

  ApplyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.diff.v1.ApplyResponse";
  }
  protected:
  explicit ApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppliedFieldNumber = 1,
  };
  // .containerd.types.Descriptor applied = 1;
  bool has_applied() const;
  private:
  bool _internal_has_applied() const;
  public:
  void clear_applied();
  const ::containerd::types::Descriptor& applied() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::types::Descriptor* release_applied();
  ::containerd::types::Descriptor* mutable_applied();
  void set_allocated_applied(::containerd::types::Descriptor* applied);
  private:
  const ::containerd::types::Descriptor& _internal_applied() const;
  ::containerd::types::Descriptor* _internal_mutable_applied();
  public:
  void unsafe_arena_set_allocated_applied(
      ::containerd::types::Descriptor* applied);
  ::containerd::types::Descriptor* unsafe_arena_release_applied();

  // @@protoc_insertion_point(class_scope:containerd.services.diff.v1.ApplyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::types::Descriptor* applied_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diff_2eproto;
};
// -------------------------------------------------------------------

class DiffRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DiffRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DiffRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DiffRequest_LabelsEntry_DoNotUse();
  explicit constexpr DiffRequest_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DiffRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DiffRequest_LabelsEntry_DoNotUse& other);
  static const DiffRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DiffRequest_LabelsEntry_DoNotUse*>(&_DiffRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.diff.v1.DiffRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.diff.v1.DiffRequest.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class DiffRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.diff.v1.DiffRequest) */ {
 public:
  inline DiffRequest() : DiffRequest(nullptr) {}
  ~DiffRequest() override;
  explicit constexpr DiffRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiffRequest(const DiffRequest& from);
  DiffRequest(DiffRequest&& from) noexcept
    : DiffRequest() {
    *this = ::std::move(from);
  }

  inline DiffRequest& operator=(const DiffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffRequest& operator=(DiffRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiffRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiffRequest* internal_default_instance() {
    return reinterpret_cast<const DiffRequest*>(
               &_DiffRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DiffRequest& a, DiffRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiffRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffRequest* New() const final {
    return new DiffRequest();
  }

  DiffRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiffRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiffRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.diff.v1.DiffRequest";
  }
  protected:
  explicit DiffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
    kLabelsFieldNumber = 5,
    kMediaTypeFieldNumber = 3,
    kRefFieldNumber = 4,
  };
  // repeated .containerd.types.Mount left = 1;
  int left_size() const;
  private:
  int _internal_left_size() const;
  public:
  void clear_left();
  ::containerd::types::Mount* mutable_left(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_left();
  private:
  const ::containerd::types::Mount& _internal_left(int index) const;
  ::containerd::types::Mount* _internal_add_left();
  public:
  const ::containerd::types::Mount& left(int index) const;
  ::containerd::types::Mount* add_left();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      left() const;

  // repeated .containerd.types.Mount right = 2;
  int right_size() const;
  private:
  int _internal_right_size() const;
  public:
  void clear_right();
  ::containerd::types::Mount* mutable_right(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
      mutable_right();
  private:
  const ::containerd::types::Mount& _internal_right(int index) const;
  ::containerd::types::Mount* _internal_add_right();
  public:
  const ::containerd::types::Mount& right(int index) const;
  ::containerd::types::Mount* add_right();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
      right() const;

  // map<string, string> labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string media_type = 3;
  void clear_media_type();
  const std::string& media_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_media_type();
  void set_allocated_media_type(std::string* media_type);
  private:
  const std::string& _internal_media_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_type(const std::string& value);
  std::string* _internal_mutable_media_type();
  public:

  // string ref = 4;
  void clear_ref();
  const std::string& ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ref();
  PROTOBUF_MUST_USE_RESULT std::string* release_ref();
  void set_allocated_ref(std::string* ref);
  private:
  const std::string& _internal_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ref(const std::string& value);
  std::string* _internal_mutable_ref();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.diff.v1.DiffRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > left_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount > right_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DiffRequest_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diff_2eproto;
};
// -------------------------------------------------------------------

class DiffResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.diff.v1.DiffResponse) */ {
 public:
  inline DiffResponse() : DiffResponse(nullptr) {}
  ~DiffResponse() override;
  explicit constexpr DiffResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiffResponse(const DiffResponse& from);
  DiffResponse(DiffResponse&& from) noexcept
    : DiffResponse() {
    *this = ::std::move(from);
  }

  inline DiffResponse& operator=(const DiffResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffResponse& operator=(DiffResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiffResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiffResponse* internal_default_instance() {
    return reinterpret_cast<const DiffResponse*>(
               &_DiffResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DiffResponse& a, DiffResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiffResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffResponse* New() const final {
    return new DiffResponse();
  }

  DiffResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiffResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiffResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.diff.v1.DiffResponse";
  }
  protected:
  explicit DiffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffFieldNumber = 3,
  };
  // .containerd.types.Descriptor diff = 3;
  bool has_diff() const;
  private:
  bool _internal_has_diff() const;
  public:
  void clear_diff();
  const ::containerd::types::Descriptor& diff() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::types::Descriptor* release_diff();
  ::containerd::types::Descriptor* mutable_diff();
  void set_allocated_diff(::containerd::types::Descriptor* diff);
  private:
  const ::containerd::types::Descriptor& _internal_diff() const;
  ::containerd::types::Descriptor* _internal_mutable_diff();
  public:
  void unsafe_arena_set_allocated_diff(
      ::containerd::types::Descriptor* diff);
  ::containerd::types::Descriptor* unsafe_arena_release_diff();

  // @@protoc_insertion_point(class_scope:containerd.services.diff.v1.DiffResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::types::Descriptor* diff_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diff_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ApplyRequest

// .containerd.types.Descriptor diff = 1;
inline bool ApplyRequest::_internal_has_diff() const {
  return this != internal_default_instance() && diff_ != nullptr;
}
inline bool ApplyRequest::has_diff() const {
  return _internal_has_diff();
}
inline const ::containerd::types::Descriptor& ApplyRequest::_internal_diff() const {
  const ::containerd::types::Descriptor* p = diff_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::types::Descriptor&>(
      ::containerd::types::_Descriptor_default_instance_);
}
inline const ::containerd::types::Descriptor& ApplyRequest::diff() const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.ApplyRequest.diff)
  return _internal_diff();
}
inline void ApplyRequest::unsafe_arena_set_allocated_diff(
    ::containerd::types::Descriptor* diff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_);
  }
  diff_ = diff;
  if (diff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.diff.v1.ApplyRequest.diff)
}
inline ::containerd::types::Descriptor* ApplyRequest::release_diff() {
  
  ::containerd::types::Descriptor* temp = diff_;
  diff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::types::Descriptor* ApplyRequest::unsafe_arena_release_diff() {
  // @@protoc_insertion_point(field_release:containerd.services.diff.v1.ApplyRequest.diff)
  
  ::containerd::types::Descriptor* temp = diff_;
  diff_ = nullptr;
  return temp;
}
inline ::containerd::types::Descriptor* ApplyRequest::_internal_mutable_diff() {
  
  if (diff_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::types::Descriptor>(GetArenaForAllocation());
    diff_ = p;
  }
  return diff_;
}
inline ::containerd::types::Descriptor* ApplyRequest::mutable_diff() {
  ::containerd::types::Descriptor* _msg = _internal_mutable_diff();
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.ApplyRequest.diff)
  return _msg;
}
inline void ApplyRequest::set_allocated_diff(::containerd::types::Descriptor* diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_);
  }
  if (diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff));
    if (message_arena != submessage_arena) {
      diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff, submessage_arena);
    }
    
  } else {
    
  }
  diff_ = diff;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.diff.v1.ApplyRequest.diff)
}

// repeated .containerd.types.Mount mounts = 2;
inline int ApplyRequest::_internal_mounts_size() const {
  return mounts_.size();
}
inline int ApplyRequest::mounts_size() const {
  return _internal_mounts_size();
}
inline ::containerd::types::Mount* ApplyRequest::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.ApplyRequest.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
ApplyRequest::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.diff.v1.ApplyRequest.mounts)
  return &mounts_;
}
inline const ::containerd::types::Mount& ApplyRequest::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::containerd::types::Mount& ApplyRequest::mounts(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.ApplyRequest.mounts)
  return _internal_mounts(index);
}
inline ::containerd::types::Mount* ApplyRequest::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::containerd::types::Mount* ApplyRequest::add_mounts() {
  ::containerd::types::Mount* _add = _internal_add_mounts();
  // @@protoc_insertion_point(field_add:containerd.services.diff.v1.ApplyRequest.mounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
ApplyRequest::mounts() const {
  // @@protoc_insertion_point(field_list:containerd.services.diff.v1.ApplyRequest.mounts)
  return mounts_;
}

// map<string, .google.protobuf.Any> payloads = 3;
inline int ApplyRequest::_internal_payloads_size() const {
  return payloads_.size();
}
inline int ApplyRequest::payloads_size() const {
  return _internal_payloads_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
ApplyRequest::_internal_payloads() const {
  return payloads_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
ApplyRequest::payloads() const {
  // @@protoc_insertion_point(field_map:containerd.services.diff.v1.ApplyRequest.payloads)
  return _internal_payloads();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
ApplyRequest::_internal_mutable_payloads() {
  return payloads_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
ApplyRequest::mutable_payloads() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.diff.v1.ApplyRequest.payloads)
  return _internal_mutable_payloads();
}

// -------------------------------------------------------------------

// ApplyResponse

// .containerd.types.Descriptor applied = 1;
inline bool ApplyResponse::_internal_has_applied() const {
  return this != internal_default_instance() && applied_ != nullptr;
}
inline bool ApplyResponse::has_applied() const {
  return _internal_has_applied();
}
inline const ::containerd::types::Descriptor& ApplyResponse::_internal_applied() const {
  const ::containerd::types::Descriptor* p = applied_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::types::Descriptor&>(
      ::containerd::types::_Descriptor_default_instance_);
}
inline const ::containerd::types::Descriptor& ApplyResponse::applied() const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.ApplyResponse.applied)
  return _internal_applied();
}
inline void ApplyResponse::unsafe_arena_set_allocated_applied(
    ::containerd::types::Descriptor* applied) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_);
  }
  applied_ = applied;
  if (applied) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.diff.v1.ApplyResponse.applied)
}
inline ::containerd::types::Descriptor* ApplyResponse::release_applied() {
  
  ::containerd::types::Descriptor* temp = applied_;
  applied_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::types::Descriptor* ApplyResponse::unsafe_arena_release_applied() {
  // @@protoc_insertion_point(field_release:containerd.services.diff.v1.ApplyResponse.applied)
  
  ::containerd::types::Descriptor* temp = applied_;
  applied_ = nullptr;
  return temp;
}
inline ::containerd::types::Descriptor* ApplyResponse::_internal_mutable_applied() {
  
  if (applied_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::types::Descriptor>(GetArenaForAllocation());
    applied_ = p;
  }
  return applied_;
}
inline ::containerd::types::Descriptor* ApplyResponse::mutable_applied() {
  ::containerd::types::Descriptor* _msg = _internal_mutable_applied();
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.ApplyResponse.applied)
  return _msg;
}
inline void ApplyResponse::set_allocated_applied(::containerd::types::Descriptor* applied) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_);
  }
  if (applied) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied));
    if (message_arena != submessage_arena) {
      applied = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applied, submessage_arena);
    }
    
  } else {
    
  }
  applied_ = applied;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.diff.v1.ApplyResponse.applied)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DiffRequest

// repeated .containerd.types.Mount left = 1;
inline int DiffRequest::_internal_left_size() const {
  return left_.size();
}
inline int DiffRequest::left_size() const {
  return _internal_left_size();
}
inline ::containerd::types::Mount* DiffRequest::mutable_left(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.DiffRequest.left)
  return left_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
DiffRequest::mutable_left() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.diff.v1.DiffRequest.left)
  return &left_;
}
inline const ::containerd::types::Mount& DiffRequest::_internal_left(int index) const {
  return left_.Get(index);
}
inline const ::containerd::types::Mount& DiffRequest::left(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.DiffRequest.left)
  return _internal_left(index);
}
inline ::containerd::types::Mount* DiffRequest::_internal_add_left() {
  return left_.Add();
}
inline ::containerd::types::Mount* DiffRequest::add_left() {
  ::containerd::types::Mount* _add = _internal_add_left();
  // @@protoc_insertion_point(field_add:containerd.services.diff.v1.DiffRequest.left)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
DiffRequest::left() const {
  // @@protoc_insertion_point(field_list:containerd.services.diff.v1.DiffRequest.left)
  return left_;
}

// repeated .containerd.types.Mount right = 2;
inline int DiffRequest::_internal_right_size() const {
  return right_.size();
}
inline int DiffRequest::right_size() const {
  return _internal_right_size();
}
inline ::containerd::types::Mount* DiffRequest::mutable_right(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.DiffRequest.right)
  return right_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >*
DiffRequest::mutable_right() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.diff.v1.DiffRequest.right)
  return &right_;
}
inline const ::containerd::types::Mount& DiffRequest::_internal_right(int index) const {
  return right_.Get(index);
}
inline const ::containerd::types::Mount& DiffRequest::right(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.DiffRequest.right)
  return _internal_right(index);
}
inline ::containerd::types::Mount* DiffRequest::_internal_add_right() {
  return right_.Add();
}
inline ::containerd::types::Mount* DiffRequest::add_right() {
  ::containerd::types::Mount* _add = _internal_add_right();
  // @@protoc_insertion_point(field_add:containerd.services.diff.v1.DiffRequest.right)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::types::Mount >&
DiffRequest::right() const {
  // @@protoc_insertion_point(field_list:containerd.services.diff.v1.DiffRequest.right)
  return right_;
}

// string media_type = 3;
inline void DiffRequest::clear_media_type() {
  media_type_.ClearToEmpty();
}
inline const std::string& DiffRequest::media_type() const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.DiffRequest.media_type)
  return _internal_media_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiffRequest::set_media_type(ArgT0&& arg0, ArgT... args) {
 
 media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.diff.v1.DiffRequest.media_type)
}
inline std::string* DiffRequest::mutable_media_type() {
  std::string* _s = _internal_mutable_media_type();
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.DiffRequest.media_type)
  return _s;
}
inline const std::string& DiffRequest::_internal_media_type() const {
  return media_type_.Get();
}
inline void DiffRequest::_internal_set_media_type(const std::string& value) {
  
  media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiffRequest::_internal_mutable_media_type() {
  
  return media_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiffRequest::release_media_type() {
  // @@protoc_insertion_point(field_release:containerd.services.diff.v1.DiffRequest.media_type)
  return media_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiffRequest::set_allocated_media_type(std::string* media_type) {
  if (media_type != nullptr) {
    
  } else {
    
  }
  media_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.diff.v1.DiffRequest.media_type)
}

// string ref = 4;
inline void DiffRequest::clear_ref() {
  ref_.ClearToEmpty();
}
inline const std::string& DiffRequest::ref() const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.DiffRequest.ref)
  return _internal_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiffRequest::set_ref(ArgT0&& arg0, ArgT... args) {
 
 ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.diff.v1.DiffRequest.ref)
}
inline std::string* DiffRequest::mutable_ref() {
  std::string* _s = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.DiffRequest.ref)
  return _s;
}
inline const std::string& DiffRequest::_internal_ref() const {
  return ref_.Get();
}
inline void DiffRequest::_internal_set_ref(const std::string& value) {
  
  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiffRequest::_internal_mutable_ref() {
  
  return ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiffRequest::release_ref() {
  // @@protoc_insertion_point(field_release:containerd.services.diff.v1.DiffRequest.ref)
  return ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiffRequest::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.diff.v1.DiffRequest.ref)
}

// map<string, string> labels = 5;
inline int DiffRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int DiffRequest::labels_size() const {
  return _internal_labels_size();
}
inline void DiffRequest::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DiffRequest::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DiffRequest::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.diff.v1.DiffRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DiffRequest::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DiffRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.diff.v1.DiffRequest.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// DiffResponse

// .containerd.types.Descriptor diff = 3;
inline bool DiffResponse::_internal_has_diff() const {
  return this != internal_default_instance() && diff_ != nullptr;
}
inline bool DiffResponse::has_diff() const {
  return _internal_has_diff();
}
inline const ::containerd::types::Descriptor& DiffResponse::_internal_diff() const {
  const ::containerd::types::Descriptor* p = diff_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::types::Descriptor&>(
      ::containerd::types::_Descriptor_default_instance_);
}
inline const ::containerd::types::Descriptor& DiffResponse::diff() const {
  // @@protoc_insertion_point(field_get:containerd.services.diff.v1.DiffResponse.diff)
  return _internal_diff();
}
inline void DiffResponse::unsafe_arena_set_allocated_diff(
    ::containerd::types::Descriptor* diff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_);
  }
  diff_ = diff;
  if (diff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.diff.v1.DiffResponse.diff)
}
inline ::containerd::types::Descriptor* DiffResponse::release_diff() {
  
  ::containerd::types::Descriptor* temp = diff_;
  diff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::types::Descriptor* DiffResponse::unsafe_arena_release_diff() {
  // @@protoc_insertion_point(field_release:containerd.services.diff.v1.DiffResponse.diff)
  
  ::containerd::types::Descriptor* temp = diff_;
  diff_ = nullptr;
  return temp;
}
inline ::containerd::types::Descriptor* DiffResponse::_internal_mutable_diff() {
  
  if (diff_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::types::Descriptor>(GetArenaForAllocation());
    diff_ = p;
  }
  return diff_;
}
inline ::containerd::types::Descriptor* DiffResponse::mutable_diff() {
  ::containerd::types::Descriptor* _msg = _internal_mutable_diff();
  // @@protoc_insertion_point(field_mutable:containerd.services.diff.v1.DiffResponse.diff)
  return _msg;
}
inline void DiffResponse::set_allocated_diff(::containerd::types::Descriptor* diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_);
  }
  if (diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff));
    if (message_arena != submessage_arena) {
      diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff, submessage_arena);
    }
    
  } else {
    
  }
  diff_ = diff;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.diff.v1.DiffResponse.diff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace diff
}  // namespace services
}  // namespace containerd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_diff_2eproto
