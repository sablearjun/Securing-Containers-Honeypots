// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tasks.proto

#include "tasks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace containerd {
namespace services {
namespace tasks {
namespace v1 {
constexpr CreateTaskRequest::CreateTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rootfs_()
  , container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stdin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stdout_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stderr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checkpoint_(nullptr)
  , options_(nullptr)
  , terminal_(false){}
struct CreateTaskRequestDefaultTypeInternal {
  constexpr CreateTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTaskRequestDefaultTypeInternal() {}
  union {
    CreateTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTaskRequestDefaultTypeInternal _CreateTaskRequest_default_instance_;
constexpr CreateTaskResponse::CreateTaskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0u){}
struct CreateTaskResponseDefaultTypeInternal {
  constexpr CreateTaskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTaskResponseDefaultTypeInternal() {}
  union {
    CreateTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTaskResponseDefaultTypeInternal _CreateTaskResponse_default_instance_;
constexpr StartRequest::StartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StartRequestDefaultTypeInternal {
  constexpr StartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartRequestDefaultTypeInternal() {}
  union {
    StartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartRequestDefaultTypeInternal _StartRequest_default_instance_;
constexpr StartResponse::StartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pid_(0u){}
struct StartResponseDefaultTypeInternal {
  constexpr StartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartResponseDefaultTypeInternal() {}
  union {
    StartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartResponseDefaultTypeInternal _StartResponse_default_instance_;
constexpr DeleteTaskRequest::DeleteTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTaskRequestDefaultTypeInternal {
  constexpr DeleteTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTaskRequestDefaultTypeInternal() {}
  union {
    DeleteTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTaskRequestDefaultTypeInternal _DeleteTaskRequest_default_instance_;
constexpr DeleteResponse::DeleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exited_at_(nullptr)
  , pid_(0u)
  , exit_status_(0u){}
struct DeleteResponseDefaultTypeInternal {
  constexpr DeleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteResponseDefaultTypeInternal() {}
  union {
    DeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
constexpr DeleteProcessRequest::DeleteProcessRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteProcessRequestDefaultTypeInternal {
  constexpr DeleteProcessRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProcessRequestDefaultTypeInternal() {}
  union {
    DeleteProcessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProcessRequestDefaultTypeInternal _DeleteProcessRequest_default_instance_;
constexpr GetRequest::GetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRequestDefaultTypeInternal {
  constexpr GetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRequestDefaultTypeInternal _GetRequest_default_instance_;
constexpr GetResponse::GetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : process_(nullptr){}
struct GetResponseDefaultTypeInternal {
  constexpr GetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResponseDefaultTypeInternal _GetResponse_default_instance_;
constexpr ListTasksRequest::ListTasksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListTasksRequestDefaultTypeInternal {
  constexpr ListTasksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTasksRequestDefaultTypeInternal() {}
  union {
    ListTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTasksRequestDefaultTypeInternal _ListTasksRequest_default_instance_;
constexpr ListTasksResponse::ListTasksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_(){}
struct ListTasksResponseDefaultTypeInternal {
  constexpr ListTasksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTasksResponseDefaultTypeInternal() {}
  union {
    ListTasksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTasksResponseDefaultTypeInternal _ListTasksResponse_default_instance_;
constexpr KillRequest::KillRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signal_(0u)
  , all_(false){}
struct KillRequestDefaultTypeInternal {
  constexpr KillRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KillRequestDefaultTypeInternal() {}
  union {
    KillRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KillRequestDefaultTypeInternal _KillRequest_default_instance_;
constexpr ExecProcessRequest::ExecProcessRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stdin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stdout_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stderr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_(nullptr)
  , terminal_(false){}
struct ExecProcessRequestDefaultTypeInternal {
  constexpr ExecProcessRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecProcessRequestDefaultTypeInternal() {}
  union {
    ExecProcessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecProcessRequestDefaultTypeInternal _ExecProcessRequest_default_instance_;
constexpr ExecProcessResponse::ExecProcessResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExecProcessResponseDefaultTypeInternal {
  constexpr ExecProcessResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecProcessResponseDefaultTypeInternal() {}
  union {
    ExecProcessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecProcessResponseDefaultTypeInternal _ExecProcessResponse_default_instance_;
constexpr ResizePtyRequest::ResizePtyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u){}
struct ResizePtyRequestDefaultTypeInternal {
  constexpr ResizePtyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResizePtyRequestDefaultTypeInternal() {}
  union {
    ResizePtyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResizePtyRequestDefaultTypeInternal _ResizePtyRequest_default_instance_;
constexpr CloseIORequest::CloseIORequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stdin_(false){}
struct CloseIORequestDefaultTypeInternal {
  constexpr CloseIORequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseIORequestDefaultTypeInternal() {}
  union {
    CloseIORequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseIORequestDefaultTypeInternal _CloseIORequest_default_instance_;
constexpr PauseTaskRequest::PauseTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PauseTaskRequestDefaultTypeInternal {
  constexpr PauseTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseTaskRequestDefaultTypeInternal() {}
  union {
    PauseTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseTaskRequestDefaultTypeInternal _PauseTaskRequest_default_instance_;
constexpr ResumeTaskRequest::ResumeTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResumeTaskRequestDefaultTypeInternal {
  constexpr ResumeTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResumeTaskRequestDefaultTypeInternal() {}
  union {
    ResumeTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResumeTaskRequestDefaultTypeInternal _ResumeTaskRequest_default_instance_;
constexpr ListPidsRequest::ListPidsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListPidsRequestDefaultTypeInternal {
  constexpr ListPidsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPidsRequestDefaultTypeInternal() {}
  union {
    ListPidsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPidsRequestDefaultTypeInternal _ListPidsRequest_default_instance_;
constexpr ListPidsResponse::ListPidsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : processes_(){}
struct ListPidsResponseDefaultTypeInternal {
  constexpr ListPidsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPidsResponseDefaultTypeInternal() {}
  union {
    ListPidsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPidsResponseDefaultTypeInternal _ListPidsResponse_default_instance_;
constexpr CheckpointTaskRequest::CheckpointTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_checkpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , options_(nullptr){}
struct CheckpointTaskRequestDefaultTypeInternal {
  constexpr CheckpointTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckpointTaskRequestDefaultTypeInternal() {}
  union {
    CheckpointTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckpointTaskRequestDefaultTypeInternal _CheckpointTaskRequest_default_instance_;
constexpr CheckpointTaskResponse::CheckpointTaskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptors_(){}
struct CheckpointTaskResponseDefaultTypeInternal {
  constexpr CheckpointTaskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckpointTaskResponseDefaultTypeInternal() {}
  union {
    CheckpointTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckpointTaskResponseDefaultTypeInternal _CheckpointTaskResponse_default_instance_;
constexpr UpdateTaskRequest::UpdateTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resources_(nullptr){}
struct UpdateTaskRequestDefaultTypeInternal {
  constexpr UpdateTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateTaskRequestDefaultTypeInternal() {}
  union {
    UpdateTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateTaskRequestDefaultTypeInternal _UpdateTaskRequest_default_instance_;
constexpr MetricsRequest::MetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_(){}
struct MetricsRequestDefaultTypeInternal {
  constexpr MetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsRequestDefaultTypeInternal() {}
  union {
    MetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsRequestDefaultTypeInternal _MetricsRequest_default_instance_;
constexpr MetricsResponse::MetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_(){}
struct MetricsResponseDefaultTypeInternal {
  constexpr MetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsResponseDefaultTypeInternal() {}
  union {
    MetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsResponseDefaultTypeInternal _MetricsResponse_default_instance_;
constexpr WaitRequest::WaitRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WaitRequestDefaultTypeInternal {
  constexpr WaitRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitRequestDefaultTypeInternal() {}
  union {
    WaitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitRequestDefaultTypeInternal _WaitRequest_default_instance_;
constexpr WaitResponse::WaitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exited_at_(nullptr)
  , exit_status_(0u){}
struct WaitResponseDefaultTypeInternal {
  constexpr WaitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitResponseDefaultTypeInternal() {}
  union {
    WaitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitResponseDefaultTypeInternal _WaitResponse_default_instance_;
}  // namespace v1
}  // namespace tasks
}  // namespace services
}  // namespace containerd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tasks_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tasks_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tasks_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tasks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, rootfs_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, stdin_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, stdout_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, stderr_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, terminal_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, checkpoint_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskResponse, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CreateTaskResponse, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::StartRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::StartRequest, exec_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::StartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::StartResponse, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteTaskRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteResponse, id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteResponse, pid_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteResponse, exit_status_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteResponse, exited_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteProcessRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::DeleteProcessRequest, exec_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::GetRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::GetRequest, exec_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::GetResponse, process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListTasksRequest, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListTasksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListTasksResponse, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::KillRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::KillRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::KillRequest, exec_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::KillRequest, signal_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::KillRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, stdin_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, stdout_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, stderr_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, terminal_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, spec_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessRequest, exec_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ExecProcessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResizePtyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResizePtyRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResizePtyRequest, exec_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResizePtyRequest, width_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResizePtyRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CloseIORequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CloseIORequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CloseIORequest, exec_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CloseIORequest, stdin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::PauseTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::PauseTaskRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResumeTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ResumeTaskRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListPidsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListPidsRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListPidsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::ListPidsResponse, processes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CheckpointTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CheckpointTaskRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CheckpointTaskRequest, parent_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CheckpointTaskRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CheckpointTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::CheckpointTaskResponse, descriptors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::UpdateTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::UpdateTaskRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::UpdateTaskRequest, resources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::MetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::MetricsRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::MetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::MetricsResponse, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::WaitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::WaitRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::WaitRequest, exec_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::WaitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::WaitResponse, exit_status_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::tasks::v1::WaitResponse, exited_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::containerd::services::tasks::v1::CreateTaskRequest)},
  { 13, -1, sizeof(::containerd::services::tasks::v1::CreateTaskResponse)},
  { 20, -1, sizeof(::containerd::services::tasks::v1::StartRequest)},
  { 27, -1, sizeof(::containerd::services::tasks::v1::StartResponse)},
  { 33, -1, sizeof(::containerd::services::tasks::v1::DeleteTaskRequest)},
  { 39, -1, sizeof(::containerd::services::tasks::v1::DeleteResponse)},
  { 48, -1, sizeof(::containerd::services::tasks::v1::DeleteProcessRequest)},
  { 55, -1, sizeof(::containerd::services::tasks::v1::GetRequest)},
  { 62, -1, sizeof(::containerd::services::tasks::v1::GetResponse)},
  { 68, -1, sizeof(::containerd::services::tasks::v1::ListTasksRequest)},
  { 74, -1, sizeof(::containerd::services::tasks::v1::ListTasksResponse)},
  { 80, -1, sizeof(::containerd::services::tasks::v1::KillRequest)},
  { 89, -1, sizeof(::containerd::services::tasks::v1::ExecProcessRequest)},
  { 101, -1, sizeof(::containerd::services::tasks::v1::ExecProcessResponse)},
  { 106, -1, sizeof(::containerd::services::tasks::v1::ResizePtyRequest)},
  { 115, -1, sizeof(::containerd::services::tasks::v1::CloseIORequest)},
  { 123, -1, sizeof(::containerd::services::tasks::v1::PauseTaskRequest)},
  { 129, -1, sizeof(::containerd::services::tasks::v1::ResumeTaskRequest)},
  { 135, -1, sizeof(::containerd::services::tasks::v1::ListPidsRequest)},
  { 141, -1, sizeof(::containerd::services::tasks::v1::ListPidsResponse)},
  { 147, -1, sizeof(::containerd::services::tasks::v1::CheckpointTaskRequest)},
  { 155, -1, sizeof(::containerd::services::tasks::v1::CheckpointTaskResponse)},
  { 161, -1, sizeof(::containerd::services::tasks::v1::UpdateTaskRequest)},
  { 168, -1, sizeof(::containerd::services::tasks::v1::MetricsRequest)},
  { 174, -1, sizeof(::containerd::services::tasks::v1::MetricsResponse)},
  { 180, -1, sizeof(::containerd::services::tasks::v1::WaitRequest)},
  { 187, -1, sizeof(::containerd::services::tasks::v1::WaitResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_CreateTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_CreateTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_StartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_StartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_DeleteTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_DeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_DeleteProcessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ListTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ListTasksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_KillRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ExecProcessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ExecProcessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ResizePtyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_CloseIORequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_PauseTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ResumeTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ListPidsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_ListPidsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_CheckpointTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_CheckpointTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_UpdateTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_MetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_MetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_WaitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::tasks::v1::_WaitResponse_default_instance_),
};

const char descriptor_table_protodef_tasks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013tasks.proto\022\034containerd.services.tasks"
  ".v1\032\033google/protobuf/empty.proto\032\031google"
  "/protobuf/any.proto\032\ngogo.proto\032\013mount.p"
  "roto\032\rmetrics.proto\032\020descriptor.proto\032\nt"
  "ask.proto\032\037google/protobuf/timestamp.pro"
  "to\"\354\001\n\021CreateTaskRequest\022\024\n\014container_id"
  "\030\001 \001(\t\022\'\n\006rootfs\030\003 \003(\0132\027.containerd.type"
  "s.Mount\022\r\n\005stdin\030\004 \001(\t\022\016\n\006stdout\030\005 \001(\t\022\016"
  "\n\006stderr\030\006 \001(\t\022\020\n\010terminal\030\007 \001(\010\0220\n\nchec"
  "kpoint\030\010 \001(\0132\034.containerd.types.Descript"
  "or\022%\n\007options\030\t \001(\0132\024.google.protobuf.An"
  "y\"7\n\022CreateTaskResponse\022\024\n\014container_id\030"
  "\001 \001(\t\022\013\n\003pid\030\002 \001(\r\"5\n\014StartRequest\022\024\n\014co"
  "ntainer_id\030\001 \001(\t\022\017\n\007exec_id\030\002 \001(\t\"\034\n\rSta"
  "rtResponse\022\013\n\003pid\030\001 \001(\r\")\n\021DeleteTaskReq"
  "uest\022\024\n\014container_id\030\001 \001(\t\"w\n\016DeleteResp"
  "onse\022\n\n\002id\030\001 \001(\t\022\013\n\003pid\030\002 \001(\r\022\023\n\013exit_st"
  "atus\030\003 \001(\r\0227\n\texited_at\030\004 \001(\0132\032.google.p"
  "rotobuf.TimestampB\010\220\337\037\001\310\336\037\000\"=\n\024DeletePro"
  "cessRequest\022\024\n\014container_id\030\001 \001(\t\022\017\n\007exe"
  "c_id\030\002 \001(\t\"3\n\nGetRequest\022\024\n\014container_id"
  "\030\001 \001(\t\022\017\n\007exec_id\030\002 \001(\t\"<\n\013GetResponse\022-"
  "\n\007process\030\001 \001(\0132\034.containerd.v1.types.Pr"
  "ocess\"\"\n\020ListTasksRequest\022\016\n\006filter\030\001 \001("
  "\t\"@\n\021ListTasksResponse\022+\n\005tasks\030\001 \003(\0132\034."
  "containerd.v1.types.Process\"Q\n\013KillReque"
  "st\022\024\n\014container_id\030\001 \001(\t\022\017\n\007exec_id\030\002 \001("
  "\t\022\016\n\006signal\030\003 \001(\r\022\013\n\003all\030\004 \001(\010\"\240\001\n\022ExecP"
  "rocessRequest\022\024\n\014container_id\030\001 \001(\t\022\r\n\005s"
  "tdin\030\002 \001(\t\022\016\n\006stdout\030\003 \001(\t\022\016\n\006stderr\030\004 \001"
  "(\t\022\020\n\010terminal\030\005 \001(\010\022\"\n\004spec\030\006 \001(\0132\024.goo"
  "gle.protobuf.Any\022\017\n\007exec_id\030\007 \001(\t\"\025\n\023Exe"
  "cProcessResponse\"X\n\020ResizePtyRequest\022\024\n\014"
  "container_id\030\001 \001(\t\022\017\n\007exec_id\030\002 \001(\t\022\r\n\005w"
  "idth\030\003 \001(\r\022\016\n\006height\030\004 \001(\r\"F\n\016CloseIOReq"
  "uest\022\024\n\014container_id\030\001 \001(\t\022\017\n\007exec_id\030\002 "
  "\001(\t\022\r\n\005stdin\030\003 \001(\010\"(\n\020PauseTaskRequest\022\024"
  "\n\014container_id\030\001 \001(\t\")\n\021ResumeTaskReques"
  "t\022\024\n\014container_id\030\001 \001(\t\"\'\n\017ListPidsReque"
  "st\022\024\n\014container_id\030\001 \001(\t\"G\n\020ListPidsResp"
  "onse\0223\n\tprocesses\030\001 \003(\0132 .containerd.v1."
  "types.ProcessInfo\"\243\001\n\025CheckpointTaskRequ"
  "est\022\024\n\014container_id\030\001 \001(\t\022M\n\021parent_chec"
  "kpoint\030\002 \001(\tB2\332\336\037*github.com/opencontain"
  "ers/go-digest.Digest\310\336\037\000\022%\n\007options\030\003 \001("
  "\0132\024.google.protobuf.Any\"K\n\026CheckpointTas"
  "kResponse\0221\n\013descriptors\030\001 \003(\0132\034.contain"
  "erd.types.Descriptor\"R\n\021UpdateTaskReques"
  "t\022\024\n\014container_id\030\001 \001(\t\022\'\n\tresources\030\002 \001"
  "(\0132\024.google.protobuf.Any\"!\n\016MetricsReque"
  "st\022\017\n\007filters\030\001 \003(\t\"<\n\017MetricsResponse\022)"
  "\n\007metrics\030\001 \003(\0132\030.containerd.types.Metri"
  "c\"4\n\013WaitRequest\022\024\n\014container_id\030\001 \001(\t\022\017"
  "\n\007exec_id\030\002 \001(\t\"\\\n\014WaitResponse\022\023\n\013exit_"
  "status\030\001 \001(\r\0227\n\texited_at\030\002 \001(\0132\032.google"
  ".protobuf.TimestampB\010\220\337\037\001\310\336\037\0002\334\014\n\005Tasks\022"
  "k\n\006Create\022/.containerd.services.tasks.v1"
  ".CreateTaskRequest\0320.containerd.services"
  ".tasks.v1.CreateTaskResponse\022`\n\005Start\022*."
  "containerd.services.tasks.v1.StartReques"
  "t\032+.containerd.services.tasks.v1.StartRe"
  "sponse\022g\n\006Delete\022/.containerd.services.t"
  "asks.v1.DeleteTaskRequest\032,.containerd.s"
  "ervices.tasks.v1.DeleteResponse\022q\n\rDelet"
  "eProcess\0222.containerd.services.tasks.v1."
  "DeleteProcessRequest\032,.containerd.servic"
  "es.tasks.v1.DeleteResponse\022Z\n\003Get\022(.cont"
  "ainerd.services.tasks.v1.GetRequest\032).co"
  "ntainerd.services.tasks.v1.GetResponse\022g"
  "\n\004List\022..containerd.services.tasks.v1.Li"
  "stTasksRequest\032/.containerd.services.tas"
  "ks.v1.ListTasksResponse\022I\n\004Kill\022).contai"
  "nerd.services.tasks.v1.KillRequest\032\026.goo"
  "gle.protobuf.Empty\022P\n\004Exec\0220.containerd."
  "services.tasks.v1.ExecProcessRequest\032\026.g"
  "oogle.protobuf.Empty\022S\n\tResizePty\022..cont"
  "ainerd.services.tasks.v1.ResizePtyReques"
  "t\032\026.google.protobuf.Empty\022O\n\007CloseIO\022,.c"
  "ontainerd.services.tasks.v1.CloseIOReque"
  "st\032\026.google.protobuf.Empty\022O\n\005Pause\022..co"
  "ntainerd.services.tasks.v1.PauseTaskRequ"
  "est\032\026.google.protobuf.Empty\022Q\n\006Resume\022/."
  "containerd.services.tasks.v1.ResumeTaskR"
  "equest\032\026.google.protobuf.Empty\022i\n\010ListPi"
  "ds\022-.containerd.services.tasks.v1.ListPi"
  "dsRequest\032..containerd.services.tasks.v1"
  ".ListPidsResponse\022w\n\nCheckpoint\0223.contai"
  "nerd.services.tasks.v1.CheckpointTaskReq"
  "uest\0324.containerd.services.tasks.v1.Chec"
  "kpointTaskResponse\022Q\n\006Update\022/.container"
  "d.services.tasks.v1.UpdateTaskRequest\032\026."
  "google.protobuf.Empty\022f\n\007Metrics\022,.conta"
  "inerd.services.tasks.v1.MetricsRequest\032-"
  ".containerd.services.tasks.v1.MetricsRes"
  "ponse\022]\n\004Wait\022).containerd.services.task"
  "s.v1.WaitRequest\032*.containerd.services.t"
  "asks.v1.WaitResponseB>Z<github.com/conta"
  "inerd/containerd/api/services/tasks/v1;t"
  "asksb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tasks_2eproto_deps[8] = {
  &::descriptor_table_descriptor_2eproto,
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_metrics_2eproto,
  &::descriptor_table_mount_2eproto,
  &::descriptor_table_task_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tasks_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tasks_2eproto = {
  false, false, 3932, descriptor_table_protodef_tasks_2eproto, "tasks.proto", 
  &descriptor_table_tasks_2eproto_once, descriptor_table_tasks_2eproto_deps, 8, 27,
  schemas, file_default_instances, TableStruct_tasks_2eproto::offsets,
  file_level_metadata_tasks_2eproto, file_level_enum_descriptors_tasks_2eproto, file_level_service_descriptors_tasks_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tasks_2eproto_getter() {
  return &descriptor_table_tasks_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tasks_2eproto(&descriptor_table_tasks_2eproto);
namespace containerd {
namespace services {
namespace tasks {
namespace v1 {

// ===================================================================

class CreateTaskRequest::_Internal {
 public:
  static const ::containerd::types::Descriptor& checkpoint(const CreateTaskRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& options(const CreateTaskRequest* msg);
};

const ::containerd::types::Descriptor&
CreateTaskRequest::_Internal::checkpoint(const CreateTaskRequest* msg) {
  return *msg->checkpoint_;
}
const PROTOBUF_NAMESPACE_ID::Any&
CreateTaskRequest::_Internal::options(const CreateTaskRequest* msg) {
  return *msg->options_;
}
void CreateTaskRequest::clear_rootfs() {
  rootfs_.Clear();
}
void CreateTaskRequest::clear_checkpoint() {
  if (GetArenaForAllocation() == nullptr && checkpoint_ != nullptr) {
    delete checkpoint_;
  }
  checkpoint_ = nullptr;
}
void CreateTaskRequest::clear_options() {
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
CreateTaskRequest::CreateTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rootfs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.CreateTaskRequest)
}
CreateTaskRequest::CreateTaskRequest(const CreateTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rootfs_(from.rootfs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdin().empty()) {
    stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stdin(), 
      GetArenaForAllocation());
  }
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdout().empty()) {
    stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stdout(), 
      GetArenaForAllocation());
  }
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stderr().empty()) {
    stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stderr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_checkpoint()) {
    checkpoint_ = new ::containerd::types::Descriptor(*from.checkpoint_);
  } else {
    checkpoint_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.options_);
  } else {
    options_ = nullptr;
  }
  terminal_ = from.terminal_;
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.CreateTaskRequest)
}

inline void CreateTaskRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&checkpoint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terminal_) -
    reinterpret_cast<char*>(&checkpoint_)) + sizeof(terminal_));
}

CreateTaskRequest::~CreateTaskRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.CreateTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stdin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stdout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete checkpoint_;
  if (this != internal_default_instance()) delete options_;
}

void CreateTaskRequest::ArenaDtor(void* object) {
  CreateTaskRequest* _this = reinterpret_cast< CreateTaskRequest* >(object);
  (void)_this;
}
void CreateTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.CreateTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rootfs_.Clear();
  container_id_.ClearToEmpty();
  stdin_.ClearToEmpty();
  stdout_.ClearToEmpty();
  stderr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && checkpoint_ != nullptr) {
    delete checkpoint_;
  }
  checkpoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  terminal_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CreateTaskRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .containerd.types.Mount rootfs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rootfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string stdin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_stdin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CreateTaskRequest.stdin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stdout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stdout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CreateTaskRequest.stdout"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stderr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_stderr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CreateTaskRequest.stderr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool terminal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .containerd.types.Descriptor checkpoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.CreateTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CreateTaskRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // repeated .containerd.types.Mount rootfs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rootfs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rootfs(i), target, stream);
  }

  // string stdin = 4;
  if (!this->_internal_stdin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdin().data(), static_cast<int>(this->_internal_stdin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CreateTaskRequest.stdin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stdin(), target);
  }

  // string stdout = 5;
  if (!this->_internal_stdout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout().data(), static_cast<int>(this->_internal_stdout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CreateTaskRequest.stdout");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stdout(), target);
  }

  // string stderr = 6;
  if (!this->_internal_stderr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr().data(), static_cast<int>(this->_internal_stderr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CreateTaskRequest.stderr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stderr(), target);
  }

  // bool terminal = 7;
  if (this->_internal_terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_terminal(), target);
  }

  // .containerd.types.Descriptor checkpoint = 8;
  if (this->_internal_has_checkpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::checkpoint(this), target, stream);
  }

  // .google.protobuf.Any options = 9;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.CreateTaskRequest)
  return target;
}

size_t CreateTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.CreateTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.types.Mount rootfs = 3;
  total_size += 1UL * this->_internal_rootfs_size();
  for (const auto& msg : this->rootfs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string stdin = 4;
  if (!this->_internal_stdin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdin());
  }

  // string stdout = 5;
  if (!this->_internal_stdout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout());
  }

  // string stderr = 6;
  if (!this->_internal_stderr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr());
  }

  // .containerd.types.Descriptor checkpoint = 8;
  if (this->_internal_has_checkpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *checkpoint_);
  }

  // .google.protobuf.Any options = 9;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // bool terminal = 7;
  if (this->_internal_terminal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTaskRequest::GetClassData() const { return &_class_data_; }

void CreateTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTaskRequest *>(to)->MergeFrom(
      static_cast<const CreateTaskRequest &>(from));
}


void CreateTaskRequest::MergeFrom(const CreateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.CreateTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rootfs_.MergeFrom(from.rootfs_);
  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_stdin().empty()) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (!from._internal_stdout().empty()) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (!from._internal_stderr().empty()) {
    _internal_set_stderr(from._internal_stderr());
  }
  if (from._internal_has_checkpoint()) {
    _internal_mutable_checkpoint()->::containerd::types::Descriptor::MergeFrom(from._internal_checkpoint());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_options());
  }
  if (from._internal_terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTaskRequest::CopyFrom(const CreateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.CreateTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskRequest::IsInitialized() const {
  return true;
}

void CreateTaskRequest::InternalSwap(CreateTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rootfs_.InternalSwap(&other->rootfs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stdin_, GetArenaForAllocation(),
      &other->stdin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stdout_, GetArenaForAllocation(),
      &other->stdout_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stderr_, GetArenaForAllocation(),
      &other->stderr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTaskRequest, terminal_)
      + sizeof(CreateTaskRequest::terminal_)
      - PROTOBUF_FIELD_OFFSET(CreateTaskRequest, checkpoint_)>(
          reinterpret_cast<char*>(&checkpoint_),
          reinterpret_cast<char*>(&other->checkpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[0]);
}

// ===================================================================

class CreateTaskResponse::_Internal {
 public:
};

CreateTaskResponse::CreateTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.CreateTaskResponse)
}
CreateTaskResponse::CreateTaskResponse(const CreateTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.CreateTaskResponse)
}

inline void CreateTaskResponse::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pid_ = 0u;
}

CreateTaskResponse::~CreateTaskResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.CreateTaskResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTaskResponse::ArenaDtor(void* object) {
  CreateTaskResponse* _this = reinterpret_cast< CreateTaskResponse* >(object);
  (void)_this;
}
void CreateTaskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.CreateTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CreateTaskResponse.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.CreateTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CreateTaskResponse.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.CreateTaskResponse)
  return target;
}

size_t CreateTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.CreateTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTaskResponse::GetClassData() const { return &_class_data_; }

void CreateTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTaskResponse *>(to)->MergeFrom(
      static_cast<const CreateTaskResponse &>(from));
}


void CreateTaskResponse::MergeFrom(const CreateTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.CreateTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTaskResponse::CopyFrom(const CreateTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.CreateTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskResponse::IsInitialized() const {
  return true;
}

void CreateTaskResponse::InternalSwap(CreateTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTaskResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[1]);
}

// ===================================================================

class StartRequest::_Internal {
 public:
};

StartRequest::StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.StartRequest)
}

inline void StartRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.StartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartRequest::ArenaDtor(void* object) {
  StartRequest* _this = reinterpret_cast< StartRequest* >(object);
  (void)_this;
}
void StartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.StartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.StartRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.StartRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.StartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.StartRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.StartRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.StartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRequest::GetClassData() const { return &_class_data_; }

void StartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StartRequest *>(to)->MergeFrom(
      static_cast<const StartRequest &>(from));
}


void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[2]);
}

// ===================================================================

class StartResponse::_Internal {
 public:
};

StartResponse::StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.StartResponse)
}
StartResponse::StartResponse(const StartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.StartResponse)
}

inline void StartResponse::SharedCtor() {
pid_ = 0u;
}

StartResponse::~StartResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.StartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartResponse::ArenaDtor(void* object) {
  StartResponse* _this = reinterpret_cast< StartResponse* >(object);
  (void)_this;
}
void StartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.StartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.StartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.StartResponse)
  return target;
}

size_t StartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.StartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartResponse::GetClassData() const { return &_class_data_; }

void StartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StartResponse *>(to)->MergeFrom(
      static_cast<const StartResponse &>(from));
}


void StartResponse::MergeFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.StartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartResponse::CopyFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.StartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartResponse::IsInitialized() const {
  return true;
}

void StartResponse::InternalSwap(StartResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[3]);
}

// ===================================================================

class DeleteTaskRequest::_Internal {
 public:
};

DeleteTaskRequest::DeleteTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.DeleteTaskRequest)
}
DeleteTaskRequest::DeleteTaskRequest(const DeleteTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.DeleteTaskRequest)
}

inline void DeleteTaskRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTaskRequest::~DeleteTaskRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.DeleteTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTaskRequest::ArenaDtor(void* object) {
  DeleteTaskRequest* _this = reinterpret_cast< DeleteTaskRequest* >(object);
  (void)_this;
}
void DeleteTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.DeleteTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.DeleteTaskRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.DeleteTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.DeleteTaskRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.DeleteTaskRequest)
  return target;
}

size_t DeleteTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.DeleteTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTaskRequest::GetClassData() const { return &_class_data_; }

void DeleteTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTaskRequest *>(to)->MergeFrom(
      static_cast<const DeleteTaskRequest &>(from));
}


void DeleteTaskRequest::MergeFrom(const DeleteTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.DeleteTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTaskRequest::CopyFrom(const DeleteTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.DeleteTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTaskRequest::IsInitialized() const {
  return true;
}

void DeleteTaskRequest::InternalSwap(DeleteTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[4]);
}

// ===================================================================

class DeleteResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at(const DeleteResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DeleteResponse::_Internal::exited_at(const DeleteResponse* msg) {
  return *msg->exited_at_;
}
void DeleteResponse::clear_exited_at() {
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
}
DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_exited_at()) {
    exited_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.exited_at_);
  } else {
    exited_at_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(exit_status_));
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.DeleteResponse)
}

inline void DeleteResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exited_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&exited_at_)) + sizeof(exit_status_));
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.DeleteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exited_at_;
}

void DeleteResponse::ArenaDtor(void* object) {
  DeleteResponse* _this = reinterpret_cast< DeleteResponse* >(object);
  (void)_this;
}
void DeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_status_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(exit_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.DeleteResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exit_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exit_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_exited_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.DeleteResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 exit_status = 3;
  if (this->_internal_exit_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exit_status(), target);
  }

  // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::exited_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.DeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exited_at_);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 exit_status = 3;
  if (this->_internal_exit_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exit_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteResponse::GetClassData() const { return &_class_data_; }

void DeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteResponse *>(to)->MergeFrom(
      static_cast<const DeleteResponse &>(from));
}


void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_exited_at()) {
    _internal_mutable_exited_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_exited_at());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_exit_status() != 0) {
    _internal_set_exit_status(from._internal_exit_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteResponse, exit_status_)
      + sizeof(DeleteResponse::exit_status_)
      - PROTOBUF_FIELD_OFFSET(DeleteResponse, exited_at_)>(
          reinterpret_cast<char*>(&exited_at_),
          reinterpret_cast<char*>(&other->exited_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[5]);
}

// ===================================================================

class DeleteProcessRequest::_Internal {
 public:
};

DeleteProcessRequest::DeleteProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.DeleteProcessRequest)
}
DeleteProcessRequest::DeleteProcessRequest(const DeleteProcessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.DeleteProcessRequest)
}

inline void DeleteProcessRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteProcessRequest::~DeleteProcessRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.DeleteProcessRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProcessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteProcessRequest::ArenaDtor(void* object) {
  DeleteProcessRequest* _this = reinterpret_cast< DeleteProcessRequest* >(object);
  (void)_this;
}
void DeleteProcessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProcessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.DeleteProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProcessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.DeleteProcessRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.DeleteProcessRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProcessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.DeleteProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.DeleteProcessRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.DeleteProcessRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.DeleteProcessRequest)
  return target;
}

size_t DeleteProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.DeleteProcessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProcessRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProcessRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProcessRequest::GetClassData() const { return &_class_data_; }

void DeleteProcessRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProcessRequest *>(to)->MergeFrom(
      static_cast<const DeleteProcessRequest &>(from));
}


void DeleteProcessRequest::MergeFrom(const DeleteProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.DeleteProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProcessRequest::CopyFrom(const DeleteProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.DeleteProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProcessRequest::IsInitialized() const {
  return true;
}

void DeleteProcessRequest::InternalSwap(DeleteProcessRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProcessRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[6]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.GetRequest)
}

inline void GetRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.GetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.GetRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.GetRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.GetRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.GetRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.GetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }

void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRequest *>(to)->MergeFrom(
      static_cast<const GetRequest &>(from));
}


void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[7]);
}

// ===================================================================

class GetResponse::_Internal {
 public:
  static const ::containerd::v1::types::Process& process(const GetResponse* msg);
};

const ::containerd::v1::types::Process&
GetResponse::_Internal::process(const GetResponse* msg) {
  return *msg->process_;
}
void GetResponse::clear_process() {
  if (GetArenaForAllocation() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_process()) {
    process_ = new ::containerd::v1::types::Process(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.GetResponse)
}

inline void GetResponse::SharedCtor() {
process_ = nullptr;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.GetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete process_;
}

void GetResponse::ArenaDtor(void* object) {
  GetResponse* _this = reinterpret_cast< GetResponse* >(object);
  (void)_this;
}
void GetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.v1.types.Process process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.v1.types.Process process = 1;
  if (this->_internal_has_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::process(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.GetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.v1.types.Process process = 1;
  if (this->_internal_has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }

void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetResponse *>(to)->MergeFrom(
      static_cast<const GetResponse &>(from));
}


void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_process()) {
    _internal_mutable_process()->::containerd::v1::types::Process::MergeFrom(from._internal_process());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(process_, other->process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[8]);
}

// ===================================================================

class ListTasksRequest::_Internal {
 public:
};

ListTasksRequest::ListTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ListTasksRequest)
}
ListTasksRequest::ListTasksRequest(const ListTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ListTasksRequest)
}

inline void ListTasksRequest::SharedCtor() {
filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListTasksRequest::~ListTasksRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ListTasksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTasksRequest::ArenaDtor(void* object) {
  ListTasksRequest* _this = reinterpret_cast< ListTasksRequest* >(object);
  (void)_this;
}
void ListTasksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ListTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ListTasksRequest.filter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ListTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (!this->_internal_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ListTasksRequest.filter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ListTasksRequest)
  return target;
}

size_t ListTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ListTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 1;
  if (!this->_internal_filter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTasksRequest::GetClassData() const { return &_class_data_; }

void ListTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListTasksRequest *>(to)->MergeFrom(
      static_cast<const ListTasksRequest &>(from));
}


void ListTasksRequest::MergeFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filter().empty()) {
    _internal_set_filter(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTasksRequest::CopyFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTasksRequest::IsInitialized() const {
  return true;
}

void ListTasksRequest::InternalSwap(ListTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filter_, GetArenaForAllocation(),
      &other->filter_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTasksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[9]);
}

// ===================================================================

class ListTasksResponse::_Internal {
 public:
};

void ListTasksResponse::clear_tasks() {
  tasks_.Clear();
}
ListTasksResponse::ListTasksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ListTasksResponse)
}
ListTasksResponse::ListTasksResponse(const ListTasksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ListTasksResponse)
}

inline void ListTasksResponse::SharedCtor() {
}

ListTasksResponse::~ListTasksResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ListTasksResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTasksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListTasksResponse::ArenaDtor(void* object) {
  ListTasksResponse* _this = reinterpret_cast< ListTasksResponse* >(object);
  (void)_this;
}
void ListTasksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTasksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTasksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ListTasksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTasksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.v1.types.Process tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTasksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ListTasksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.v1.types.Process tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ListTasksResponse)
  return target;
}

size_t ListTasksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ListTasksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.v1.types.Process tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTasksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTasksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTasksResponse::GetClassData() const { return &_class_data_; }

void ListTasksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListTasksResponse *>(to)->MergeFrom(
      static_cast<const ListTasksResponse &>(from));
}


void ListTasksResponse::MergeFrom(const ListTasksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ListTasksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTasksResponse::CopyFrom(const ListTasksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ListTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTasksResponse::IsInitialized() const {
  return true;
}

void ListTasksResponse::InternalSwap(ListTasksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTasksResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[10]);
}

// ===================================================================

class KillRequest::_Internal {
 public:
};

KillRequest::KillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.KillRequest)
}
KillRequest::KillRequest(const KillRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&signal_, &from.signal_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&signal_)) + sizeof(all_));
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.KillRequest)
}

inline void KillRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&signal_)) + sizeof(all_));
}

KillRequest::~KillRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.KillRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KillRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KillRequest::ArenaDtor(void* object) {
  KillRequest* _this = reinterpret_cast< KillRequest* >(object);
  (void)_this;
}
void KillRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KillRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KillRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.KillRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  ::memset(&signal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&signal_)) + sizeof(all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KillRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.KillRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.KillRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KillRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.KillRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.KillRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.KillRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  // uint32 signal = 3;
  if (this->_internal_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_signal(), target);
  }

  // bool all = 4;
  if (this->_internal_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.KillRequest)
  return target;
}

size_t KillRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.KillRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  // uint32 signal = 3;
  if (this->_internal_signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signal());
  }

  // bool all = 4;
  if (this->_internal_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KillRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KillRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KillRequest::GetClassData() const { return &_class_data_; }

void KillRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<KillRequest *>(to)->MergeFrom(
      static_cast<const KillRequest &>(from));
}


void KillRequest::MergeFrom(const KillRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.KillRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  if (from._internal_signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
  if (from._internal_all() != 0) {
    _internal_set_all(from._internal_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KillRequest::CopyFrom(const KillRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.KillRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillRequest::IsInitialized() const {
  return true;
}

void KillRequest::InternalSwap(KillRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KillRequest, all_)
      + sizeof(KillRequest::all_)
      - PROTOBUF_FIELD_OFFSET(KillRequest, signal_)>(
          reinterpret_cast<char*>(&signal_),
          reinterpret_cast<char*>(&other->signal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KillRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[11]);
}

// ===================================================================

class ExecProcessRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& spec(const ExecProcessRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ExecProcessRequest::_Internal::spec(const ExecProcessRequest* msg) {
  return *msg->spec_;
}
void ExecProcessRequest::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
ExecProcessRequest::ExecProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ExecProcessRequest)
}
ExecProcessRequest::ExecProcessRequest(const ExecProcessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdin().empty()) {
    stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stdin(), 
      GetArenaForAllocation());
  }
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdout().empty()) {
    stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stdout(), 
      GetArenaForAllocation());
  }
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stderr().empty()) {
    stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stderr(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    spec_ = new PROTOBUF_NAMESPACE_ID::Any(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  terminal_ = from.terminal_;
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ExecProcessRequest)
}

inline void ExecProcessRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terminal_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(terminal_));
}

ExecProcessRequest::~ExecProcessRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ExecProcessRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecProcessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stdin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stdout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
}

void ExecProcessRequest::ArenaDtor(void* object) {
  ExecProcessRequest* _this = reinterpret_cast< ExecProcessRequest* >(object);
  (void)_this;
}
void ExecProcessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecProcessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ExecProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  stdin_.ClearToEmpty();
  stdout_.ClearToEmpty();
  stderr_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  terminal_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecProcessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ExecProcessRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stdin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stdin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ExecProcessRequest.stdin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stdout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stdout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ExecProcessRequest.stdout"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stderr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_stderr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ExecProcessRequest.stderr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool terminal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any spec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ExecProcessRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecProcessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ExecProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ExecProcessRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string stdin = 2;
  if (!this->_internal_stdin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdin().data(), static_cast<int>(this->_internal_stdin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ExecProcessRequest.stdin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stdin(), target);
  }

  // string stdout = 3;
  if (!this->_internal_stdout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout().data(), static_cast<int>(this->_internal_stdout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ExecProcessRequest.stdout");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stdout(), target);
  }

  // string stderr = 4;
  if (!this->_internal_stderr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr().data(), static_cast<int>(this->_internal_stderr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ExecProcessRequest.stderr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stderr(), target);
  }

  // bool terminal = 5;
  if (this->_internal_terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_terminal(), target);
  }

  // .google.protobuf.Any spec = 6;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::spec(this), target, stream);
  }

  // string exec_id = 7;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ExecProcessRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_exec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ExecProcessRequest)
  return target;
}

size_t ExecProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ExecProcessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string stdin = 2;
  if (!this->_internal_stdin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdin());
  }

  // string stdout = 3;
  if (!this->_internal_stdout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout());
  }

  // string stderr = 4;
  if (!this->_internal_stderr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr());
  }

  // string exec_id = 7;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  // .google.protobuf.Any spec = 6;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // bool terminal = 5;
  if (this->_internal_terminal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecProcessRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecProcessRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecProcessRequest::GetClassData() const { return &_class_data_; }

void ExecProcessRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExecProcessRequest *>(to)->MergeFrom(
      static_cast<const ExecProcessRequest &>(from));
}


void ExecProcessRequest::MergeFrom(const ExecProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ExecProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_stdin().empty()) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (!from._internal_stdout().empty()) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (!from._internal_stderr().empty()) {
    _internal_set_stderr(from._internal_stderr());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_spec());
  }
  if (from._internal_terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecProcessRequest::CopyFrom(const ExecProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ExecProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecProcessRequest::IsInitialized() const {
  return true;
}

void ExecProcessRequest::InternalSwap(ExecProcessRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stdin_, GetArenaForAllocation(),
      &other->stdin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stdout_, GetArenaForAllocation(),
      &other->stdout_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stderr_, GetArenaForAllocation(),
      &other->stderr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecProcessRequest, terminal_)
      + sizeof(ExecProcessRequest::terminal_)
      - PROTOBUF_FIELD_OFFSET(ExecProcessRequest, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecProcessRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[12]);
}

// ===================================================================

class ExecProcessResponse::_Internal {
 public:
};

ExecProcessResponse::ExecProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ExecProcessResponse)
}
ExecProcessResponse::ExecProcessResponse(const ExecProcessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ExecProcessResponse)
}

inline void ExecProcessResponse::SharedCtor() {
}

ExecProcessResponse::~ExecProcessResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ExecProcessResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecProcessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecProcessResponse::ArenaDtor(void* object) {
  ExecProcessResponse* _this = reinterpret_cast< ExecProcessResponse* >(object);
  (void)_this;
}
void ExecProcessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecProcessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecProcessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ExecProcessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecProcessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecProcessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ExecProcessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ExecProcessResponse)
  return target;
}

size_t ExecProcessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ExecProcessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecProcessResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecProcessResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecProcessResponse::GetClassData() const { return &_class_data_; }

void ExecProcessResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExecProcessResponse *>(to)->MergeFrom(
      static_cast<const ExecProcessResponse &>(from));
}


void ExecProcessResponse::MergeFrom(const ExecProcessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ExecProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecProcessResponse::CopyFrom(const ExecProcessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ExecProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecProcessResponse::IsInitialized() const {
  return true;
}

void ExecProcessResponse::InternalSwap(ExecProcessResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecProcessResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[13]);
}

// ===================================================================

class ResizePtyRequest::_Internal {
 public:
};

ResizePtyRequest::ResizePtyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ResizePtyRequest)
}
ResizePtyRequest::ResizePtyRequest(const ResizePtyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ResizePtyRequest)
}

inline void ResizePtyRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ResizePtyRequest::~ResizePtyRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ResizePtyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResizePtyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResizePtyRequest::ArenaDtor(void* object) {
  ResizePtyRequest* _this = reinterpret_cast< ResizePtyRequest* >(object);
  (void)_this;
}
void ResizePtyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResizePtyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResizePtyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ResizePtyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizePtyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ResizePtyRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ResizePtyRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResizePtyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ResizePtyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ResizePtyRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ResizePtyRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ResizePtyRequest)
  return target;
}

size_t ResizePtyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ResizePtyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizePtyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResizePtyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizePtyRequest::GetClassData() const { return &_class_data_; }

void ResizePtyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResizePtyRequest *>(to)->MergeFrom(
      static_cast<const ResizePtyRequest &>(from));
}


void ResizePtyRequest::MergeFrom(const ResizePtyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ResizePtyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResizePtyRequest::CopyFrom(const ResizePtyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ResizePtyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizePtyRequest::IsInitialized() const {
  return true;
}

void ResizePtyRequest::InternalSwap(ResizePtyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizePtyRequest, height_)
      + sizeof(ResizePtyRequest::height_)
      - PROTOBUF_FIELD_OFFSET(ResizePtyRequest, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizePtyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[14]);
}

// ===================================================================

class CloseIORequest::_Internal {
 public:
};

CloseIORequest::CloseIORequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.CloseIORequest)
}
CloseIORequest::CloseIORequest(const CloseIORequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  stdin_ = from.stdin_;
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.CloseIORequest)
}

inline void CloseIORequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stdin_ = false;
}

CloseIORequest::~CloseIORequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.CloseIORequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseIORequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseIORequest::ArenaDtor(void* object) {
  CloseIORequest* _this = reinterpret_cast< CloseIORequest* >(object);
  (void)_this;
}
void CloseIORequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseIORequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseIORequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.CloseIORequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  stdin_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseIORequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CloseIORequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CloseIORequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stdin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseIORequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.CloseIORequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CloseIORequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CloseIORequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  // bool stdin = 3;
  if (this->_internal_stdin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_stdin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.CloseIORequest)
  return target;
}

size_t CloseIORequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.CloseIORequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  // bool stdin = 3;
  if (this->_internal_stdin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseIORequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseIORequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseIORequest::GetClassData() const { return &_class_data_; }

void CloseIORequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CloseIORequest *>(to)->MergeFrom(
      static_cast<const CloseIORequest &>(from));
}


void CloseIORequest::MergeFrom(const CloseIORequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.CloseIORequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  if (from._internal_stdin() != 0) {
    _internal_set_stdin(from._internal_stdin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseIORequest::CopyFrom(const CloseIORequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.CloseIORequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseIORequest::IsInitialized() const {
  return true;
}

void CloseIORequest::InternalSwap(CloseIORequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
  swap(stdin_, other->stdin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseIORequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[15]);
}

// ===================================================================

class PauseTaskRequest::_Internal {
 public:
};

PauseTaskRequest::PauseTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.PauseTaskRequest)
}
PauseTaskRequest::PauseTaskRequest(const PauseTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.PauseTaskRequest)
}

inline void PauseTaskRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PauseTaskRequest::~PauseTaskRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.PauseTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PauseTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PauseTaskRequest::ArenaDtor(void* object) {
  PauseTaskRequest* _this = reinterpret_cast< PauseTaskRequest* >(object);
  (void)_this;
}
void PauseTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PauseTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.PauseTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.PauseTaskRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.PauseTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.PauseTaskRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.PauseTaskRequest)
  return target;
}

size_t PauseTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.PauseTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PauseTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseTaskRequest::GetClassData() const { return &_class_data_; }

void PauseTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PauseTaskRequest *>(to)->MergeFrom(
      static_cast<const PauseTaskRequest &>(from));
}


void PauseTaskRequest::MergeFrom(const PauseTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.PauseTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PauseTaskRequest::CopyFrom(const PauseTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.PauseTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseTaskRequest::IsInitialized() const {
  return true;
}

void PauseTaskRequest::InternalSwap(PauseTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[16]);
}

// ===================================================================

class ResumeTaskRequest::_Internal {
 public:
};

ResumeTaskRequest::ResumeTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ResumeTaskRequest)
}
ResumeTaskRequest::ResumeTaskRequest(const ResumeTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ResumeTaskRequest)
}

inline void ResumeTaskRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResumeTaskRequest::~ResumeTaskRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ResumeTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResumeTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResumeTaskRequest::ArenaDtor(void* object) {
  ResumeTaskRequest* _this = reinterpret_cast< ResumeTaskRequest* >(object);
  (void)_this;
}
void ResumeTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResumeTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResumeTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ResumeTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ResumeTaskRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ResumeTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ResumeTaskRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ResumeTaskRequest)
  return target;
}

size_t ResumeTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ResumeTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResumeTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResumeTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResumeTaskRequest::GetClassData() const { return &_class_data_; }

void ResumeTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResumeTaskRequest *>(to)->MergeFrom(
      static_cast<const ResumeTaskRequest &>(from));
}


void ResumeTaskRequest::MergeFrom(const ResumeTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ResumeTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResumeTaskRequest::CopyFrom(const ResumeTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ResumeTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeTaskRequest::IsInitialized() const {
  return true;
}

void ResumeTaskRequest::InternalSwap(ResumeTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[17]);
}

// ===================================================================

class ListPidsRequest::_Internal {
 public:
};

ListPidsRequest::ListPidsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ListPidsRequest)
}
ListPidsRequest::ListPidsRequest(const ListPidsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ListPidsRequest)
}

inline void ListPidsRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPidsRequest::~ListPidsRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ListPidsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPidsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPidsRequest::ArenaDtor(void* object) {
  ListPidsRequest* _this = reinterpret_cast< ListPidsRequest* >(object);
  (void)_this;
}
void ListPidsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPidsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPidsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ListPidsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPidsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.ListPidsRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPidsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ListPidsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.ListPidsRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ListPidsRequest)
  return target;
}

size_t ListPidsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ListPidsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPidsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPidsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPidsRequest::GetClassData() const { return &_class_data_; }

void ListPidsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListPidsRequest *>(to)->MergeFrom(
      static_cast<const ListPidsRequest &>(from));
}


void ListPidsRequest::MergeFrom(const ListPidsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ListPidsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPidsRequest::CopyFrom(const ListPidsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ListPidsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPidsRequest::IsInitialized() const {
  return true;
}

void ListPidsRequest::InternalSwap(ListPidsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPidsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[18]);
}

// ===================================================================

class ListPidsResponse::_Internal {
 public:
};

void ListPidsResponse::clear_processes() {
  processes_.Clear();
}
ListPidsResponse::ListPidsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  processes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.ListPidsResponse)
}
ListPidsResponse::ListPidsResponse(const ListPidsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      processes_(from.processes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.ListPidsResponse)
}

inline void ListPidsResponse::SharedCtor() {
}

ListPidsResponse::~ListPidsResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.ListPidsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPidsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListPidsResponse::ArenaDtor(void* object) {
  ListPidsResponse* _this = reinterpret_cast< ListPidsResponse* >(object);
  (void)_this;
}
void ListPidsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPidsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPidsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.ListPidsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPidsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.v1.types.ProcessInfo processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPidsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.ListPidsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.v1.types.ProcessInfo processes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_processes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_processes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.ListPidsResponse)
  return target;
}

size_t ListPidsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.ListPidsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.v1.types.ProcessInfo processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPidsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPidsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPidsResponse::GetClassData() const { return &_class_data_; }

void ListPidsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListPidsResponse *>(to)->MergeFrom(
      static_cast<const ListPidsResponse &>(from));
}


void ListPidsResponse::MergeFrom(const ListPidsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.ListPidsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processes_.MergeFrom(from.processes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPidsResponse::CopyFrom(const ListPidsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.ListPidsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPidsResponse::IsInitialized() const {
  return true;
}

void ListPidsResponse::InternalSwap(ListPidsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  processes_.InternalSwap(&other->processes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPidsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[19]);
}

// ===================================================================

class CheckpointTaskRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& options(const CheckpointTaskRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
CheckpointTaskRequest::_Internal::options(const CheckpointTaskRequest* msg) {
  return *msg->options_;
}
void CheckpointTaskRequest::clear_options() {
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
CheckpointTaskRequest::CheckpointTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.CheckpointTaskRequest)
}
CheckpointTaskRequest::CheckpointTaskRequest(const CheckpointTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  parent_checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_checkpoint().empty()) {
    parent_checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_checkpoint(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.CheckpointTaskRequest)
}

inline void CheckpointTaskRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
options_ = nullptr;
}

CheckpointTaskRequest::~CheckpointTaskRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.CheckpointTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckpointTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_checkpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void CheckpointTaskRequest::ArenaDtor(void* object) {
  CheckpointTaskRequest* _this = reinterpret_cast< CheckpointTaskRequest* >(object);
  (void)_this;
}
void CheckpointTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckpointTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.CheckpointTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  parent_checkpoint_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CheckpointTaskRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parent_checkpoint = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/opencontainers/go-digest.Digest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parent_checkpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.CheckpointTaskRequest.parent_checkpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.CheckpointTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CheckpointTaskRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string parent_checkpoint = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/opencontainers/go-digest.Digest"];
  if (!this->_internal_parent_checkpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_checkpoint().data(), static_cast<int>(this->_internal_parent_checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.CheckpointTaskRequest.parent_checkpoint");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parent_checkpoint(), target);
  }

  // .google.protobuf.Any options = 3;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.CheckpointTaskRequest)
  return target;
}

size_t CheckpointTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.CheckpointTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string parent_checkpoint = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/opencontainers/go-digest.Digest"];
  if (!this->_internal_parent_checkpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_checkpoint());
  }

  // .google.protobuf.Any options = 3;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckpointTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckpointTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckpointTaskRequest::GetClassData() const { return &_class_data_; }

void CheckpointTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckpointTaskRequest *>(to)->MergeFrom(
      static_cast<const CheckpointTaskRequest &>(from));
}


void CheckpointTaskRequest::MergeFrom(const CheckpointTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.CheckpointTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_parent_checkpoint().empty()) {
    _internal_set_parent_checkpoint(from._internal_parent_checkpoint());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckpointTaskRequest::CopyFrom(const CheckpointTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.CheckpointTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointTaskRequest::IsInitialized() const {
  return true;
}

void CheckpointTaskRequest::InternalSwap(CheckpointTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_checkpoint_, GetArenaForAllocation(),
      &other->parent_checkpoint_, other->GetArenaForAllocation()
  );
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[20]);
}

// ===================================================================

class CheckpointTaskResponse::_Internal {
 public:
};

void CheckpointTaskResponse::clear_descriptors() {
  descriptors_.Clear();
}
CheckpointTaskResponse::CheckpointTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  descriptors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.CheckpointTaskResponse)
}
CheckpointTaskResponse::CheckpointTaskResponse(const CheckpointTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.CheckpointTaskResponse)
}

inline void CheckpointTaskResponse::SharedCtor() {
}

CheckpointTaskResponse::~CheckpointTaskResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.CheckpointTaskResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckpointTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckpointTaskResponse::ArenaDtor(void* object) {
  CheckpointTaskResponse* _this = reinterpret_cast< CheckpointTaskResponse* >(object);
  (void)_this;
}
void CheckpointTaskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckpointTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.CheckpointTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.types.Descriptor descriptors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.CheckpointTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.types.Descriptor descriptors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_descriptors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.CheckpointTaskResponse)
  return target;
}

size_t CheckpointTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.CheckpointTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.types.Descriptor descriptors = 1;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckpointTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckpointTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckpointTaskResponse::GetClassData() const { return &_class_data_; }

void CheckpointTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckpointTaskResponse *>(to)->MergeFrom(
      static_cast<const CheckpointTaskResponse &>(from));
}


void CheckpointTaskResponse::MergeFrom(const CheckpointTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.CheckpointTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptors_.MergeFrom(from.descriptors_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckpointTaskResponse::CopyFrom(const CheckpointTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.CheckpointTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointTaskResponse::IsInitialized() const {
  return true;
}

void CheckpointTaskResponse::InternalSwap(CheckpointTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  descriptors_.InternalSwap(&other->descriptors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointTaskResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[21]);
}

// ===================================================================

class UpdateTaskRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& resources(const UpdateTaskRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
UpdateTaskRequest::_Internal::resources(const UpdateTaskRequest* msg) {
  return *msg->resources_;
}
void UpdateTaskRequest::clear_resources() {
  if (GetArenaForAllocation() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
UpdateTaskRequest::UpdateTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.UpdateTaskRequest)
}
UpdateTaskRequest::UpdateTaskRequest(const UpdateTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resources()) {
    resources_ = new PROTOBUF_NAMESPACE_ID::Any(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.UpdateTaskRequest)
}

inline void UpdateTaskRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resources_ = nullptr;
}

UpdateTaskRequest::~UpdateTaskRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.UpdateTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
}

void UpdateTaskRequest::ArenaDtor(void* object) {
  UpdateTaskRequest* _this = reinterpret_cast< UpdateTaskRequest* >(object);
  (void)_this;
}
void UpdateTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.UpdateTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.UpdateTaskRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.UpdateTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.UpdateTaskRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // .google.protobuf.Any resources = 2;
  if (this->_internal_has_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resources(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.UpdateTaskRequest)
  return target;
}

size_t UpdateTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.UpdateTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // .google.protobuf.Any resources = 2;
  if (this->_internal_has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTaskRequest::GetClassData() const { return &_class_data_; }

void UpdateTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateTaskRequest *>(to)->MergeFrom(
      static_cast<const UpdateTaskRequest &>(from));
}


void UpdateTaskRequest::MergeFrom(const UpdateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.UpdateTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from._internal_has_resources()) {
    _internal_mutable_resources()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_resources());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTaskRequest::CopyFrom(const UpdateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.UpdateTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTaskRequest::IsInitialized() const {
  return true;
}

void UpdateTaskRequest::InternalSwap(UpdateTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  swap(resources_, other->resources_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[22]);
}

// ===================================================================

class MetricsRequest::_Internal {
 public:
};

MetricsRequest::MetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.MetricsRequest)
}
MetricsRequest::MetricsRequest(const MetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.MetricsRequest)
}

inline void MetricsRequest::SharedCtor() {
}

MetricsRequest::~MetricsRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.MetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsRequest::ArenaDtor(void* object) {
  MetricsRequest* _this = reinterpret_cast< MetricsRequest* >(object);
  (void)_this;
}
void MetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.MetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.MetricsRequest.filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.MetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filters = 1;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    const auto& s = this->_internal_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.MetricsRequest.filters");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.MetricsRequest)
  return target;
}

size_t MetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.MetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filters = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filters_.size());
  for (int i = 0, n = filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filters_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsRequest::GetClassData() const { return &_class_data_; }

void MetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsRequest *>(to)->MergeFrom(
      static_cast<const MetricsRequest &>(from));
}


void MetricsRequest::MergeFrom(const MetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.MetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsRequest::CopyFrom(const MetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.MetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsRequest::IsInitialized() const {
  return true;
}

void MetricsRequest::InternalSwap(MetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[23]);
}

// ===================================================================

class MetricsResponse::_Internal {
 public:
};

void MetricsResponse::clear_metrics() {
  metrics_.Clear();
}
MetricsResponse::MetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.MetricsResponse)
}
MetricsResponse::MetricsResponse(const MetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.MetricsResponse)
}

inline void MetricsResponse::SharedCtor() {
}

MetricsResponse::~MetricsResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.MetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsResponse::ArenaDtor(void* object) {
  MetricsResponse* _this = reinterpret_cast< MetricsResponse* >(object);
  (void)_this;
}
void MetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.MetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.types.Metric metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.MetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.types.Metric metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.MetricsResponse)
  return target;
}

size_t MetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.MetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.types.Metric metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsResponse::GetClassData() const { return &_class_data_; }

void MetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsResponse *>(to)->MergeFrom(
      static_cast<const MetricsResponse &>(from));
}


void MetricsResponse::MergeFrom(const MetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.MetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsResponse::CopyFrom(const MetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.MetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsResponse::IsInitialized() const {
  return true;
}

void MetricsResponse::InternalSwap(MetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[24]);
}

// ===================================================================

class WaitRequest::_Internal {
 public:
};

WaitRequest::WaitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.WaitRequest)
}
WaitRequest::WaitRequest(const WaitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.WaitRequest)
}

inline void WaitRequest::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WaitRequest::~WaitRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.WaitRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WaitRequest::ArenaDtor(void* object) {
  WaitRequest* _this = reinterpret_cast< WaitRequest* >(object);
  (void)_this;
}
void WaitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.WaitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.WaitRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.tasks.v1.WaitRequest.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.WaitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.WaitRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.tasks.v1.WaitRequest.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.WaitRequest)
  return target;
}

size_t WaitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.WaitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitRequest::GetClassData() const { return &_class_data_; }

void WaitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WaitRequest *>(to)->MergeFrom(
      static_cast<const WaitRequest &>(from));
}


void WaitRequest::MergeFrom(const WaitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.WaitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitRequest::CopyFrom(const WaitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.WaitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitRequest::IsInitialized() const {
  return true;
}

void WaitRequest::InternalSwap(WaitRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[25]);
}

// ===================================================================

class WaitResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at(const WaitResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
WaitResponse::_Internal::exited_at(const WaitResponse* msg) {
  return *msg->exited_at_;
}
void WaitResponse::clear_exited_at() {
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
}
WaitResponse::WaitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.tasks.v1.WaitResponse)
}
WaitResponse::WaitResponse(const WaitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_exited_at()) {
    exited_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.exited_at_);
  } else {
    exited_at_ = nullptr;
  }
  exit_status_ = from.exit_status_;
  // @@protoc_insertion_point(copy_constructor:containerd.services.tasks.v1.WaitResponse)
}

inline void WaitResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exited_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&exited_at_)) + sizeof(exit_status_));
}

WaitResponse::~WaitResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.tasks.v1.WaitResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete exited_at_;
}

void WaitResponse::ArenaDtor(void* object) {
  WaitResponse* _this = reinterpret_cast< WaitResponse* >(object);
  (void)_this;
}
void WaitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.tasks.v1.WaitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
  exit_status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 exit_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exit_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exited_at = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exited_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.tasks.v1.WaitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exit_status = 1;
  if (this->_internal_exit_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_exit_status(), target);
  }

  // .google.protobuf.Timestamp exited_at = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exited_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.tasks.v1.WaitResponse)
  return target;
}

size_t WaitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.tasks.v1.WaitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp exited_at = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exited_at_);
  }

  // uint32 exit_status = 1;
  if (this->_internal_exit_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exit_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitResponse::GetClassData() const { return &_class_data_; }

void WaitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WaitResponse *>(to)->MergeFrom(
      static_cast<const WaitResponse &>(from));
}


void WaitResponse::MergeFrom(const WaitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.tasks.v1.WaitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_exited_at()) {
    _internal_mutable_exited_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_exited_at());
  }
  if (from._internal_exit_status() != 0) {
    _internal_set_exit_status(from._internal_exit_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitResponse::CopyFrom(const WaitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.tasks.v1.WaitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitResponse::IsInitialized() const {
  return true;
}

void WaitResponse::InternalSwap(WaitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitResponse, exit_status_)
      + sizeof(WaitResponse::exit_status_)
      - PROTOBUF_FIELD_OFFSET(WaitResponse, exited_at_)>(
          reinterpret_cast<char*>(&exited_at_),
          reinterpret_cast<char*>(&other->exited_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tasks_2eproto_getter, &descriptor_table_tasks_2eproto_once,
      file_level_metadata_tasks_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace tasks
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::CreateTaskRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::CreateTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::CreateTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::CreateTaskResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::CreateTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::CreateTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::StartRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::StartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::StartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::StartResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::StartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::StartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::DeleteTaskRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::DeleteTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::DeleteTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::DeleteResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::DeleteProcessRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::DeleteProcessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::DeleteProcessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::GetRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::GetResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ListTasksRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ListTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ListTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ListTasksResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ListTasksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ListTasksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::KillRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::KillRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::KillRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ExecProcessRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ExecProcessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ExecProcessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ExecProcessResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ExecProcessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ExecProcessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ResizePtyRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ResizePtyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ResizePtyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::CloseIORequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::CloseIORequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::CloseIORequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::PauseTaskRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::PauseTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::PauseTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ResumeTaskRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ResumeTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ResumeTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ListPidsRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ListPidsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ListPidsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::ListPidsResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::ListPidsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::ListPidsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::CheckpointTaskRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::CheckpointTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::CheckpointTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::CheckpointTaskResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::CheckpointTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::CheckpointTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::UpdateTaskRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::UpdateTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::UpdateTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::MetricsRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::MetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::MetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::MetricsResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::MetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::MetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::WaitRequest* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::WaitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::WaitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::tasks::v1::WaitResponse* Arena::CreateMaybeMessage< ::containerd::services::tasks::v1::WaitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::tasks::v1::WaitResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
