// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_events.proto

#include "task_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace containerd {
namespace events {
constexpr TaskCreate::TaskCreate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rootfs_()
  , container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bundle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checkpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , io_(nullptr)
  , pid_(0u){}
struct TaskCreateDefaultTypeInternal {
  constexpr TaskCreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCreateDefaultTypeInternal() {}
  union {
    TaskCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCreateDefaultTypeInternal _TaskCreate_default_instance_;
constexpr TaskStart::TaskStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0u){}
struct TaskStartDefaultTypeInternal {
  constexpr TaskStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskStartDefaultTypeInternal() {}
  union {
    TaskStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskStartDefaultTypeInternal _TaskStart_default_instance_;
constexpr TaskDelete::TaskDelete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exited_at_(nullptr)
  , pid_(0u)
  , exit_status_(0u){}
struct TaskDeleteDefaultTypeInternal {
  constexpr TaskDeleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDeleteDefaultTypeInternal() {}
  union {
    TaskDelete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDeleteDefaultTypeInternal _TaskDelete_default_instance_;
constexpr TaskIO::TaskIO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stdin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stdout_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stderr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , terminal_(false){}
struct TaskIODefaultTypeInternal {
  constexpr TaskIODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskIODefaultTypeInternal() {}
  union {
    TaskIO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskIODefaultTypeInternal _TaskIO_default_instance_;
constexpr TaskExit::TaskExit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exited_at_(nullptr)
  , pid_(0u)
  , exit_status_(0u){}
struct TaskExitDefaultTypeInternal {
  constexpr TaskExitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExitDefaultTypeInternal() {}
  union {
    TaskExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExitDefaultTypeInternal _TaskExit_default_instance_;
constexpr TaskOOM::TaskOOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskOOMDefaultTypeInternal {
  constexpr TaskOOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskOOMDefaultTypeInternal() {}
  union {
    TaskOOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskOOMDefaultTypeInternal _TaskOOM_default_instance_;
constexpr TaskExecAdded::TaskExecAdded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskExecAddedDefaultTypeInternal {
  constexpr TaskExecAddedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecAddedDefaultTypeInternal() {}
  union {
    TaskExecAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecAddedDefaultTypeInternal _TaskExecAdded_default_instance_;
constexpr TaskExecStarted::TaskExecStarted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0u){}
struct TaskExecStartedDefaultTypeInternal {
  constexpr TaskExecStartedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecStartedDefaultTypeInternal() {}
  union {
    TaskExecStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecStartedDefaultTypeInternal _TaskExecStarted_default_instance_;
constexpr TaskPaused::TaskPaused(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskPausedDefaultTypeInternal {
  constexpr TaskPausedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskPausedDefaultTypeInternal() {}
  union {
    TaskPaused _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskPausedDefaultTypeInternal _TaskPaused_default_instance_;
constexpr TaskResumed::TaskResumed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskResumedDefaultTypeInternal {
  constexpr TaskResumedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskResumedDefaultTypeInternal() {}
  union {
    TaskResumed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskResumedDefaultTypeInternal _TaskResumed_default_instance_;
constexpr TaskCheckpointed::TaskCheckpointed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checkpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskCheckpointedDefaultTypeInternal {
  constexpr TaskCheckpointedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCheckpointedDefaultTypeInternal() {}
  union {
    TaskCheckpointed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCheckpointedDefaultTypeInternal _TaskCheckpointed_default_instance_;
}  // namespace events
}  // namespace containerd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_task_5fevents_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_task_5fevents_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_task_5fevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_task_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, bundle_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, rootfs_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, io_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, checkpoint_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCreate, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskStart, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskStart, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskDelete, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskDelete, pid_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskDelete, exit_status_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskDelete, exited_at_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskDelete, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskIO, stdin_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskIO, stdout_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskIO, stderr_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskIO, terminal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExit, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExit, id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExit, pid_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExit, exit_status_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExit, exited_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskOOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskOOM, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecAdded, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecAdded, exec_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecStarted, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecStarted, exec_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskExecStarted, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskPaused, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskPaused, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskResumed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskResumed, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCheckpointed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCheckpointed, container_id_),
  PROTOBUF_FIELD_OFFSET(::containerd::events::TaskCheckpointed, checkpoint_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::containerd::events::TaskCreate)},
  { 11, -1, sizeof(::containerd::events::TaskStart)},
  { 18, -1, sizeof(::containerd::events::TaskDelete)},
  { 28, -1, sizeof(::containerd::events::TaskIO)},
  { 37, -1, sizeof(::containerd::events::TaskExit)},
  { 47, -1, sizeof(::containerd::events::TaskOOM)},
  { 53, -1, sizeof(::containerd::events::TaskExecAdded)},
  { 60, -1, sizeof(::containerd::events::TaskExecStarted)},
  { 68, -1, sizeof(::containerd::events::TaskPaused)},
  { 74, -1, sizeof(::containerd::events::TaskResumed)},
  { 80, -1, sizeof(::containerd::events::TaskCheckpointed)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskDelete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskIO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskOOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskExecAdded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskExecStarted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskPaused_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskResumed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::events::_TaskCheckpointed_default_instance_),
};

const char descriptor_table_protodef_task_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021task_events.proto\022\021containerd.events\032\n"
  "gogo.proto\032\037google/protobuf/timestamp.pr"
  "oto\032\013mount.proto\032\017fieldpath.proto\"\253\001\n\nTa"
  "skCreate\022\024\n\014container_id\030\001 \001(\t\022\016\n\006bundle"
  "\030\002 \001(\t\022\'\n\006rootfs\030\003 \003(\0132\027.containerd.type"
  "s.Mount\022-\n\002io\030\004 \001(\0132\031.containerd.events."
  "TaskIOB\006\342\336\037\002IO\022\022\n\ncheckpoint\030\005 \001(\t\022\013\n\003pi"
  "d\030\006 \001(\r\".\n\tTaskStart\022\024\n\014container_id\030\001 \001"
  "(\t\022\013\n\003pid\030\002 \001(\r\"\211\001\n\nTaskDelete\022\024\n\014contai"
  "ner_id\030\001 \001(\t\022\013\n\003pid\030\002 \001(\r\022\023\n\013exit_status"
  "\030\003 \001(\r\0227\n\texited_at\030\004 \001(\0132\032.google.proto"
  "buf.TimestampB\010\220\337\037\001\310\336\037\000\022\n\n\002id\030\005 \001(\t\"I\n\006T"
  "askIO\022\r\n\005stdin\030\001 \001(\t\022\016\n\006stdout\030\002 \001(\t\022\016\n\006"
  "stderr\030\003 \001(\t\022\020\n\010terminal\030\004 \001(\010\"\207\001\n\010TaskE"
  "xit\022\024\n\014container_id\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\013\n"
  "\003pid\030\003 \001(\r\022\023\n\013exit_status\030\004 \001(\r\0227\n\texite"
  "d_at\030\005 \001(\0132\032.google.protobuf.TimestampB\010"
  "\220\337\037\001\310\336\037\000\"\037\n\007TaskOOM\022\024\n\014container_id\030\001 \001("
  "\t\"6\n\rTaskExecAdded\022\024\n\014container_id\030\001 \001(\t"
  "\022\017\n\007exec_id\030\002 \001(\t\"E\n\017TaskExecStarted\022\024\n\014"
  "container_id\030\001 \001(\t\022\017\n\007exec_id\030\002 \001(\t\022\013\n\003p"
  "id\030\003 \001(\r\"\"\n\nTaskPaused\022\024\n\014container_id\030\001"
  " \001(\t\"#\n\013TaskResumed\022\024\n\014container_id\030\001 \001("
  "\t\"<\n\020TaskCheckpointed\022\024\n\014container_id\030\001 "
  "\001(\t\022\022\n\ncheckpoint\030\002 \001(\tB8Z2github.com/co"
  "ntainerd/containerd/api/events;events\240\364\036"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_task_5fevents_2eproto_deps[4] = {
  &::descriptor_table_fieldpath_2eproto,
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_mount_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_task_5fevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_5fevents_2eproto = {
  false, false, 1049, descriptor_table_protodef_task_5fevents_2eproto, "task_events.proto", 
  &descriptor_table_task_5fevents_2eproto_once, descriptor_table_task_5fevents_2eproto_deps, 4, 11,
  schemas, file_default_instances, TableStruct_task_5fevents_2eproto::offsets,
  file_level_metadata_task_5fevents_2eproto, file_level_enum_descriptors_task_5fevents_2eproto, file_level_service_descriptors_task_5fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_task_5fevents_2eproto_getter() {
  return &descriptor_table_task_5fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_task_5fevents_2eproto(&descriptor_table_task_5fevents_2eproto);
namespace containerd {
namespace events {

// ===================================================================

class TaskCreate::_Internal {
 public:
  static const ::containerd::events::TaskIO& io(const TaskCreate* msg);
};

const ::containerd::events::TaskIO&
TaskCreate::_Internal::io(const TaskCreate* msg) {
  return *msg->io_;
}
void TaskCreate::clear_rootfs() {
  rootfs_.Clear();
}
TaskCreate::TaskCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rootfs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskCreate)
}
TaskCreate::TaskCreate(const TaskCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rootfs_(from.rootfs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  bundle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bundle().empty()) {
    bundle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bundle(), 
      GetArenaForAllocation());
  }
  checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpoint().empty()) {
    checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_checkpoint(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_io()) {
    io_ = new ::containerd::events::TaskIO(*from.io_);
  } else {
    io_ = nullptr;
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskCreate)
}

inline void TaskCreate::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bundle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&io_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&io_)) + sizeof(pid_));
}

TaskCreate::~TaskCreate() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskCreate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete io_;
}

void TaskCreate::ArenaDtor(void* object) {
  TaskCreate* _this = reinterpret_cast< TaskCreate* >(object);
  (void)_this;
}
void TaskCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rootfs_.Clear();
  container_id_.ClearToEmpty();
  bundle_.ClearToEmpty();
  checkpoint_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && io_ != nullptr) {
    delete io_;
  }
  io_ = nullptr;
  pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskCreate.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bundle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskCreate.bundle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .containerd.types.Mount rootfs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rootfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .containerd.events.TaskIO io = 4 [(.gogoproto.customname) = "IO"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_io(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checkpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_checkpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskCreate.checkpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskCreate.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string bundle = 2;
  if (!this->_internal_bundle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bundle().data(), static_cast<int>(this->_internal_bundle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskCreate.bundle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bundle(), target);
  }

  // repeated .containerd.types.Mount rootfs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rootfs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rootfs(i), target, stream);
  }

  // .containerd.events.TaskIO io = 4 [(.gogoproto.customname) = "IO"];
  if (this->_internal_has_io()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::io(this), target, stream);
  }

  // string checkpoint = 5;
  if (!this->_internal_checkpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint().data(), static_cast<int>(this->_internal_checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskCreate.checkpoint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_checkpoint(), target);
  }

  // uint32 pid = 6;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskCreate)
  return target;
}

size_t TaskCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.types.Mount rootfs = 3;
  total_size += 1UL * this->_internal_rootfs_size();
  for (const auto& msg : this->rootfs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string bundle = 2;
  if (!this->_internal_bundle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bundle());
  }

  // string checkpoint = 5;
  if (!this->_internal_checkpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint());
  }

  // .containerd.events.TaskIO io = 4 [(.gogoproto.customname) = "IO"];
  if (this->_internal_has_io()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_);
  }

  // uint32 pid = 6;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCreate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskCreate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCreate::GetClassData() const { return &_class_data_; }

void TaskCreate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskCreate *>(to)->MergeFrom(
      static_cast<const TaskCreate &>(from));
}


void TaskCreate::MergeFrom(const TaskCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskCreate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rootfs_.MergeFrom(from.rootfs_);
  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_bundle().empty()) {
    _internal_set_bundle(from._internal_bundle());
  }
  if (!from._internal_checkpoint().empty()) {
    _internal_set_checkpoint(from._internal_checkpoint());
  }
  if (from._internal_has_io()) {
    _internal_mutable_io()->::containerd::events::TaskIO::MergeFrom(from._internal_io());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCreate::CopyFrom(const TaskCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCreate::IsInitialized() const {
  return true;
}

void TaskCreate::InternalSwap(TaskCreate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rootfs_.InternalSwap(&other->rootfs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bundle_, GetArenaForAllocation(),
      &other->bundle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &checkpoint_, GetArenaForAllocation(),
      &other->checkpoint_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskCreate, pid_)
      + sizeof(TaskCreate::pid_)
      - PROTOBUF_FIELD_OFFSET(TaskCreate, io_)>(
          reinterpret_cast<char*>(&io_),
          reinterpret_cast<char*>(&other->io_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCreate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[0]);
}

// ===================================================================

class TaskStart::_Internal {
 public:
};

TaskStart::TaskStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskStart)
}
TaskStart::TaskStart(const TaskStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskStart)
}

inline void TaskStart::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pid_ = 0u;
}

TaskStart::~TaskStart() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskStart::ArenaDtor(void* object) {
  TaskStart* _this = reinterpret_cast< TaskStart* >(object);
  (void)_this;
}
void TaskStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskStart::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskStart.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskStart.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskStart)
  return target;
}

size_t TaskStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskStart::GetClassData() const { return &_class_data_; }

void TaskStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskStart *>(to)->MergeFrom(
      static_cast<const TaskStart &>(from));
}


void TaskStart::MergeFrom(const TaskStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskStart)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStart::CopyFrom(const TaskStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStart::IsInitialized() const {
  return true;
}

void TaskStart::InternalSwap(TaskStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStart::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[1]);
}

// ===================================================================

class TaskDelete::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at(const TaskDelete* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TaskDelete::_Internal::exited_at(const TaskDelete* msg) {
  return *msg->exited_at_;
}
void TaskDelete::clear_exited_at() {
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
}
TaskDelete::TaskDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskDelete)
}
TaskDelete::TaskDelete(const TaskDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_exited_at()) {
    exited_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.exited_at_);
  } else {
    exited_at_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(exit_status_));
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskDelete)
}

inline void TaskDelete::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exited_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&exited_at_)) + sizeof(exit_status_));
}

TaskDelete::~TaskDelete() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskDelete)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskDelete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exited_at_;
}

void TaskDelete::ArenaDtor(void* object) {
  TaskDelete* _this = reinterpret_cast< TaskDelete* >(object);
  (void)_this;
}
void TaskDelete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_status_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(exit_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskDelete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskDelete.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exit_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exit_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_exited_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskDelete.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskDelete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskDelete.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 exit_status = 3;
  if (this->_internal_exit_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exit_status(), target);
  }

  // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::exited_at(this), target, stream);
  }

  // string id = 5;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskDelete.id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskDelete)
  return target;
}

size_t TaskDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskDelete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string id = 5;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp exited_at = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exited_at_);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 exit_status = 3;
  if (this->_internal_exit_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exit_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskDelete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskDelete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskDelete::GetClassData() const { return &_class_data_; }

void TaskDelete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskDelete *>(to)->MergeFrom(
      static_cast<const TaskDelete &>(from));
}


void TaskDelete::MergeFrom(const TaskDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskDelete)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_exited_at()) {
    _internal_mutable_exited_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_exited_at());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_exit_status() != 0) {
    _internal_set_exit_status(from._internal_exit_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskDelete::CopyFrom(const TaskDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDelete::IsInitialized() const {
  return true;
}

void TaskDelete::InternalSwap(TaskDelete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskDelete, exit_status_)
      + sizeof(TaskDelete::exit_status_)
      - PROTOBUF_FIELD_OFFSET(TaskDelete, exited_at_)>(
          reinterpret_cast<char*>(&exited_at_),
          reinterpret_cast<char*>(&other->exited_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskDelete::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[2]);
}

// ===================================================================

class TaskIO::_Internal {
 public:
};

TaskIO::TaskIO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskIO)
}
TaskIO::TaskIO(const TaskIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdin().empty()) {
    stdin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stdin(), 
      GetArenaForAllocation());
  }
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdout().empty()) {
    stdout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stdout(), 
      GetArenaForAllocation());
  }
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stderr().empty()) {
    stderr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stderr(), 
      GetArenaForAllocation());
  }
  terminal_ = from.terminal_;
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskIO)
}

inline void TaskIO::SharedCtor() {
stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
terminal_ = false;
}

TaskIO::~TaskIO() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskIO)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskIO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stdin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stdout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskIO::ArenaDtor(void* object) {
  TaskIO* _this = reinterpret_cast< TaskIO* >(object);
  (void)_this;
}
void TaskIO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskIO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskIO::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdin_.ClearToEmpty();
  stdout_.ClearToEmpty();
  stderr_.ClearToEmpty();
  terminal_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskIO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stdin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stdin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskIO.stdin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stdout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stdout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskIO.stdout"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stderr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stderr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskIO.stderr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool terminal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskIO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stdin = 1;
  if (!this->_internal_stdin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdin().data(), static_cast<int>(this->_internal_stdin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskIO.stdin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stdin(), target);
  }

  // string stdout = 2;
  if (!this->_internal_stdout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout().data(), static_cast<int>(this->_internal_stdout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskIO.stdout");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stdout(), target);
  }

  // string stderr = 3;
  if (!this->_internal_stderr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr().data(), static_cast<int>(this->_internal_stderr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskIO.stderr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stderr(), target);
  }

  // bool terminal = 4;
  if (this->_internal_terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_terminal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskIO)
  return target;
}

size_t TaskIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskIO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stdin = 1;
  if (!this->_internal_stdin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdin());
  }

  // string stdout = 2;
  if (!this->_internal_stdout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout());
  }

  // string stderr = 3;
  if (!this->_internal_stderr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr());
  }

  // bool terminal = 4;
  if (this->_internal_terminal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskIO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskIO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskIO::GetClassData() const { return &_class_data_; }

void TaskIO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskIO *>(to)->MergeFrom(
      static_cast<const TaskIO &>(from));
}


void TaskIO::MergeFrom(const TaskIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskIO)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stdin().empty()) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (!from._internal_stdout().empty()) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (!from._internal_stderr().empty()) {
    _internal_set_stderr(from._internal_stderr());
  }
  if (from._internal_terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskIO::CopyFrom(const TaskIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskIO::IsInitialized() const {
  return true;
}

void TaskIO::InternalSwap(TaskIO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stdin_, GetArenaForAllocation(),
      &other->stdin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stdout_, GetArenaForAllocation(),
      &other->stdout_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stderr_, GetArenaForAllocation(),
      &other->stderr_, other->GetArenaForAllocation()
  );
  swap(terminal_, other->terminal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskIO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[3]);
}

// ===================================================================

class TaskExit::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& exited_at(const TaskExit* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TaskExit::_Internal::exited_at(const TaskExit* msg) {
  return *msg->exited_at_;
}
void TaskExit::clear_exited_at() {
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
}
TaskExit::TaskExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskExit)
}
TaskExit::TaskExit(const TaskExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_exited_at()) {
    exited_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.exited_at_);
  } else {
    exited_at_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(exit_status_));
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskExit)
}

inline void TaskExit::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exited_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&exited_at_)) + sizeof(exit_status_));
}

TaskExit::~TaskExit() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskExit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exited_at_;
}

void TaskExit::ArenaDtor(void* object) {
  TaskExit* _this = reinterpret_cast< TaskExit* >(object);
  (void)_this;
}
void TaskExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExit::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && exited_at_ != nullptr) {
    delete exited_at_;
  }
  exited_at_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_status_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(exit_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskExit.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskExit.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exit_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exit_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exited_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exited_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskExit.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskExit.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  // uint32 exit_status = 4;
  if (this->_internal_exit_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_exit_status(), target);
  }

  // .google.protobuf.Timestamp exited_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::exited_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskExit)
  return target;
}

size_t TaskExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp exited_at = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_exited_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exited_at_);
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 exit_status = 4;
  if (this->_internal_exit_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exit_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskExit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskExit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskExit::GetClassData() const { return &_class_data_; }

void TaskExit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskExit *>(to)->MergeFrom(
      static_cast<const TaskExit &>(from));
}


void TaskExit::MergeFrom(const TaskExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskExit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_exited_at()) {
    _internal_mutable_exited_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_exited_at());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_exit_status() != 0) {
    _internal_set_exit_status(from._internal_exit_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskExit::CopyFrom(const TaskExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExit::IsInitialized() const {
  return true;
}

void TaskExit::InternalSwap(TaskExit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskExit, exit_status_)
      + sizeof(TaskExit::exit_status_)
      - PROTOBUF_FIELD_OFFSET(TaskExit, exited_at_)>(
          reinterpret_cast<char*>(&exited_at_),
          reinterpret_cast<char*>(&other->exited_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[4]);
}

// ===================================================================

class TaskOOM::_Internal {
 public:
};

TaskOOM::TaskOOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskOOM)
}
TaskOOM::TaskOOM(const TaskOOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskOOM)
}

inline void TaskOOM::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskOOM::~TaskOOM() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskOOM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskOOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskOOM::ArenaDtor(void* object) {
  TaskOOM* _this = reinterpret_cast< TaskOOM* >(object);
  (void)_this;
}
void TaskOOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskOOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskOOM::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskOOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskOOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskOOM.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskOOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskOOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskOOM.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskOOM)
  return target;
}

size_t TaskOOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskOOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskOOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskOOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskOOM::GetClassData() const { return &_class_data_; }

void TaskOOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskOOM *>(to)->MergeFrom(
      static_cast<const TaskOOM &>(from));
}


void TaskOOM::MergeFrom(const TaskOOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskOOM)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskOOM::CopyFrom(const TaskOOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskOOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskOOM::IsInitialized() const {
  return true;
}

void TaskOOM::InternalSwap(TaskOOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskOOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[5]);
}

// ===================================================================

class TaskExecAdded::_Internal {
 public:
};

TaskExecAdded::TaskExecAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskExecAdded)
}
TaskExecAdded::TaskExecAdded(const TaskExecAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskExecAdded)
}

inline void TaskExecAdded::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskExecAdded::~TaskExecAdded() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskExecAdded)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskExecAdded::ArenaDtor(void* object) {
  TaskExecAdded* _this = reinterpret_cast< TaskExecAdded* >(object);
  (void)_this;
}
void TaskExecAdded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecAdded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskExecAdded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskExecAdded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskExecAdded.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskExecAdded.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskExecAdded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskExecAdded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskExecAdded.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskExecAdded.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskExecAdded)
  return target;
}

size_t TaskExecAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskExecAdded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskExecAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskExecAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskExecAdded::GetClassData() const { return &_class_data_; }

void TaskExecAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskExecAdded *>(to)->MergeFrom(
      static_cast<const TaskExecAdded &>(from));
}


void TaskExecAdded::MergeFrom(const TaskExecAdded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskExecAdded)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskExecAdded::CopyFrom(const TaskExecAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskExecAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecAdded::IsInitialized() const {
  return true;
}

void TaskExecAdded::InternalSwap(TaskExecAdded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecAdded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[6]);
}

// ===================================================================

class TaskExecStarted::_Internal {
 public:
};

TaskExecStarted::TaskExecStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskExecStarted)
}
TaskExecStarted::TaskExecStarted(const TaskExecStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_id().empty()) {
    exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_id(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskExecStarted)
}

inline void TaskExecStarted::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pid_ = 0u;
}

TaskExecStarted::~TaskExecStarted() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskExecStarted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskExecStarted::ArenaDtor(void* object) {
  TaskExecStarted* _this = reinterpret_cast< TaskExecStarted* >(object);
  (void)_this;
}
void TaskExecStarted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskExecStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  exec_id_.ClearToEmpty();
  pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskExecStarted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskExecStarted.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exec_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskExecStarted.exec_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskExecStarted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskExecStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskExecStarted.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_id().data(), static_cast<int>(this->_internal_exec_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskExecStarted.exec_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_id(), target);
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskExecStarted)
  return target;
}

size_t TaskExecStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskExecStarted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string exec_id = 2;
  if (!this->_internal_exec_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_id());
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskExecStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskExecStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskExecStarted::GetClassData() const { return &_class_data_; }

void TaskExecStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskExecStarted *>(to)->MergeFrom(
      static_cast<const TaskExecStarted &>(from));
}


void TaskExecStarted::MergeFrom(const TaskExecStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskExecStarted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_exec_id().empty()) {
    _internal_set_exec_id(from._internal_exec_id());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskExecStarted::CopyFrom(const TaskExecStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskExecStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecStarted::IsInitialized() const {
  return true;
}

void TaskExecStarted::InternalSwap(TaskExecStarted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_id_, GetArenaForAllocation(),
      &other->exec_id_, other->GetArenaForAllocation()
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecStarted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[7]);
}

// ===================================================================

class TaskPaused::_Internal {
 public:
};

TaskPaused::TaskPaused(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskPaused)
}
TaskPaused::TaskPaused(const TaskPaused& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskPaused)
}

inline void TaskPaused::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskPaused::~TaskPaused() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskPaused)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskPaused::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskPaused::ArenaDtor(void* object) {
  TaskPaused* _this = reinterpret_cast< TaskPaused* >(object);
  (void)_this;
}
void TaskPaused::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskPaused::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskPaused::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskPaused)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskPaused::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskPaused.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskPaused::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskPaused)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskPaused.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskPaused)
  return target;
}

size_t TaskPaused::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskPaused)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskPaused::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskPaused::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskPaused::GetClassData() const { return &_class_data_; }

void TaskPaused::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskPaused *>(to)->MergeFrom(
      static_cast<const TaskPaused &>(from));
}


void TaskPaused::MergeFrom(const TaskPaused& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskPaused)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskPaused::CopyFrom(const TaskPaused& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskPaused)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPaused::IsInitialized() const {
  return true;
}

void TaskPaused::InternalSwap(TaskPaused* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskPaused::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[8]);
}

// ===================================================================

class TaskResumed::_Internal {
 public:
};

TaskResumed::TaskResumed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskResumed)
}
TaskResumed::TaskResumed(const TaskResumed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskResumed)
}

inline void TaskResumed::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskResumed::~TaskResumed() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskResumed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskResumed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskResumed::ArenaDtor(void* object) {
  TaskResumed* _this = reinterpret_cast< TaskResumed* >(object);
  (void)_this;
}
void TaskResumed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskResumed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskResumed::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskResumed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskResumed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskResumed.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskResumed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskResumed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskResumed.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskResumed)
  return target;
}

size_t TaskResumed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskResumed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskResumed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskResumed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskResumed::GetClassData() const { return &_class_data_; }

void TaskResumed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskResumed *>(to)->MergeFrom(
      static_cast<const TaskResumed &>(from));
}


void TaskResumed::MergeFrom(const TaskResumed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskResumed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskResumed::CopyFrom(const TaskResumed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskResumed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResumed::IsInitialized() const {
  return true;
}

void TaskResumed::InternalSwap(TaskResumed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskResumed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[9]);
}

// ===================================================================

class TaskCheckpointed::_Internal {
 public:
};

TaskCheckpointed::TaskCheckpointed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.events.TaskCheckpointed)
}
TaskCheckpointed::TaskCheckpointed(const TaskCheckpointed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_id(), 
      GetArenaForAllocation());
  }
  checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpoint().empty()) {
    checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_checkpoint(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.events.TaskCheckpointed)
}

inline void TaskCheckpointed::SharedCtor() {
container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskCheckpointed::~TaskCheckpointed() {
  // @@protoc_insertion_point(destructor:containerd.events.TaskCheckpointed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskCheckpointed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskCheckpointed::ArenaDtor(void* object) {
  TaskCheckpointed* _this = reinterpret_cast< TaskCheckpointed* >(object);
  (void)_this;
}
void TaskCheckpointed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskCheckpointed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskCheckpointed::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.events.TaskCheckpointed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty();
  checkpoint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCheckpointed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskCheckpointed.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checkpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.events.TaskCheckpointed.checkpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskCheckpointed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.events.TaskCheckpointed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskCheckpointed.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // string checkpoint = 2;
  if (!this->_internal_checkpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint().data(), static_cast<int>(this->_internal_checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.events.TaskCheckpointed.checkpoint");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.events.TaskCheckpointed)
  return target;
}

size_t TaskCheckpointed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.events.TaskCheckpointed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string checkpoint = 2;
  if (!this->_internal_checkpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCheckpointed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskCheckpointed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCheckpointed::GetClassData() const { return &_class_data_; }

void TaskCheckpointed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskCheckpointed *>(to)->MergeFrom(
      static_cast<const TaskCheckpointed &>(from));
}


void TaskCheckpointed::MergeFrom(const TaskCheckpointed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.events.TaskCheckpointed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_container_id().empty()) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_checkpoint().empty()) {
    _internal_set_checkpoint(from._internal_checkpoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCheckpointed::CopyFrom(const TaskCheckpointed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.events.TaskCheckpointed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCheckpointed::IsInitialized() const {
  return true;
}

void TaskCheckpointed::InternalSwap(TaskCheckpointed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_id_, GetArenaForAllocation(),
      &other->container_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &checkpoint_, GetArenaForAllocation(),
      &other->checkpoint_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCheckpointed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_5fevents_2eproto_getter, &descriptor_table_task_5fevents_2eproto_once,
      file_level_metadata_task_5fevents_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace events
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::containerd::events::TaskCreate* Arena::CreateMaybeMessage< ::containerd::events::TaskCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskStart* Arena::CreateMaybeMessage< ::containerd::events::TaskStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskStart >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskDelete* Arena::CreateMaybeMessage< ::containerd::events::TaskDelete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskIO* Arena::CreateMaybeMessage< ::containerd::events::TaskIO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskIO >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskExit* Arena::CreateMaybeMessage< ::containerd::events::TaskExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskExit >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskOOM* Arena::CreateMaybeMessage< ::containerd::events::TaskOOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskOOM >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskExecAdded* Arena::CreateMaybeMessage< ::containerd::events::TaskExecAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskExecAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskExecStarted* Arena::CreateMaybeMessage< ::containerd::events::TaskExecStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskExecStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskPaused* Arena::CreateMaybeMessage< ::containerd::events::TaskPaused >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskPaused >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskResumed* Arena::CreateMaybeMessage< ::containerd::events::TaskResumed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskResumed >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::events::TaskCheckpointed* Arena::CreateMaybeMessage< ::containerd::events::TaskCheckpointed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::events::TaskCheckpointed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
