// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namespace.proto

#include "namespace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace containerd {
namespace services {
namespace namespaces {
namespace v1 {
constexpr Namespace_LabelsEntry_DoNotUse::Namespace_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Namespace_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr Namespace_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Namespace_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Namespace_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Namespace_LabelsEntry_DoNotUseDefaultTypeInternal _Namespace_LabelsEntry_DoNotUse_default_instance_;
constexpr Namespace::Namespace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NamespaceDefaultTypeInternal {
  constexpr NamespaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamespaceDefaultTypeInternal() {}
  union {
    Namespace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamespaceDefaultTypeInternal _Namespace_default_instance_;
constexpr GetNamespaceRequest::GetNamespaceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetNamespaceRequestDefaultTypeInternal {
  constexpr GetNamespaceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNamespaceRequestDefaultTypeInternal() {}
  union {
    GetNamespaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNamespaceRequestDefaultTypeInternal _GetNamespaceRequest_default_instance_;
constexpr GetNamespaceResponse::GetNamespaceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namespace__(nullptr){}
struct GetNamespaceResponseDefaultTypeInternal {
  constexpr GetNamespaceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNamespaceResponseDefaultTypeInternal() {}
  union {
    GetNamespaceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNamespaceResponseDefaultTypeInternal _GetNamespaceResponse_default_instance_;
constexpr ListNamespacesRequest::ListNamespacesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListNamespacesRequestDefaultTypeInternal {
  constexpr ListNamespacesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNamespacesRequestDefaultTypeInternal() {}
  union {
    ListNamespacesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNamespacesRequestDefaultTypeInternal _ListNamespacesRequest_default_instance_;
constexpr ListNamespacesResponse::ListNamespacesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namespaces_(){}
struct ListNamespacesResponseDefaultTypeInternal {
  constexpr ListNamespacesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNamespacesResponseDefaultTypeInternal() {}
  union {
    ListNamespacesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNamespacesResponseDefaultTypeInternal _ListNamespacesResponse_default_instance_;
constexpr CreateNamespaceRequest::CreateNamespaceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namespace__(nullptr){}
struct CreateNamespaceRequestDefaultTypeInternal {
  constexpr CreateNamespaceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateNamespaceRequestDefaultTypeInternal() {}
  union {
    CreateNamespaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateNamespaceRequestDefaultTypeInternal _CreateNamespaceRequest_default_instance_;
constexpr CreateNamespaceResponse::CreateNamespaceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namespace__(nullptr){}
struct CreateNamespaceResponseDefaultTypeInternal {
  constexpr CreateNamespaceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateNamespaceResponseDefaultTypeInternal() {}
  union {
    CreateNamespaceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateNamespaceResponseDefaultTypeInternal _CreateNamespaceResponse_default_instance_;
constexpr UpdateNamespaceRequest::UpdateNamespaceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namespace__(nullptr)
  , update_mask_(nullptr){}
struct UpdateNamespaceRequestDefaultTypeInternal {
  constexpr UpdateNamespaceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateNamespaceRequestDefaultTypeInternal() {}
  union {
    UpdateNamespaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateNamespaceRequestDefaultTypeInternal _UpdateNamespaceRequest_default_instance_;
constexpr UpdateNamespaceResponse::UpdateNamespaceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namespace__(nullptr){}
struct UpdateNamespaceResponseDefaultTypeInternal {
  constexpr UpdateNamespaceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateNamespaceResponseDefaultTypeInternal() {}
  union {
    UpdateNamespaceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateNamespaceResponseDefaultTypeInternal _UpdateNamespaceResponse_default_instance_;
constexpr DeleteNamespaceRequest::DeleteNamespaceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteNamespaceRequestDefaultTypeInternal {
  constexpr DeleteNamespaceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteNamespaceRequestDefaultTypeInternal() {}
  union {
    DeleteNamespaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteNamespaceRequestDefaultTypeInternal _DeleteNamespaceRequest_default_instance_;
}  // namespace v1
}  // namespace namespaces
}  // namespace services
}  // namespace containerd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_namespace_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_namespace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_namespace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_namespace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace, name_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::Namespace, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::GetNamespaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::GetNamespaceRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::GetNamespaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::GetNamespaceResponse, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::ListNamespacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::ListNamespacesRequest, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::ListNamespacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::ListNamespacesResponse, namespaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::CreateNamespaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::CreateNamespaceRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::CreateNamespaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::CreateNamespaceResponse, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::UpdateNamespaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::UpdateNamespaceRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::UpdateNamespaceRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::UpdateNamespaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::UpdateNamespaceResponse, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::DeleteNamespaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::namespaces::v1::DeleteNamespaceRequest, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::containerd::services::namespaces::v1::Namespace)},
  { 16, -1, sizeof(::containerd::services::namespaces::v1::GetNamespaceRequest)},
  { 22, -1, sizeof(::containerd::services::namespaces::v1::GetNamespaceResponse)},
  { 28, -1, sizeof(::containerd::services::namespaces::v1::ListNamespacesRequest)},
  { 34, -1, sizeof(::containerd::services::namespaces::v1::ListNamespacesResponse)},
  { 40, -1, sizeof(::containerd::services::namespaces::v1::CreateNamespaceRequest)},
  { 46, -1, sizeof(::containerd::services::namespaces::v1::CreateNamespaceResponse)},
  { 52, -1, sizeof(::containerd::services::namespaces::v1::UpdateNamespaceRequest)},
  { 59, -1, sizeof(::containerd::services::namespaces::v1::UpdateNamespaceResponse)},
  { 65, -1, sizeof(::containerd::services::namespaces::v1::DeleteNamespaceRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_Namespace_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_Namespace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_GetNamespaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_GetNamespaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_ListNamespacesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_ListNamespacesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_CreateNamespaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_CreateNamespaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_UpdateNamespaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_UpdateNamespaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::namespaces::v1::_DeleteNamespaceRequest_default_instance_),
};

const char descriptor_table_protodef_namespace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017namespace.proto\022!containerd.services.n"
  "amespaces.v1\032\ngogo.proto\032\033google/protobu"
  "f/empty.proto\032 google/protobuf/field_mas"
  "k.proto\"\222\001\n\tNamespace\022\014\n\004name\030\001 \001(\t\022H\n\006l"
  "abels\030\002 \003(\01328.containerd.services.namesp"
  "aces.v1.Namespace.LabelsEntry\032-\n\013LabelsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"#\n\023"
  "GetNamespaceRequest\022\014\n\004name\030\001 \001(\t\"]\n\024Get"
  "NamespaceResponse\022E\n\tnamespace\030\001 \001(\0132,.c"
  "ontainerd.services.namespaces.v1.Namespa"
  "ceB\004\310\336\037\000\"\'\n\025ListNamespacesRequest\022\016\n\006fil"
  "ter\030\001 \001(\t\"`\n\026ListNamespacesResponse\022F\n\nn"
  "amespaces\030\001 \003(\0132,.containerd.services.na"
  "mespaces.v1.NamespaceB\004\310\336\037\000\"_\n\026CreateNam"
  "espaceRequest\022E\n\tnamespace\030\001 \001(\0132,.conta"
  "inerd.services.namespaces.v1.NamespaceB\004"
  "\310\336\037\000\"`\n\027CreateNamespaceResponse\022E\n\tnames"
  "pace\030\001 \001(\0132,.containerd.services.namespa"
  "ces.v1.NamespaceB\004\310\336\037\000\"\220\001\n\026UpdateNamespa"
  "ceRequest\022E\n\tnamespace\030\001 \001(\0132,.container"
  "d.services.namespaces.v1.NamespaceB\004\310\336\037\000"
  "\022/\n\013update_mask\030\002 \001(\0132\032.google.protobuf."
  "FieldMask\"`\n\027UpdateNamespaceResponse\022E\n\t"
  "namespace\030\001 \001(\0132,.containerd.services.na"
  "mespaces.v1.NamespaceB\004\310\336\037\000\"&\n\026DeleteNam"
  "espaceRequest\022\014\n\004name\030\001 \001(\t2\340\004\n\nNamespac"
  "es\022v\n\003Get\0226.containerd.services.namespac"
  "es.v1.GetNamespaceRequest\0327.containerd.s"
  "ervices.namespaces.v1.GetNamespaceRespon"
  "se\022{\n\004List\0228.containerd.services.namespa"
  "ces.v1.ListNamespacesRequest\0329.container"
  "d.services.namespaces.v1.ListNamespacesR"
  "esponse\022\177\n\006Create\0229.containerd.services."
  "namespaces.v1.CreateNamespaceRequest\032:.c"
  "ontainerd.services.namespaces.v1.CreateN"
  "amespaceResponse\022\177\n\006Update\0229.containerd."
  "services.namespaces.v1.UpdateNamespaceRe"
  "quest\032:.containerd.services.namespaces.v"
  "1.UpdateNamespaceResponse\022[\n\006Delete\0229.co"
  "ntainerd.services.namespaces.v1.DeleteNa"
  "mespaceRequest\032\026.google.protobuf.EmptyBH"
  "ZFgithub.com/containerd/containerd/api/s"
  "ervices/namespaces/v1;namespacesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_namespace_2eproto_deps[3] = {
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_namespace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_namespace_2eproto = {
  false, false, 1720, descriptor_table_protodef_namespace_2eproto, "namespace.proto", 
  &descriptor_table_namespace_2eproto_once, descriptor_table_namespace_2eproto_deps, 3, 11,
  schemas, file_default_instances, TableStruct_namespace_2eproto::offsets,
  file_level_metadata_namespace_2eproto, file_level_enum_descriptors_namespace_2eproto, file_level_service_descriptors_namespace_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_namespace_2eproto_getter() {
  return &descriptor_table_namespace_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_namespace_2eproto(&descriptor_table_namespace_2eproto);
namespace containerd {
namespace services {
namespace namespaces {
namespace v1 {

// ===================================================================

Namespace_LabelsEntry_DoNotUse::Namespace_LabelsEntry_DoNotUse() {}
Namespace_LabelsEntry_DoNotUse::Namespace_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Namespace_LabelsEntry_DoNotUse::MergeFrom(const Namespace_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Namespace_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[0]);
}

// ===================================================================

class Namespace::_Internal {
 public:
};

Namespace::Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.Namespace)
}
Namespace::Namespace(const Namespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.Namespace)
}

inline void Namespace::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Namespace::~Namespace() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.Namespace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Namespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Namespace::ArenaDtor(void* object) {
  Namespace* _this = reinterpret_cast< Namespace* >(object);
  (void)_this;
  _this->labels_. ~MapField();
}
inline void Namespace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Namespace::ArenaDtor);
  }
}
void Namespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Namespace::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.Namespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Namespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.namespaces.v1.Namespace.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Namespace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.Namespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.namespaces.v1.Namespace.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> labels = 2;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.namespaces.v1.Namespace.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.namespaces.v1.Namespace.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Namespace_LabelsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Namespace_LabelsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.Namespace)
  return target;
}

size_t Namespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.Namespace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Namespace_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Namespace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Namespace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Namespace::GetClassData() const { return &_class_data_; }

void Namespace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Namespace *>(to)->MergeFrom(
      static_cast<const Namespace &>(from));
}


void Namespace::MergeFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Namespace::CopyFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Namespace::IsInitialized() const {
  return true;
}

void Namespace::InternalSwap(Namespace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Namespace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[1]);
}

// ===================================================================

class GetNamespaceRequest::_Internal {
 public:
};

GetNamespaceRequest::GetNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.GetNamespaceRequest)
}
GetNamespaceRequest::GetNamespaceRequest(const GetNamespaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.GetNamespaceRequest)
}

inline void GetNamespaceRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNamespaceRequest::~GetNamespaceRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.GetNamespaceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNamespaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNamespaceRequest::ArenaDtor(void* object) {
  GetNamespaceRequest* _this = reinterpret_cast< GetNamespaceRequest* >(object);
  (void)_this;
}
void GetNamespaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNamespaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNamespaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.GetNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNamespaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.namespaces.v1.GetNamespaceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNamespaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.GetNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.namespaces.v1.GetNamespaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.GetNamespaceRequest)
  return target;
}

size_t GetNamespaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.GetNamespaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNamespaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNamespaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNamespaceRequest::GetClassData() const { return &_class_data_; }

void GetNamespaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetNamespaceRequest *>(to)->MergeFrom(
      static_cast<const GetNamespaceRequest &>(from));
}


void GetNamespaceRequest::MergeFrom(const GetNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.GetNamespaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNamespaceRequest::CopyFrom(const GetNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.GetNamespaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNamespaceRequest::IsInitialized() const {
  return true;
}

void GetNamespaceRequest::InternalSwap(GetNamespaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNamespaceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[2]);
}

// ===================================================================

class GetNamespaceResponse::_Internal {
 public:
  static const ::containerd::services::namespaces::v1::Namespace& namespace_(const GetNamespaceResponse* msg);
};

const ::containerd::services::namespaces::v1::Namespace&
GetNamespaceResponse::_Internal::namespace_(const GetNamespaceResponse* msg) {
  return *msg->namespace__;
}
GetNamespaceResponse::GetNamespaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.GetNamespaceResponse)
}
GetNamespaceResponse::GetNamespaceResponse(const GetNamespaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::containerd::services::namespaces::v1::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.GetNamespaceResponse)
}

inline void GetNamespaceResponse::SharedCtor() {
namespace__ = nullptr;
}

GetNamespaceResponse::~GetNamespaceResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.GetNamespaceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNamespaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
}

void GetNamespaceResponse::ArenaDtor(void* object) {
  GetNamespaceResponse* _this = reinterpret_cast< GetNamespaceResponse* >(object);
  (void)_this;
}
void GetNamespaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNamespaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNamespaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.GetNamespaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNamespaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNamespaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.GetNamespaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.GetNamespaceResponse)
  return target;
}

size_t GetNamespaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.GetNamespaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNamespaceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNamespaceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNamespaceResponse::GetClassData() const { return &_class_data_; }

void GetNamespaceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetNamespaceResponse *>(to)->MergeFrom(
      static_cast<const GetNamespaceResponse &>(from));
}


void GetNamespaceResponse::MergeFrom(const GetNamespaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.GetNamespaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::containerd::services::namespaces::v1::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNamespaceResponse::CopyFrom(const GetNamespaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.GetNamespaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNamespaceResponse::IsInitialized() const {
  return true;
}

void GetNamespaceResponse::InternalSwap(GetNamespaceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(namespace__, other->namespace__);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNamespaceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[3]);
}

// ===================================================================

class ListNamespacesRequest::_Internal {
 public:
};

ListNamespacesRequest::ListNamespacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.ListNamespacesRequest)
}
ListNamespacesRequest::ListNamespacesRequest(const ListNamespacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.ListNamespacesRequest)
}

inline void ListNamespacesRequest::SharedCtor() {
filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListNamespacesRequest::~ListNamespacesRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.ListNamespacesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNamespacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListNamespacesRequest::ArenaDtor(void* object) {
  ListNamespacesRequest* _this = reinterpret_cast< ListNamespacesRequest* >(object);
  (void)_this;
}
void ListNamespacesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNamespacesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNamespacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.ListNamespacesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNamespacesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.namespaces.v1.ListNamespacesRequest.filter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNamespacesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.ListNamespacesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (!this->_internal_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.namespaces.v1.ListNamespacesRequest.filter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.ListNamespacesRequest)
  return target;
}

size_t ListNamespacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.ListNamespacesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 1;
  if (!this->_internal_filter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNamespacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNamespacesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNamespacesRequest::GetClassData() const { return &_class_data_; }

void ListNamespacesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListNamespacesRequest *>(to)->MergeFrom(
      static_cast<const ListNamespacesRequest &>(from));
}


void ListNamespacesRequest::MergeFrom(const ListNamespacesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.ListNamespacesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filter().empty()) {
    _internal_set_filter(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNamespacesRequest::CopyFrom(const ListNamespacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.ListNamespacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNamespacesRequest::IsInitialized() const {
  return true;
}

void ListNamespacesRequest::InternalSwap(ListNamespacesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filter_, GetArenaForAllocation(),
      &other->filter_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNamespacesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[4]);
}

// ===================================================================

class ListNamespacesResponse::_Internal {
 public:
};

ListNamespacesResponse::ListNamespacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  namespaces_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.ListNamespacesResponse)
}
ListNamespacesResponse::ListNamespacesResponse(const ListNamespacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      namespaces_(from.namespaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.ListNamespacesResponse)
}

inline void ListNamespacesResponse::SharedCtor() {
}

ListNamespacesResponse::~ListNamespacesResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.ListNamespacesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNamespacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListNamespacesResponse::ArenaDtor(void* object) {
  ListNamespacesResponse* _this = reinterpret_cast< ListNamespacesResponse* >(object);
  (void)_this;
}
void ListNamespacesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNamespacesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNamespacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.ListNamespacesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespaces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNamespacesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.services.namespaces.v1.Namespace namespaces = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_namespaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNamespacesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.ListNamespacesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.services.namespaces.v1.Namespace namespaces = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_namespaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_namespaces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.ListNamespacesResponse)
  return target;
}

size_t ListNamespacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.ListNamespacesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.services.namespaces.v1.Namespace namespaces = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_namespaces_size();
  for (const auto& msg : this->namespaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNamespacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNamespacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNamespacesResponse::GetClassData() const { return &_class_data_; }

void ListNamespacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListNamespacesResponse *>(to)->MergeFrom(
      static_cast<const ListNamespacesResponse &>(from));
}


void ListNamespacesResponse::MergeFrom(const ListNamespacesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.ListNamespacesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespaces_.MergeFrom(from.namespaces_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNamespacesResponse::CopyFrom(const ListNamespacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.ListNamespacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNamespacesResponse::IsInitialized() const {
  return true;
}

void ListNamespacesResponse::InternalSwap(ListNamespacesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  namespaces_.InternalSwap(&other->namespaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNamespacesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[5]);
}

// ===================================================================

class CreateNamespaceRequest::_Internal {
 public:
  static const ::containerd::services::namespaces::v1::Namespace& namespace_(const CreateNamespaceRequest* msg);
};

const ::containerd::services::namespaces::v1::Namespace&
CreateNamespaceRequest::_Internal::namespace_(const CreateNamespaceRequest* msg) {
  return *msg->namespace__;
}
CreateNamespaceRequest::CreateNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.CreateNamespaceRequest)
}
CreateNamespaceRequest::CreateNamespaceRequest(const CreateNamespaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::containerd::services::namespaces::v1::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.CreateNamespaceRequest)
}

inline void CreateNamespaceRequest::SharedCtor() {
namespace__ = nullptr;
}

CreateNamespaceRequest::~CreateNamespaceRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.CreateNamespaceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateNamespaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
}

void CreateNamespaceRequest::ArenaDtor(void* object) {
  CreateNamespaceRequest* _this = reinterpret_cast< CreateNamespaceRequest* >(object);
  (void)_this;
}
void CreateNamespaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNamespaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateNamespaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.CreateNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNamespaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateNamespaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.CreateNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.CreateNamespaceRequest)
  return target;
}

size_t CreateNamespaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.CreateNamespaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNamespaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateNamespaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNamespaceRequest::GetClassData() const { return &_class_data_; }

void CreateNamespaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateNamespaceRequest *>(to)->MergeFrom(
      static_cast<const CreateNamespaceRequest &>(from));
}


void CreateNamespaceRequest::MergeFrom(const CreateNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.CreateNamespaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::containerd::services::namespaces::v1::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNamespaceRequest::CopyFrom(const CreateNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.CreateNamespaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNamespaceRequest::IsInitialized() const {
  return true;
}

void CreateNamespaceRequest::InternalSwap(CreateNamespaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(namespace__, other->namespace__);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNamespaceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[6]);
}

// ===================================================================

class CreateNamespaceResponse::_Internal {
 public:
  static const ::containerd::services::namespaces::v1::Namespace& namespace_(const CreateNamespaceResponse* msg);
};

const ::containerd::services::namespaces::v1::Namespace&
CreateNamespaceResponse::_Internal::namespace_(const CreateNamespaceResponse* msg) {
  return *msg->namespace__;
}
CreateNamespaceResponse::CreateNamespaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.CreateNamespaceResponse)
}
CreateNamespaceResponse::CreateNamespaceResponse(const CreateNamespaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::containerd::services::namespaces::v1::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.CreateNamespaceResponse)
}

inline void CreateNamespaceResponse::SharedCtor() {
namespace__ = nullptr;
}

CreateNamespaceResponse::~CreateNamespaceResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.CreateNamespaceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateNamespaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
}

void CreateNamespaceResponse::ArenaDtor(void* object) {
  CreateNamespaceResponse* _this = reinterpret_cast< CreateNamespaceResponse* >(object);
  (void)_this;
}
void CreateNamespaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNamespaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateNamespaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.CreateNamespaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNamespaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateNamespaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.CreateNamespaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.CreateNamespaceResponse)
  return target;
}

size_t CreateNamespaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.CreateNamespaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNamespaceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateNamespaceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNamespaceResponse::GetClassData() const { return &_class_data_; }

void CreateNamespaceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateNamespaceResponse *>(to)->MergeFrom(
      static_cast<const CreateNamespaceResponse &>(from));
}


void CreateNamespaceResponse::MergeFrom(const CreateNamespaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.CreateNamespaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::containerd::services::namespaces::v1::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNamespaceResponse::CopyFrom(const CreateNamespaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.CreateNamespaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNamespaceResponse::IsInitialized() const {
  return true;
}

void CreateNamespaceResponse::InternalSwap(CreateNamespaceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(namespace__, other->namespace__);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNamespaceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[7]);
}

// ===================================================================

class UpdateNamespaceRequest::_Internal {
 public:
  static const ::containerd::services::namespaces::v1::Namespace& namespace_(const UpdateNamespaceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateNamespaceRequest* msg);
};

const ::containerd::services::namespaces::v1::Namespace&
UpdateNamespaceRequest::_Internal::namespace_(const UpdateNamespaceRequest* msg) {
  return *msg->namespace__;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateNamespaceRequest::_Internal::update_mask(const UpdateNamespaceRequest* msg) {
  return *msg->update_mask_;
}
void UpdateNamespaceRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateNamespaceRequest::UpdateNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.UpdateNamespaceRequest)
}
UpdateNamespaceRequest::UpdateNamespaceRequest(const UpdateNamespaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::containerd::services::namespaces::v1::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.UpdateNamespaceRequest)
}

inline void UpdateNamespaceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(update_mask_));
}

UpdateNamespaceRequest::~UpdateNamespaceRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateNamespaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateNamespaceRequest::ArenaDtor(void* object) {
  UpdateNamespaceRequest* _this = reinterpret_cast< UpdateNamespaceRequest* >(object);
  (void)_this;
}
void UpdateNamespaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNamespaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateNamespaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNamespaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateNamespaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  return target;
}

size_t UpdateNamespaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateNamespaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateNamespaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateNamespaceRequest::GetClassData() const { return &_class_data_; }

void UpdateNamespaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateNamespaceRequest *>(to)->MergeFrom(
      static_cast<const UpdateNamespaceRequest &>(from));
}


void UpdateNamespaceRequest::MergeFrom(const UpdateNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::containerd::services::namespaces::v1::Namespace::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateNamespaceRequest::CopyFrom(const UpdateNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.UpdateNamespaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNamespaceRequest::IsInitialized() const {
  return true;
}

void UpdateNamespaceRequest::InternalSwap(UpdateNamespaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateNamespaceRequest, update_mask_)
      + sizeof(UpdateNamespaceRequest::update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateNamespaceRequest, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNamespaceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[8]);
}

// ===================================================================

class UpdateNamespaceResponse::_Internal {
 public:
  static const ::containerd::services::namespaces::v1::Namespace& namespace_(const UpdateNamespaceResponse* msg);
};

const ::containerd::services::namespaces::v1::Namespace&
UpdateNamespaceResponse::_Internal::namespace_(const UpdateNamespaceResponse* msg) {
  return *msg->namespace__;
}
UpdateNamespaceResponse::UpdateNamespaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.UpdateNamespaceResponse)
}
UpdateNamespaceResponse::UpdateNamespaceResponse(const UpdateNamespaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::containerd::services::namespaces::v1::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.UpdateNamespaceResponse)
}

inline void UpdateNamespaceResponse::SharedCtor() {
namespace__ = nullptr;
}

UpdateNamespaceResponse::~UpdateNamespaceResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateNamespaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
}

void UpdateNamespaceResponse::ArenaDtor(void* object) {
  UpdateNamespaceResponse* _this = reinterpret_cast< UpdateNamespaceResponse* >(object);
  (void)_this;
}
void UpdateNamespaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNamespaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateNamespaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNamespaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateNamespaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  return target;
}

size_t UpdateNamespaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.namespaces.v1.Namespace namespace = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateNamespaceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateNamespaceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateNamespaceResponse::GetClassData() const { return &_class_data_; }

void UpdateNamespaceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateNamespaceResponse *>(to)->MergeFrom(
      static_cast<const UpdateNamespaceResponse &>(from));
}


void UpdateNamespaceResponse::MergeFrom(const UpdateNamespaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::containerd::services::namespaces::v1::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateNamespaceResponse::CopyFrom(const UpdateNamespaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.UpdateNamespaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNamespaceResponse::IsInitialized() const {
  return true;
}

void UpdateNamespaceResponse::InternalSwap(UpdateNamespaceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(namespace__, other->namespace__);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNamespaceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[9]);
}

// ===================================================================

class DeleteNamespaceRequest::_Internal {
 public:
};

DeleteNamespaceRequest::DeleteNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.namespaces.v1.DeleteNamespaceRequest)
}
DeleteNamespaceRequest::DeleteNamespaceRequest(const DeleteNamespaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.namespaces.v1.DeleteNamespaceRequest)
}

inline void DeleteNamespaceRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteNamespaceRequest::~DeleteNamespaceRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteNamespaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteNamespaceRequest::ArenaDtor(void* object) {
  DeleteNamespaceRequest* _this = reinterpret_cast< DeleteNamespaceRequest* >(object);
  (void)_this;
}
void DeleteNamespaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteNamespaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteNamespaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteNamespaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.namespaces.v1.DeleteNamespaceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteNamespaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.namespaces.v1.DeleteNamespaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  return target;
}

size_t DeleteNamespaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteNamespaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteNamespaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteNamespaceRequest::GetClassData() const { return &_class_data_; }

void DeleteNamespaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteNamespaceRequest *>(to)->MergeFrom(
      static_cast<const DeleteNamespaceRequest &>(from));
}


void DeleteNamespaceRequest::MergeFrom(const DeleteNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteNamespaceRequest::CopyFrom(const DeleteNamespaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.namespaces.v1.DeleteNamespaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNamespaceRequest::IsInitialized() const {
  return true;
}

void DeleteNamespaceRequest::InternalSwap(DeleteNamespaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteNamespaceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namespace_2eproto_getter, &descriptor_table_namespace_2eproto_once,
      file_level_metadata_namespace_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace namespaces
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::Namespace_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::Namespace* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::Namespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::Namespace >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::GetNamespaceRequest* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::GetNamespaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::GetNamespaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::GetNamespaceResponse* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::GetNamespaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::GetNamespaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::ListNamespacesRequest* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::ListNamespacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::ListNamespacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::ListNamespacesResponse* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::ListNamespacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::ListNamespacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::CreateNamespaceRequest* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::CreateNamespaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::CreateNamespaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::CreateNamespaceResponse* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::CreateNamespaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::CreateNamespaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::UpdateNamespaceRequest* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::UpdateNamespaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::UpdateNamespaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::UpdateNamespaceResponse* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::UpdateNamespaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::UpdateNamespaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::namespaces::v1::DeleteNamespaceRequest* Arena::CreateMaybeMessage< ::containerd::services::namespaces::v1::DeleteNamespaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::namespaces::v1::DeleteNamespaceRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
