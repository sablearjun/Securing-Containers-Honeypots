sudo: required
dist: bionic

language: cpp

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - lcov
            - libssl-dev
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
        - CMAKE_CXX_STANDARD=11
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - lcov
            - libssl-dev
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
        - CMAKE_CXX_STANDARD=14
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - lcov
            - libssl-dev
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
        - CMAKE_CXX_STANDARD=17

    - os: linux
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            - ubuntu-toolchain-r-test
          packages:
            - llvm-dev
            - libclang-dev
            - clang
            - lcov
            - libssl-dev
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_CXX_STANDARD=11
    - os: linux
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            - ubuntu-toolchain-r-test
          packages:
            - llvm-dev
            - libclang-dev
            - clang
            - lcov
            - libssl-dev
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_CXX_STANDARD=14
    - os: linux
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            - ubuntu-toolchain-r-test
          packages:
            - llvm-dev
            - libclang-dev
            - clang
            - lcov
            - libssl-dev
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_CXX_STANDARD=17

    - os: osx
      osx_image: xcode12.2
      env:
        - CMAKE_CXX_STANDARD=11
    - os: osx
      osx_image: xcode12.2
      env:
        - CMAKE_CXX_STANDARD=14
    - os: osx
      osx_image: xcode12.2
      env:
        - CMAKE_CXX_STANDARD=17

git:
  depth: 1

before_install:
  - eval "${MATRIX_EVAL}"
  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"
  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - CMAKE_VERSION=3.15.4
  - |
    if [ ${TRAVIS_OS_NAME} == linux ]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      sudo apt-get update
      git clone https://github.com/open-source-parsers/jsoncpp.git ~/jsoncpp
      export BLD_PATH=`pwd`; cd ~/jsoncpp; mkdir build && cd build
      cmake -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} -DJSONCPP_WITH_TESTS=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release ..
      make && sudo make install && cd $BLD_PATH
    else
      brew update
      brew install openssl --force
      brew install jsoncpp lcov
      brew install cmake || brew upgrade cmake
    fi
before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - git submodule update --init --recursive
  - mkdir build-debug && cd build-debug
  - |
      if [ $TRAVIS_OS_NAME == osx ]; then
        cmake -Wno-dev -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} -DCMAKE_BUILD_TYPE=Debug -DJWTPP_WITH_COVERAGE=ON -DJWTPP_WITH_TESTS=ON -DJWTPP_WITH_SHARED_LIBS=ON -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) -DCMAKE_INSTALL_PREFIX=/usr/local ..
      else
        cmake -Wno-dev -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} -DCMAKE_BUILD_TYPE=Debug -DJWTPP_WITH_COVERAGE=ON -DJWTPP_WITH_TESTS=ON -DJWTPP_WITH_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local ..
      fi
  - cd .. && mkdir build-release && cd build-release
  - |
    if [ $TRAVIS_OS_NAME == osx ]; then
      cmake -Wno-dev -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} -DCMAKE_BUILD_TYPE=Release -DJWTPP_WITH_TESTS=ON -DJWTPP_WITH_SHARED_LIBS=ON -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) -DCMAKE_INSTALL_PREFIX=/usr/local ..
    else
      cmake -Wno-dev -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} -DCMAKE_BUILD_TYPE=Release -DJWTPP_WITH_TESTS=ON -DJWTPP_WITH_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local ..
    fi
script:
  - make
  - mkdir -p tests
  - ./jwtpp_test
  - sudo make install
  - cd ../build-debug
  - make
  - mkdir -p tests
  - ./jwtpp_test
after_success:
  # Create lcov report
  - lcov --capture --directory . --output-file coverage.info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
  - lcov --list coverage.info # debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
