// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diff.proto

#include "diff.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace containerd {
namespace services {
namespace diff {
namespace v1 {
constexpr ApplyRequest_PayloadsEntry_DoNotUse::ApplyRequest_PayloadsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ApplyRequest_PayloadsEntry_DoNotUseDefaultTypeInternal {
  constexpr ApplyRequest_PayloadsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyRequest_PayloadsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ApplyRequest_PayloadsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyRequest_PayloadsEntry_DoNotUseDefaultTypeInternal _ApplyRequest_PayloadsEntry_DoNotUse_default_instance_;
constexpr ApplyRequest::ApplyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mounts_()
  , payloads_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , diff_(nullptr){}
struct ApplyRequestDefaultTypeInternal {
  constexpr ApplyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyRequestDefaultTypeInternal() {}
  union {
    ApplyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyRequestDefaultTypeInternal _ApplyRequest_default_instance_;
constexpr ApplyResponse::ApplyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applied_(nullptr){}
struct ApplyResponseDefaultTypeInternal {
  constexpr ApplyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyResponseDefaultTypeInternal() {}
  union {
    ApplyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyResponseDefaultTypeInternal _ApplyResponse_default_instance_;
constexpr DiffRequest_LabelsEntry_DoNotUse::DiffRequest_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DiffRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr DiffRequest_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiffRequest_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DiffRequest_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiffRequest_LabelsEntry_DoNotUseDefaultTypeInternal _DiffRequest_LabelsEntry_DoNotUse_default_instance_;
constexpr DiffRequest::DiffRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_()
  , right_()
  , labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , media_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DiffRequestDefaultTypeInternal {
  constexpr DiffRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiffRequestDefaultTypeInternal() {}
  union {
    DiffRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiffRequestDefaultTypeInternal _DiffRequest_default_instance_;
constexpr DiffResponse::DiffResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diff_(nullptr){}
struct DiffResponseDefaultTypeInternal {
  constexpr DiffResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiffResponseDefaultTypeInternal() {}
  union {
    DiffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiffResponseDefaultTypeInternal _DiffResponse_default_instance_;
}  // namespace v1
}  // namespace diff
}  // namespace services
}  // namespace containerd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_diff_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_diff_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_diff_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_diff_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest, diff_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest, mounts_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyRequest, payloads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::ApplyResponse, applied_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest, left_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest, right_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest, media_type_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest, ref_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffRequest, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::diff::v1::DiffResponse, diff_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse)},
  { 9, -1, sizeof(::containerd::services::diff::v1::ApplyRequest)},
  { 17, -1, sizeof(::containerd::services::diff::v1::ApplyResponse)},
  { 23, 30, sizeof(::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse)},
  { 32, -1, sizeof(::containerd::services::diff::v1::DiffRequest)},
  { 42, -1, sizeof(::containerd::services::diff::v1::DiffResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::diff::v1::_ApplyRequest_PayloadsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::diff::v1::_ApplyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::diff::v1::_ApplyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::diff::v1::_DiffRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::diff::v1::_DiffRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::diff::v1::_DiffResponse_default_instance_),
};

const char descriptor_table_protodef_diff_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndiff.proto\022\033containerd.services.diff.v"
  "1\032\ngogo.proto\032\031google/protobuf/any.proto"
  "\032\013mount.proto\032\020descriptor.proto\"\365\001\n\014Appl"
  "yRequest\022*\n\004diff\030\001 \001(\0132\034.containerd.type"
  "s.Descriptor\022\'\n\006mounts\030\002 \003(\0132\027.container"
  "d.types.Mount\022I\n\010payloads\030\003 \003(\01327.contai"
  "nerd.services.diff.v1.ApplyRequest.Paylo"
  "adsEntry\032E\n\rPayloadsEntry\022\013\n\003key\030\001 \001(\t\022#"
  "\n\005value\030\002 \001(\0132\024.google.protobuf.Any:\0028\001\""
  ">\n\rApplyResponse\022-\n\007applied\030\001 \001(\0132\034.cont"
  "ainerd.types.Descriptor\"\362\001\n\013DiffRequest\022"
  "%\n\004left\030\001 \003(\0132\027.containerd.types.Mount\022&"
  "\n\005right\030\002 \003(\0132\027.containerd.types.Mount\022\022"
  "\n\nmedia_type\030\003 \001(\t\022\013\n\003ref\030\004 \001(\t\022D\n\006label"
  "s\030\005 \003(\01324.containerd.services.diff.v1.Di"
  "ffRequest.LabelsEntry\032-\n\013LabelsEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\":\n\014DiffResp"
  "onse\022*\n\004diff\030\003 \001(\0132\034.containerd.types.De"
  "scriptor2\303\001\n\004Diff\022^\n\005Apply\022).containerd."
  "services.diff.v1.ApplyRequest\032*.containe"
  "rd.services.diff.v1.ApplyResponse\022[\n\004Dif"
  "f\022(.containerd.services.diff.v1.DiffRequ"
  "est\032).containerd.services.diff.v1.DiffRe"
  "sponseB<Z:github.com/containerd/containe"
  "rd/api/services/diff/v1;diffb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_diff_2eproto_deps[4] = {
  &::descriptor_table_descriptor_2eproto,
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_mount_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_diff_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diff_2eproto = {
  false, false, 996, descriptor_table_protodef_diff_2eproto, "diff.proto", 
  &descriptor_table_diff_2eproto_once, descriptor_table_diff_2eproto_deps, 4, 6,
  schemas, file_default_instances, TableStruct_diff_2eproto::offsets,
  file_level_metadata_diff_2eproto, file_level_enum_descriptors_diff_2eproto, file_level_service_descriptors_diff_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_diff_2eproto_getter() {
  return &descriptor_table_diff_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_diff_2eproto(&descriptor_table_diff_2eproto);
namespace containerd {
namespace services {
namespace diff {
namespace v1 {

// ===================================================================

ApplyRequest_PayloadsEntry_DoNotUse::ApplyRequest_PayloadsEntry_DoNotUse() {}
ApplyRequest_PayloadsEntry_DoNotUse::ApplyRequest_PayloadsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ApplyRequest_PayloadsEntry_DoNotUse::MergeFrom(const ApplyRequest_PayloadsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ApplyRequest_PayloadsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diff_2eproto_getter, &descriptor_table_diff_2eproto_once,
      file_level_metadata_diff_2eproto[0]);
}

// ===================================================================

class ApplyRequest::_Internal {
 public:
  static const ::containerd::types::Descriptor& diff(const ApplyRequest* msg);
};

const ::containerd::types::Descriptor&
ApplyRequest::_Internal::diff(const ApplyRequest* msg) {
  return *msg->diff_;
}
void ApplyRequest::clear_diff() {
  if (GetArenaForAllocation() == nullptr && diff_ != nullptr) {
    delete diff_;
  }
  diff_ = nullptr;
}
void ApplyRequest::clear_mounts() {
  mounts_.Clear();
}
void ApplyRequest::clear_payloads() {
  payloads_.Clear();
}
ApplyRequest::ApplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mounts_(arena),
  payloads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.diff.v1.ApplyRequest)
}
ApplyRequest::ApplyRequest(const ApplyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mounts_(from.mounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payloads_.MergeFrom(from.payloads_);
  if (from._internal_has_diff()) {
    diff_ = new ::containerd::types::Descriptor(*from.diff_);
  } else {
    diff_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.diff.v1.ApplyRequest)
}

inline void ApplyRequest::SharedCtor() {
diff_ = nullptr;
}

ApplyRequest::~ApplyRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.diff.v1.ApplyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete diff_;
}

void ApplyRequest::ArenaDtor(void* object) {
  ApplyRequest* _this = reinterpret_cast< ApplyRequest* >(object);
  (void)_this;
  _this->payloads_. ~MapField();
}
inline void ApplyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ApplyRequest::ArenaDtor);
  }
}
void ApplyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.diff.v1.ApplyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mounts_.Clear();
  payloads_.Clear();
  if (GetArenaForAllocation() == nullptr && diff_ != nullptr) {
    delete diff_;
  }
  diff_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.types.Descriptor diff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .containerd.types.Mount mounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> payloads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&payloads_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.diff.v1.ApplyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.types.Descriptor diff = 1;
  if (this->_internal_has_diff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::diff(this), target, stream);
  }

  // repeated .containerd.types.Mount mounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mounts(i), target, stream);
  }

  // map<string, .google.protobuf.Any> payloads = 3;
  if (!this->_internal_payloads().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.diff.v1.ApplyRequest.PayloadsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_payloads().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_payloads().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_payloads().begin();
          it != this->_internal_payloads().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ApplyRequest_PayloadsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_payloads().begin();
          it != this->_internal_payloads().end(); ++it) {
        target = ApplyRequest_PayloadsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.diff.v1.ApplyRequest)
  return target;
}

size_t ApplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.diff.v1.ApplyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.types.Mount mounts = 2;
  total_size += 1UL * this->_internal_mounts_size();
  for (const auto& msg : this->mounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .google.protobuf.Any> payloads = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_payloads_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_payloads().begin();
      it != this->_internal_payloads().end(); ++it) {
    total_size += ApplyRequest_PayloadsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .containerd.types.Descriptor diff = 1;
  if (this->_internal_has_diff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diff_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyRequest::GetClassData() const { return &_class_data_; }

void ApplyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApplyRequest *>(to)->MergeFrom(
      static_cast<const ApplyRequest &>(from));
}


void ApplyRequest::MergeFrom(const ApplyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.diff.v1.ApplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mounts_.MergeFrom(from.mounts_);
  payloads_.MergeFrom(from.payloads_);
  if (from._internal_has_diff()) {
    _internal_mutable_diff()->::containerd::types::Descriptor::MergeFrom(from._internal_diff());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyRequest::CopyFrom(const ApplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.diff.v1.ApplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyRequest::IsInitialized() const {
  return true;
}

void ApplyRequest::InternalSwap(ApplyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mounts_.InternalSwap(&other->mounts_);
  payloads_.InternalSwap(&other->payloads_);
  swap(diff_, other->diff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diff_2eproto_getter, &descriptor_table_diff_2eproto_once,
      file_level_metadata_diff_2eproto[1]);
}

// ===================================================================

class ApplyResponse::_Internal {
 public:
  static const ::containerd::types::Descriptor& applied(const ApplyResponse* msg);
};

const ::containerd::types::Descriptor&
ApplyResponse::_Internal::applied(const ApplyResponse* msg) {
  return *msg->applied_;
}
void ApplyResponse::clear_applied() {
  if (GetArenaForAllocation() == nullptr && applied_ != nullptr) {
    delete applied_;
  }
  applied_ = nullptr;
}
ApplyResponse::ApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.diff.v1.ApplyResponse)
}
ApplyResponse::ApplyResponse(const ApplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applied()) {
    applied_ = new ::containerd::types::Descriptor(*from.applied_);
  } else {
    applied_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.diff.v1.ApplyResponse)
}

inline void ApplyResponse::SharedCtor() {
applied_ = nullptr;
}

ApplyResponse::~ApplyResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.diff.v1.ApplyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete applied_;
}

void ApplyResponse::ArenaDtor(void* object) {
  ApplyResponse* _this = reinterpret_cast< ApplyResponse* >(object);
  (void)_this;
}
void ApplyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.diff.v1.ApplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && applied_ != nullptr) {
    delete applied_;
  }
  applied_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.types.Descriptor applied = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applied(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.diff.v1.ApplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.types.Descriptor applied = 1;
  if (this->_internal_has_applied()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applied(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.diff.v1.ApplyResponse)
  return target;
}

size_t ApplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.diff.v1.ApplyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.types.Descriptor applied = 1;
  if (this->_internal_has_applied()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *applied_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyResponse::GetClassData() const { return &_class_data_; }

void ApplyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApplyResponse *>(to)->MergeFrom(
      static_cast<const ApplyResponse &>(from));
}


void ApplyResponse::MergeFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.diff.v1.ApplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_applied()) {
    _internal_mutable_applied()->::containerd::types::Descriptor::MergeFrom(from._internal_applied());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyResponse::CopyFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.diff.v1.ApplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyResponse::IsInitialized() const {
  return true;
}

void ApplyResponse::InternalSwap(ApplyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(applied_, other->applied_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diff_2eproto_getter, &descriptor_table_diff_2eproto_once,
      file_level_metadata_diff_2eproto[2]);
}

// ===================================================================

DiffRequest_LabelsEntry_DoNotUse::DiffRequest_LabelsEntry_DoNotUse() {}
DiffRequest_LabelsEntry_DoNotUse::DiffRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DiffRequest_LabelsEntry_DoNotUse::MergeFrom(const DiffRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DiffRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diff_2eproto_getter, &descriptor_table_diff_2eproto_once,
      file_level_metadata_diff_2eproto[3]);
}

// ===================================================================

class DiffRequest::_Internal {
 public:
};

void DiffRequest::clear_left() {
  left_.Clear();
}
void DiffRequest::clear_right() {
  right_.Clear();
}
DiffRequest::DiffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  left_(arena),
  right_(arena),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.diff.v1.DiffRequest)
}
DiffRequest::DiffRequest(const DiffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      left_(from.left_),
      right_(from.right_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media_type().empty()) {
    media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_type(), 
      GetArenaForAllocation());
  }
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref().empty()) {
    ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.diff.v1.DiffRequest)
}

inline void DiffRequest::SharedCtor() {
media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiffRequest::~DiffRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.diff.v1.DiffRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiffRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  media_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiffRequest::ArenaDtor(void* object) {
  DiffRequest* _this = reinterpret_cast< DiffRequest* >(object);
  (void)_this;
  _this->labels_. ~MapField();
}
inline void DiffRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DiffRequest::ArenaDtor);
  }
}
void DiffRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.diff.v1.DiffRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_.Clear();
  right_.Clear();
  labels_.Clear();
  media_type_.ClearToEmpty();
  ref_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiffRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.types.Mount left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .containerd.types.Mount right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string media_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_media_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.diff.v1.DiffRequest.media_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.diff.v1.DiffRequest.ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.diff.v1.DiffRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.types.Mount left = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_left(i), target, stream);
  }

  // repeated .containerd.types.Mount right = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_right(i), target, stream);
  }

  // string media_type = 3;
  if (!this->_internal_media_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_type().data(), static_cast<int>(this->_internal_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.diff.v1.DiffRequest.media_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_media_type(), target);
  }

  // string ref = 4;
  if (!this->_internal_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ref().data(), static_cast<int>(this->_internal_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.diff.v1.DiffRequest.ref");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ref(), target);
  }

  // map<string, string> labels = 5;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.diff.v1.DiffRequest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.diff.v1.DiffRequest.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DiffRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = DiffRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.diff.v1.DiffRequest)
  return target;
}

size_t DiffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.diff.v1.DiffRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.types.Mount left = 1;
  total_size += 1UL * this->_internal_left_size();
  for (const auto& msg : this->left_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .containerd.types.Mount right = 2;
  total_size += 1UL * this->_internal_right_size();
  for (const auto& msg : this->right_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> labels = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += DiffRequest_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string media_type = 3;
  if (!this->_internal_media_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_type());
  }

  // string ref = 4;
  if (!this->_internal_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiffRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiffRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiffRequest::GetClassData() const { return &_class_data_; }

void DiffRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DiffRequest *>(to)->MergeFrom(
      static_cast<const DiffRequest &>(from));
}


void DiffRequest::MergeFrom(const DiffRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.diff.v1.DiffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_.MergeFrom(from.left_);
  right_.MergeFrom(from.right_);
  labels_.MergeFrom(from.labels_);
  if (!from._internal_media_type().empty()) {
    _internal_set_media_type(from._internal_media_type());
  }
  if (!from._internal_ref().empty()) {
    _internal_set_ref(from._internal_ref());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiffRequest::CopyFrom(const DiffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.diff.v1.DiffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffRequest::IsInitialized() const {
  return true;
}

void DiffRequest::InternalSwap(DiffRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  left_.InternalSwap(&other->left_);
  right_.InternalSwap(&other->right_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &media_type_, GetArenaForAllocation(),
      &other->media_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ref_, GetArenaForAllocation(),
      &other->ref_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diff_2eproto_getter, &descriptor_table_diff_2eproto_once,
      file_level_metadata_diff_2eproto[4]);
}

// ===================================================================

class DiffResponse::_Internal {
 public:
  static const ::containerd::types::Descriptor& diff(const DiffResponse* msg);
};

const ::containerd::types::Descriptor&
DiffResponse::_Internal::diff(const DiffResponse* msg) {
  return *msg->diff_;
}
void DiffResponse::clear_diff() {
  if (GetArenaForAllocation() == nullptr && diff_ != nullptr) {
    delete diff_;
  }
  diff_ = nullptr;
}
DiffResponse::DiffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.diff.v1.DiffResponse)
}
DiffResponse::DiffResponse(const DiffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_diff()) {
    diff_ = new ::containerd::types::Descriptor(*from.diff_);
  } else {
    diff_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.diff.v1.DiffResponse)
}

inline void DiffResponse::SharedCtor() {
diff_ = nullptr;
}

DiffResponse::~DiffResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.diff.v1.DiffResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete diff_;
}

void DiffResponse::ArenaDtor(void* object) {
  DiffResponse* _this = reinterpret_cast< DiffResponse* >(object);
  (void)_this;
}
void DiffResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.diff.v1.DiffResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && diff_ != nullptr) {
    delete diff_;
  }
  diff_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiffResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.types.Descriptor diff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.diff.v1.DiffResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.types.Descriptor diff = 3;
  if (this->_internal_has_diff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::diff(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.diff.v1.DiffResponse)
  return target;
}

size_t DiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.diff.v1.DiffResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.types.Descriptor diff = 3;
  if (this->_internal_has_diff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diff_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiffResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiffResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiffResponse::GetClassData() const { return &_class_data_; }

void DiffResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DiffResponse *>(to)->MergeFrom(
      static_cast<const DiffResponse &>(from));
}


void DiffResponse::MergeFrom(const DiffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.diff.v1.DiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_diff()) {
    _internal_mutable_diff()->::containerd::types::Descriptor::MergeFrom(from._internal_diff());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiffResponse::CopyFrom(const DiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.diff.v1.DiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffResponse::IsInitialized() const {
  return true;
}

void DiffResponse::InternalSwap(DiffResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(diff_, other->diff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diff_2eproto_getter, &descriptor_table_diff_2eproto_once,
      file_level_metadata_diff_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace diff
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse* Arena::CreateMaybeMessage< ::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::diff::v1::ApplyRequest_PayloadsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::diff::v1::ApplyRequest* Arena::CreateMaybeMessage< ::containerd::services::diff::v1::ApplyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::diff::v1::ApplyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::diff::v1::ApplyResponse* Arena::CreateMaybeMessage< ::containerd::services::diff::v1::ApplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::diff::v1::ApplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::diff::v1::DiffRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::diff::v1::DiffRequest* Arena::CreateMaybeMessage< ::containerd::services::diff::v1::DiffRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::diff::v1::DiffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::diff::v1::DiffResponse* Arena::CreateMaybeMessage< ::containerd::services::diff::v1::DiffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::diff::v1::DiffResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
