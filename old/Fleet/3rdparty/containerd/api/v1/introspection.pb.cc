// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: introspection.proto

#include "introspection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace containerd {
namespace services {
namespace introspection {
namespace v1 {
constexpr Plugin_ExportsEntry_DoNotUse::Plugin_ExportsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Plugin_ExportsEntry_DoNotUseDefaultTypeInternal {
  constexpr Plugin_ExportsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Plugin_ExportsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Plugin_ExportsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Plugin_ExportsEntry_DoNotUseDefaultTypeInternal _Plugin_ExportsEntry_DoNotUse_default_instance_;
constexpr Plugin::Plugin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requires_()
  , platforms_()
  , exports_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , capabilities_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , init_err_(nullptr){}
struct PluginDefaultTypeInternal {
  constexpr PluginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginDefaultTypeInternal() {}
  union {
    Plugin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginDefaultTypeInternal _Plugin_default_instance_;
constexpr PluginsRequest::PluginsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_(){}
struct PluginsRequestDefaultTypeInternal {
  constexpr PluginsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginsRequestDefaultTypeInternal() {}
  union {
    PluginsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginsRequestDefaultTypeInternal _PluginsRequest_default_instance_;
constexpr PluginsResponse::PluginsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plugins_(){}
struct PluginsResponseDefaultTypeInternal {
  constexpr PluginsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginsResponseDefaultTypeInternal() {}
  union {
    PluginsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginsResponseDefaultTypeInternal _PluginsResponse_default_instance_;
constexpr ServerResponse::ServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServerResponseDefaultTypeInternal {
  constexpr ServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerResponseDefaultTypeInternal() {}
  union {
    ServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace v1
}  // namespace introspection
}  // namespace services
}  // namespace containerd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_introspection_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_introspection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_introspection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_introspection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, type_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, requires_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, platforms_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, exports_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, capabilities_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::Plugin, init_err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::PluginsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::PluginsRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::PluginsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::PluginsResponse, plugins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::ServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::introspection::v1::ServerResponse, uuid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse)},
  { 9, -1, sizeof(::containerd::services::introspection::v1::Plugin)},
  { 21, -1, sizeof(::containerd::services::introspection::v1::PluginsRequest)},
  { 27, -1, sizeof(::containerd::services::introspection::v1::PluginsResponse)},
  { 33, -1, sizeof(::containerd::services::introspection::v1::ServerResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::introspection::v1::_Plugin_ExportsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::introspection::v1::_Plugin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::introspection::v1::_PluginsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::introspection::v1::_PluginsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::introspection::v1::_ServerResponse_default_instance_),
};

const char descriptor_table_protodef_introspection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023introspection.proto\022$containerd.servic"
  "es.introspection.v1\032\016platform.proto\032\014sta"
  "tus.proto\032\033google/protobuf/empty.proto\032\n"
  "gogo.proto\"\241\002\n\006Plugin\022\014\n\004type\030\001 \001(\t\022\n\n\002i"
  "d\030\002 \001(\t\022\020\n\010requires\030\003 \003(\t\0223\n\tplatforms\030\004"
  " \003(\0132\032.containerd.types.PlatformB\004\310\336\037\000\022J"
  "\n\007exports\030\005 \003(\01329.containerd.services.in"
  "trospection.v1.Plugin.ExportsEntry\022\024\n\014ca"
  "pabilities\030\006 \003(\t\022$\n\010init_err\030\007 \001(\0132\022.goo"
  "gle.rpc.Status\032.\n\014ExportsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"!\n\016PluginsRequest"
  "\022\017\n\007filters\030\001 \003(\t\"V\n\017PluginsResponse\022C\n\007"
  "plugins\030\001 \003(\0132,.containerd.services.intr"
  "ospection.v1.PluginB\004\310\336\037\000\"(\n\016ServerRespo"
  "nse\022\026\n\004uuid\030\001 \001(\tB\010\342\336\037\004UUID2\337\001\n\rIntrospe"
  "ction\022v\n\007Plugins\0224.containerd.services.i"
  "ntrospection.v1.PluginsRequest\0325.contain"
  "erd.services.introspection.v1.PluginsRes"
  "ponse\022V\n\006Server\022\026.google.protobuf.Empty\032"
  "4.containerd.services.introspection.v1.S"
  "erverResponseBNZLgithub.com/containerd/c"
  "ontainerd/api/services/introspection/v1;"
  "introspectionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_introspection_2eproto_deps[4] = {
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_platform_2eproto,
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_introspection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_introspection_2eproto = {
  false, false, 901, descriptor_table_protodef_introspection_2eproto, "introspection.proto", 
  &descriptor_table_introspection_2eproto_once, descriptor_table_introspection_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_introspection_2eproto::offsets,
  file_level_metadata_introspection_2eproto, file_level_enum_descriptors_introspection_2eproto, file_level_service_descriptors_introspection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_introspection_2eproto_getter() {
  return &descriptor_table_introspection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_introspection_2eproto(&descriptor_table_introspection_2eproto);
namespace containerd {
namespace services {
namespace introspection {
namespace v1 {

// ===================================================================

Plugin_ExportsEntry_DoNotUse::Plugin_ExportsEntry_DoNotUse() {}
Plugin_ExportsEntry_DoNotUse::Plugin_ExportsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Plugin_ExportsEntry_DoNotUse::MergeFrom(const Plugin_ExportsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Plugin_ExportsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_introspection_2eproto_getter, &descriptor_table_introspection_2eproto_once,
      file_level_metadata_introspection_2eproto[0]);
}

// ===================================================================

class Plugin::_Internal {
 public:
  static const ::google::rpc::Status& init_err(const Plugin* msg);
};

const ::google::rpc::Status&
Plugin::_Internal::init_err(const Plugin* msg) {
  return *msg->init_err_;
}
void Plugin::clear_platforms() {
  platforms_.Clear();
}
void Plugin::clear_init_err() {
  if (GetArenaForAllocation() == nullptr && init_err_ != nullptr) {
    delete init_err_;
  }
  init_err_ = nullptr;
}
Plugin::Plugin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requires_(arena),
  platforms_(arena),
  exports_(arena),
  capabilities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.introspection.v1.Plugin)
}
Plugin::Plugin(const Plugin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requires_(from.requires_),
      platforms_(from.platforms_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exports_.MergeFrom(from.exports_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_init_err()) {
    init_err_ = new ::google::rpc::Status(*from.init_err_);
  } else {
    init_err_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.introspection.v1.Plugin)
}

inline void Plugin::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
init_err_ = nullptr;
}

Plugin::~Plugin() {
  // @@protoc_insertion_point(destructor:containerd.services.introspection.v1.Plugin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Plugin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete init_err_;
}

void Plugin::ArenaDtor(void* object) {
  Plugin* _this = reinterpret_cast< Plugin* >(object);
  (void)_this;
  _this->exports_. ~MapField();
}
inline void Plugin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Plugin::ArenaDtor);
  }
}
void Plugin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Plugin::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.introspection.v1.Plugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requires_.Clear();
  platforms_.Clear();
  exports_.Clear();
  capabilities_.Clear();
  type_.ClearToEmpty();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && init_err_ != nullptr) {
    delete init_err_;
  }
  init_err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plugin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.introspection.v1.Plugin.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.introspection.v1.Plugin.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string requires = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requires();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.introspection.v1.Plugin.requires"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .containerd.types.Platform platforms = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_platforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> exports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&exports_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string capabilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_capabilities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.introspection.v1.Plugin.capabilities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status init_err = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_err(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plugin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.introspection.v1.Plugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.introspection.v1.Plugin.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.introspection.v1.Plugin.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated string requires = 3;
  for (int i = 0, n = this->_internal_requires_size(); i < n; i++) {
    const auto& s = this->_internal_requires(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.introspection.v1.Plugin.requires");
    target = stream->WriteString(3, s, target);
  }

  // repeated .containerd.types.Platform platforms = 4 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_platforms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_platforms(i), target, stream);
  }

  // map<string, string> exports = 5;
  if (!this->_internal_exports().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.introspection.v1.Plugin.ExportsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.introspection.v1.Plugin.ExportsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_exports().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_exports().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_exports().begin();
          it != this->_internal_exports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Plugin_ExportsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_exports().begin();
          it != this->_internal_exports().end(); ++it) {
        target = Plugin_ExportsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string capabilities = 6;
  for (int i = 0, n = this->_internal_capabilities_size(); i < n; i++) {
    const auto& s = this->_internal_capabilities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.introspection.v1.Plugin.capabilities");
    target = stream->WriteString(6, s, target);
  }

  // .google.rpc.Status init_err = 7;
  if (this->_internal_has_init_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::init_err(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.introspection.v1.Plugin)
  return target;
}

size_t Plugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.introspection.v1.Plugin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requires = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(requires_.size());
  for (int i = 0, n = requires_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      requires_.Get(i));
  }

  // repeated .containerd.types.Platform platforms = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_platforms_size();
  for (const auto& msg : this->platforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> exports = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_exports_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_exports().begin();
      it != this->_internal_exports().end(); ++it) {
    total_size += Plugin_ExportsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string capabilities = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(capabilities_.size());
  for (int i = 0, n = capabilities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      capabilities_.Get(i));
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.rpc.Status init_err = 7;
  if (this->_internal_has_init_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *init_err_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plugin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Plugin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plugin::GetClassData() const { return &_class_data_; }

void Plugin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Plugin *>(to)->MergeFrom(
      static_cast<const Plugin &>(from));
}


void Plugin::MergeFrom(const Plugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.introspection.v1.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requires_.MergeFrom(from.requires_);
  platforms_.MergeFrom(from.platforms_);
  exports_.MergeFrom(from.exports_);
  capabilities_.MergeFrom(from.capabilities_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_init_err()) {
    _internal_mutable_init_err()->::google::rpc::Status::MergeFrom(from._internal_init_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plugin::CopyFrom(const Plugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.introspection.v1.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin::IsInitialized() const {
  return true;
}

void Plugin::InternalSwap(Plugin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requires_.InternalSwap(&other->requires_);
  platforms_.InternalSwap(&other->platforms_);
  exports_.InternalSwap(&other->exports_);
  capabilities_.InternalSwap(&other->capabilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(init_err_, other->init_err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plugin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_introspection_2eproto_getter, &descriptor_table_introspection_2eproto_once,
      file_level_metadata_introspection_2eproto[1]);
}

// ===================================================================

class PluginsRequest::_Internal {
 public:
};

PluginsRequest::PluginsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.introspection.v1.PluginsRequest)
}
PluginsRequest::PluginsRequest(const PluginsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.introspection.v1.PluginsRequest)
}

inline void PluginsRequest::SharedCtor() {
}

PluginsRequest::~PluginsRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.introspection.v1.PluginsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PluginsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PluginsRequest::ArenaDtor(void* object) {
  PluginsRequest* _this = reinterpret_cast< PluginsRequest* >(object);
  (void)_this;
}
void PluginsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.introspection.v1.PluginsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.introspection.v1.PluginsRequest.filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.introspection.v1.PluginsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filters = 1;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    const auto& s = this->_internal_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.introspection.v1.PluginsRequest.filters");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.introspection.v1.PluginsRequest)
  return target;
}

size_t PluginsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.introspection.v1.PluginsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filters = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filters_.size());
  for (int i = 0, n = filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filters_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PluginsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PluginsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PluginsRequest::GetClassData() const { return &_class_data_; }

void PluginsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PluginsRequest *>(to)->MergeFrom(
      static_cast<const PluginsRequest &>(from));
}


void PluginsRequest::MergeFrom(const PluginsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.introspection.v1.PluginsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PluginsRequest::CopyFrom(const PluginsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.introspection.v1.PluginsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginsRequest::IsInitialized() const {
  return true;
}

void PluginsRequest::InternalSwap(PluginsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_introspection_2eproto_getter, &descriptor_table_introspection_2eproto_once,
      file_level_metadata_introspection_2eproto[2]);
}

// ===================================================================

class PluginsResponse::_Internal {
 public:
};

PluginsResponse::PluginsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  plugins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.introspection.v1.PluginsResponse)
}
PluginsResponse::PluginsResponse(const PluginsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      plugins_(from.plugins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.introspection.v1.PluginsResponse)
}

inline void PluginsResponse::SharedCtor() {
}

PluginsResponse::~PluginsResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.introspection.v1.PluginsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PluginsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PluginsResponse::ArenaDtor(void* object) {
  PluginsResponse* _this = reinterpret_cast< PluginsResponse* >(object);
  (void)_this;
}
void PluginsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.introspection.v1.PluginsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugins_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.services.introspection.v1.Plugin plugins = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plugins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.introspection.v1.PluginsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.services.introspection.v1.Plugin plugins = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plugins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_plugins(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.introspection.v1.PluginsResponse)
  return target;
}

size_t PluginsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.introspection.v1.PluginsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.services.introspection.v1.Plugin plugins = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_plugins_size();
  for (const auto& msg : this->plugins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PluginsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PluginsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PluginsResponse::GetClassData() const { return &_class_data_; }

void PluginsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PluginsResponse *>(to)->MergeFrom(
      static_cast<const PluginsResponse &>(from));
}


void PluginsResponse::MergeFrom(const PluginsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.introspection.v1.PluginsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugins_.MergeFrom(from.plugins_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PluginsResponse::CopyFrom(const PluginsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.introspection.v1.PluginsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginsResponse::IsInitialized() const {
  return true;
}

void PluginsResponse::InternalSwap(PluginsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  plugins_.InternalSwap(&other->plugins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_introspection_2eproto_getter, &descriptor_table_introspection_2eproto_once,
      file_level_metadata_introspection_2eproto[3]);
}

// ===================================================================

class ServerResponse::_Internal {
 public:
};

ServerResponse::ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.introspection.v1.ServerResponse)
}
ServerResponse::ServerResponse(const ServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.introspection.v1.ServerResponse)
}

inline void ServerResponse::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.introspection.v1.ServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerResponse::ArenaDtor(void* object) {
  ServerResponse* _this = reinterpret_cast< ServerResponse* >(object);
  (void)_this;
}
void ServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.introspection.v1.ServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1 [(.gogoproto.customname) = "UUID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.introspection.v1.ServerResponse.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.introspection.v1.ServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1 [(.gogoproto.customname) = "UUID"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.introspection.v1.ServerResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.introspection.v1.ServerResponse)
  return target;
}

size_t ServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.introspection.v1.ServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1 [(.gogoproto.customname) = "UUID"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerResponse::GetClassData() const { return &_class_data_; }

void ServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerResponse *>(to)->MergeFrom(
      static_cast<const ServerResponse &>(from));
}


void ServerResponse::MergeFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.introspection.v1.ServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.introspection.v1.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {
  return true;
}

void ServerResponse::InternalSwap(ServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, GetArenaForAllocation(),
      &other->uuid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_introspection_2eproto_getter, &descriptor_table_introspection_2eproto_once,
      file_level_metadata_introspection_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace introspection
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse* Arena::CreateMaybeMessage< ::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::introspection::v1::Plugin_ExportsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::introspection::v1::Plugin* Arena::CreateMaybeMessage< ::containerd::services::introspection::v1::Plugin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::introspection::v1::Plugin >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::introspection::v1::PluginsRequest* Arena::CreateMaybeMessage< ::containerd::services::introspection::v1::PluginsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::introspection::v1::PluginsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::introspection::v1::PluginsResponse* Arena::CreateMaybeMessage< ::containerd::services::introspection::v1::PluginsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::introspection::v1::PluginsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::introspection::v1::ServerResponse* Arena::CreateMaybeMessage< ::containerd::services::introspection::v1::ServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::introspection::v1::ServerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
