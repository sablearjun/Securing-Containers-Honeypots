// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: images.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_images_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_images_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "descriptor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_images_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_images_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_images_2eproto;
namespace containerd {
namespace services {
namespace images {
namespace v1 {
class CreateImageRequest;
struct CreateImageRequestDefaultTypeInternal;
extern CreateImageRequestDefaultTypeInternal _CreateImageRequest_default_instance_;
class CreateImageResponse;
struct CreateImageResponseDefaultTypeInternal;
extern CreateImageResponseDefaultTypeInternal _CreateImageResponse_default_instance_;
class DeleteImageRequest;
struct DeleteImageRequestDefaultTypeInternal;
extern DeleteImageRequestDefaultTypeInternal _DeleteImageRequest_default_instance_;
class GetImageRequest;
struct GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
class GetImageResponse;
struct GetImageResponseDefaultTypeInternal;
extern GetImageResponseDefaultTypeInternal _GetImageResponse_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Image_LabelsEntry_DoNotUse;
struct Image_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Image_LabelsEntry_DoNotUseDefaultTypeInternal _Image_LabelsEntry_DoNotUse_default_instance_;
class ListImagesRequest;
struct ListImagesRequestDefaultTypeInternal;
extern ListImagesRequestDefaultTypeInternal _ListImagesRequest_default_instance_;
class ListImagesResponse;
struct ListImagesResponseDefaultTypeInternal;
extern ListImagesResponseDefaultTypeInternal _ListImagesResponse_default_instance_;
class UpdateImageRequest;
struct UpdateImageRequestDefaultTypeInternal;
extern UpdateImageRequestDefaultTypeInternal _UpdateImageRequest_default_instance_;
class UpdateImageResponse;
struct UpdateImageResponseDefaultTypeInternal;
extern UpdateImageResponseDefaultTypeInternal _UpdateImageResponse_default_instance_;
}  // namespace v1
}  // namespace images
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::services::images::v1::CreateImageRequest* Arena::CreateMaybeMessage<::containerd::services::images::v1::CreateImageRequest>(Arena*);
template<> ::containerd::services::images::v1::CreateImageResponse* Arena::CreateMaybeMessage<::containerd::services::images::v1::CreateImageResponse>(Arena*);
template<> ::containerd::services::images::v1::DeleteImageRequest* Arena::CreateMaybeMessage<::containerd::services::images::v1::DeleteImageRequest>(Arena*);
template<> ::containerd::services::images::v1::GetImageRequest* Arena::CreateMaybeMessage<::containerd::services::images::v1::GetImageRequest>(Arena*);
template<> ::containerd::services::images::v1::GetImageResponse* Arena::CreateMaybeMessage<::containerd::services::images::v1::GetImageResponse>(Arena*);
template<> ::containerd::services::images::v1::Image* Arena::CreateMaybeMessage<::containerd::services::images::v1::Image>(Arena*);
template<> ::containerd::services::images::v1::Image_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::services::images::v1::Image_LabelsEntry_DoNotUse>(Arena*);
template<> ::containerd::services::images::v1::ListImagesRequest* Arena::CreateMaybeMessage<::containerd::services::images::v1::ListImagesRequest>(Arena*);
template<> ::containerd::services::images::v1::ListImagesResponse* Arena::CreateMaybeMessage<::containerd::services::images::v1::ListImagesResponse>(Arena*);
template<> ::containerd::services::images::v1::UpdateImageRequest* Arena::CreateMaybeMessage<::containerd::services::images::v1::UpdateImageRequest>(Arena*);
template<> ::containerd::services::images::v1::UpdateImageResponse* Arena::CreateMaybeMessage<::containerd::services::images::v1::UpdateImageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace services {
namespace images {
namespace v1 {

// ===================================================================

class Image_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Image_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Image_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Image_LabelsEntry_DoNotUse();
  explicit constexpr Image_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Image_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Image_LabelsEntry_DoNotUse& other);
  static const Image_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Image_LabelsEntry_DoNotUse*>(&_Image_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.images.v1.Image.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.services.images.v1.Image.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit constexpr Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return new Image();
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Image& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kNameFieldNumber = 1,
    kTargetFieldNumber = 3,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .containerd.types.Descriptor target = 3 [(.gogoproto.nullable) = false];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::containerd::types::Descriptor& target() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::types::Descriptor* release_target();
  ::containerd::types::Descriptor* mutable_target();
  void set_allocated_target(::containerd::types::Descriptor* target);
  private:
  const ::containerd::types::Descriptor& _internal_target() const;
  ::containerd::types::Descriptor* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::containerd::types::Descriptor* target);
  ::containerd::types::Descriptor* unsafe_arena_release_target();

  // .google.protobuf.Timestamp created_at = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 8 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Image_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::containerd::types::Descriptor* target_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class GetImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.GetImageRequest) */ {
 public:
  inline GetImageRequest() : GetImageRequest(nullptr) {}
  ~GetImageRequest() override;
  explicit constexpr GetImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImageRequest(const GetImageRequest& from);
  GetImageRequest(GetImageRequest&& from) noexcept
    : GetImageRequest() {
    *this = ::std::move(from);
  }

  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
               &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetImageRequest& a, GetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageRequest* New() const final {
    return new GetImageRequest();
  }

  GetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.GetImageRequest";
  }
  protected:
  explicit GetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.GetImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class GetImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.GetImageResponse) */ {
 public:
  inline GetImageResponse() : GetImageResponse(nullptr) {}
  ~GetImageResponse() override;
  explicit constexpr GetImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImageResponse(const GetImageResponse& from);
  GetImageResponse(GetImageResponse&& from) noexcept
    : GetImageResponse() {
    *this = ::std::move(from);
  }

  inline GetImageResponse& operator=(const GetImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageResponse& operator=(GetImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageResponse* internal_default_instance() {
    return reinterpret_cast<const GetImageResponse*>(
               &_GetImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetImageResponse& a, GetImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageResponse* New() const final {
    return new GetImageResponse();
  }

  GetImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.GetImageResponse";
  }
  protected:
  explicit GetImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .containerd.services.images.v1.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::containerd::services::images::v1::Image& image() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::images::v1::Image* release_image();
  ::containerd::services::images::v1::Image* mutable_image();
  void set_allocated_image(::containerd::services::images::v1::Image* image);
  private:
  const ::containerd::services::images::v1::Image& _internal_image() const;
  ::containerd::services::images::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::containerd::services::images::v1::Image* image);
  ::containerd::services::images::v1::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.GetImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::images::v1::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class CreateImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.CreateImageRequest) */ {
 public:
  inline CreateImageRequest() : CreateImageRequest(nullptr) {}
  ~CreateImageRequest() override;
  explicit constexpr CreateImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateImageRequest(const CreateImageRequest& from);
  CreateImageRequest(CreateImageRequest&& from) noexcept
    : CreateImageRequest() {
    *this = ::std::move(from);
  }

  inline CreateImageRequest& operator=(const CreateImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateImageRequest& operator=(CreateImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateImageRequest* internal_default_instance() {
    return reinterpret_cast<const CreateImageRequest*>(
               &_CreateImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateImageRequest& a, CreateImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateImageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateImageRequest* New() const final {
    return new CreateImageRequest();
  }

  CreateImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.CreateImageRequest";
  }
  protected:
  explicit CreateImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::containerd::services::images::v1::Image& image() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::images::v1::Image* release_image();
  ::containerd::services::images::v1::Image* mutable_image();
  void set_allocated_image(::containerd::services::images::v1::Image* image);
  private:
  const ::containerd::services::images::v1::Image& _internal_image() const;
  ::containerd::services::images::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::containerd::services::images::v1::Image* image);
  ::containerd::services::images::v1::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.CreateImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::images::v1::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class CreateImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.CreateImageResponse) */ {
 public:
  inline CreateImageResponse() : CreateImageResponse(nullptr) {}
  ~CreateImageResponse() override;
  explicit constexpr CreateImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateImageResponse(const CreateImageResponse& from);
  CreateImageResponse(CreateImageResponse&& from) noexcept
    : CreateImageResponse() {
    *this = ::std::move(from);
  }

  inline CreateImageResponse& operator=(const CreateImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateImageResponse& operator=(CreateImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateImageResponse* internal_default_instance() {
    return reinterpret_cast<const CreateImageResponse*>(
               &_CreateImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateImageResponse& a, CreateImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateImageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateImageResponse* New() const final {
    return new CreateImageResponse();
  }

  CreateImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.CreateImageResponse";
  }
  protected:
  explicit CreateImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::containerd::services::images::v1::Image& image() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::images::v1::Image* release_image();
  ::containerd::services::images::v1::Image* mutable_image();
  void set_allocated_image(::containerd::services::images::v1::Image* image);
  private:
  const ::containerd::services::images::v1::Image& _internal_image() const;
  ::containerd::services::images::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::containerd::services::images::v1::Image* image);
  ::containerd::services::images::v1::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.CreateImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::images::v1::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class UpdateImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.UpdateImageRequest) */ {
 public:
  inline UpdateImageRequest() : UpdateImageRequest(nullptr) {}
  ~UpdateImageRequest() override;
  explicit constexpr UpdateImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateImageRequest(const UpdateImageRequest& from);
  UpdateImageRequest(UpdateImageRequest&& from) noexcept
    : UpdateImageRequest() {
    *this = ::std::move(from);
  }

  inline UpdateImageRequest& operator=(const UpdateImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateImageRequest& operator=(UpdateImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateImageRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateImageRequest*>(
               &_UpdateImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateImageRequest& a, UpdateImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateImageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateImageRequest* New() const final {
    return new UpdateImageRequest();
  }

  UpdateImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.UpdateImageRequest";
  }
  protected:
  explicit UpdateImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::containerd::services::images::v1::Image& image() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::images::v1::Image* release_image();
  ::containerd::services::images::v1::Image* mutable_image();
  void set_allocated_image(::containerd::services::images::v1::Image* image);
  private:
  const ::containerd::services::images::v1::Image& _internal_image() const;
  ::containerd::services::images::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::containerd::services::images::v1::Image* image);
  ::containerd::services::images::v1::Image* unsafe_arena_release_image();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.UpdateImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::images::v1::Image* image_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class UpdateImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.UpdateImageResponse) */ {
 public:
  inline UpdateImageResponse() : UpdateImageResponse(nullptr) {}
  ~UpdateImageResponse() override;
  explicit constexpr UpdateImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateImageResponse(const UpdateImageResponse& from);
  UpdateImageResponse(UpdateImageResponse&& from) noexcept
    : UpdateImageResponse() {
    *this = ::std::move(from);
  }

  inline UpdateImageResponse& operator=(const UpdateImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateImageResponse& operator=(UpdateImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateImageResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateImageResponse*>(
               &_UpdateImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateImageResponse& a, UpdateImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateImageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateImageResponse* New() const final {
    return new UpdateImageResponse();
  }

  UpdateImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.UpdateImageResponse";
  }
  protected:
  explicit UpdateImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::containerd::services::images::v1::Image& image() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::services::images::v1::Image* release_image();
  ::containerd::services::images::v1::Image* mutable_image();
  void set_allocated_image(::containerd::services::images::v1::Image* image);
  private:
  const ::containerd::services::images::v1::Image& _internal_image() const;
  ::containerd::services::images::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::containerd::services::images::v1::Image* image);
  ::containerd::services::images::v1::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.UpdateImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::containerd::services::images::v1::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class ListImagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.ListImagesRequest) */ {
 public:
  inline ListImagesRequest() : ListImagesRequest(nullptr) {}
  ~ListImagesRequest() override;
  explicit constexpr ListImagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImagesRequest(const ListImagesRequest& from);
  ListImagesRequest(ListImagesRequest&& from) noexcept
    : ListImagesRequest() {
    *this = ::std::move(from);
  }

  inline ListImagesRequest& operator=(const ListImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesRequest& operator=(ListImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListImagesRequest*>(
               &_ListImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListImagesRequest& a, ListImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListImagesRequest* New() const final {
    return new ListImagesRequest();
  }

  ListImagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListImagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListImagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.ListImagesRequest";
  }
  protected:
  explicit ListImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // repeated string filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  const std::string& filters(int index) const;
  std::string* mutable_filters(int index);
  void set_filters(int index, const std::string& value);
  void set_filters(int index, std::string&& value);
  void set_filters(int index, const char* value);
  void set_filters(int index, const char* value, size_t size);
  std::string* add_filters();
  void add_filters(const std::string& value);
  void add_filters(std::string&& value);
  void add_filters(const char* value);
  void add_filters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filters();
  private:
  const std::string& _internal_filters(int index) const;
  std::string* _internal_add_filters();
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.ListImagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class ListImagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.ListImagesResponse) */ {
 public:
  inline ListImagesResponse() : ListImagesResponse(nullptr) {}
  ~ListImagesResponse() override;
  explicit constexpr ListImagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImagesResponse(const ListImagesResponse& from);
  ListImagesResponse(ListImagesResponse&& from) noexcept
    : ListImagesResponse() {
    *this = ::std::move(from);
  }

  inline ListImagesResponse& operator=(const ListImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesResponse& operator=(ListImagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListImagesResponse*>(
               &_ListImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListImagesResponse& a, ListImagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListImagesResponse* New() const final {
    return new ListImagesResponse();
  }

  ListImagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListImagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListImagesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.ListImagesResponse";
  }
  protected:
  explicit ListImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
  };
  // repeated .containerd.services.images.v1.Image images = 1 [(.gogoproto.nullable) = false];
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::containerd::services::images::v1::Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::images::v1::Image >*
      mutable_images();
  private:
  const ::containerd::services::images::v1::Image& _internal_images(int index) const;
  ::containerd::services::images::v1::Image* _internal_add_images();
  public:
  const ::containerd::services::images::v1::Image& images(int index) const;
  ::containerd::services::images::v1::Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::images::v1::Image >&
      images() const;

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.ListImagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::images::v1::Image > images_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class DeleteImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.services.images.v1.DeleteImageRequest) */ {
 public:
  inline DeleteImageRequest() : DeleteImageRequest(nullptr) {}
  ~DeleteImageRequest() override;
  explicit constexpr DeleteImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteImageRequest(const DeleteImageRequest& from);
  DeleteImageRequest(DeleteImageRequest&& from) noexcept
    : DeleteImageRequest() {
    *this = ::std::move(from);
  }

  inline DeleteImageRequest& operator=(const DeleteImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteImageRequest& operator=(DeleteImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteImageRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteImageRequest*>(
               &_DeleteImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteImageRequest& a, DeleteImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteImageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteImageRequest* New() const final {
    return new DeleteImageRequest();
  }

  DeleteImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.services.images.v1.DeleteImageRequest";
  }
  protected:
  explicit DeleteImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSyncFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool sync = 2;
  void clear_sync();
  bool sync() const;
  void set_sync(bool value);
  private:
  bool _internal_sync() const;
  void _internal_set_sync(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containerd.services.images.v1.DeleteImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Image

// string name = 1;
inline void Image::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Image::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.Image.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.images.v1.Image.name)
}
inline std::string* Image::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.Image.name)
  return _s;
}
inline const std::string& Image::_internal_name() const {
  return name_.Get();
}
inline void Image::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Image::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.Image.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.Image.name)
}

// map<string, string> labels = 2;
inline int Image::_internal_labels_size() const {
  return labels_.size();
}
inline int Image::labels_size() const {
  return _internal_labels_size();
}
inline void Image::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Image::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Image::labels() const {
  // @@protoc_insertion_point(field_map:containerd.services.images.v1.Image.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Image::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Image::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.services.images.v1.Image.labels)
  return _internal_mutable_labels();
}

// .containerd.types.Descriptor target = 3 [(.gogoproto.nullable) = false];
inline bool Image::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool Image::has_target() const {
  return _internal_has_target();
}
inline const ::containerd::types::Descriptor& Image::_internal_target() const {
  const ::containerd::types::Descriptor* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::types::Descriptor&>(
      ::containerd::types::_Descriptor_default_instance_);
}
inline const ::containerd::types::Descriptor& Image::target() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.Image.target)
  return _internal_target();
}
inline void Image::unsafe_arena_set_allocated_target(
    ::containerd::types::Descriptor* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.Image.target)
}
inline ::containerd::types::Descriptor* Image::release_target() {
  
  ::containerd::types::Descriptor* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::types::Descriptor* Image::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.Image.target)
  
  ::containerd::types::Descriptor* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::containerd::types::Descriptor* Image::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::types::Descriptor>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::containerd::types::Descriptor* Image::mutable_target() {
  ::containerd::types::Descriptor* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.Image.target)
  return _msg;
}
inline void Image::set_allocated_target(::containerd::types::Descriptor* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.Image.target)
}

// .google.protobuf.Timestamp created_at = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Image::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Image::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::created_at() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.Image.created_at)
  return _internal_created_at();
}
inline void Image::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.Image.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.Image.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::mutable_created_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.Image.created_at)
  return _msg;
}
inline void Image::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.Image.created_at)
}

// .google.protobuf.Timestamp updated_at = 8 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Image::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Image::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::updated_at() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.Image.updated_at)
  return _internal_updated_at();
}
inline void Image::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.Image.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.Image.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::mutable_updated_at() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.Image.updated_at)
  return _msg;
}
inline void Image::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.Image.updated_at)
}

// -------------------------------------------------------------------

// GetImageRequest

// string name = 1;
inline void GetImageRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetImageRequest::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.GetImageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.images.v1.GetImageRequest.name)
}
inline std::string* GetImageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.GetImageRequest.name)
  return _s;
}
inline const std::string& GetImageRequest::_internal_name() const {
  return name_.Get();
}
inline void GetImageRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetImageRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetImageRequest::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.GetImageRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetImageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.GetImageRequest.name)
}

// -------------------------------------------------------------------

// GetImageResponse

// .containerd.services.images.v1.Image image = 1;
inline bool GetImageResponse::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool GetImageResponse::has_image() const {
  return _internal_has_image();
}
inline void GetImageResponse::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::containerd::services::images::v1::Image& GetImageResponse::_internal_image() const {
  const ::containerd::services::images::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::images::v1::Image&>(
      ::containerd::services::images::v1::_Image_default_instance_);
}
inline const ::containerd::services::images::v1::Image& GetImageResponse::image() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.GetImageResponse.image)
  return _internal_image();
}
inline void GetImageResponse::unsafe_arena_set_allocated_image(
    ::containerd::services::images::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.GetImageResponse.image)
}
inline ::containerd::services::images::v1::Image* GetImageResponse::release_image() {
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::images::v1::Image* GetImageResponse::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.GetImageResponse.image)
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::containerd::services::images::v1::Image* GetImageResponse::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::images::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::containerd::services::images::v1::Image* GetImageResponse::mutable_image() {
  ::containerd::services::images::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.GetImageResponse.image)
  return _msg;
}
inline void GetImageResponse::set_allocated_image(::containerd::services::images::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::images::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.GetImageResponse.image)
}

// -------------------------------------------------------------------

// CreateImageRequest

// .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
inline bool CreateImageRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool CreateImageRequest::has_image() const {
  return _internal_has_image();
}
inline void CreateImageRequest::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::containerd::services::images::v1::Image& CreateImageRequest::_internal_image() const {
  const ::containerd::services::images::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::images::v1::Image&>(
      ::containerd::services::images::v1::_Image_default_instance_);
}
inline const ::containerd::services::images::v1::Image& CreateImageRequest::image() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.CreateImageRequest.image)
  return _internal_image();
}
inline void CreateImageRequest::unsafe_arena_set_allocated_image(
    ::containerd::services::images::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.CreateImageRequest.image)
}
inline ::containerd::services::images::v1::Image* CreateImageRequest::release_image() {
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::images::v1::Image* CreateImageRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.CreateImageRequest.image)
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::containerd::services::images::v1::Image* CreateImageRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::images::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::containerd::services::images::v1::Image* CreateImageRequest::mutable_image() {
  ::containerd::services::images::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.CreateImageRequest.image)
  return _msg;
}
inline void CreateImageRequest::set_allocated_image(::containerd::services::images::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::images::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.CreateImageRequest.image)
}

// -------------------------------------------------------------------

// CreateImageResponse

// .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
inline bool CreateImageResponse::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool CreateImageResponse::has_image() const {
  return _internal_has_image();
}
inline void CreateImageResponse::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::containerd::services::images::v1::Image& CreateImageResponse::_internal_image() const {
  const ::containerd::services::images::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::images::v1::Image&>(
      ::containerd::services::images::v1::_Image_default_instance_);
}
inline const ::containerd::services::images::v1::Image& CreateImageResponse::image() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.CreateImageResponse.image)
  return _internal_image();
}
inline void CreateImageResponse::unsafe_arena_set_allocated_image(
    ::containerd::services::images::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.CreateImageResponse.image)
}
inline ::containerd::services::images::v1::Image* CreateImageResponse::release_image() {
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::images::v1::Image* CreateImageResponse::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.CreateImageResponse.image)
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::containerd::services::images::v1::Image* CreateImageResponse::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::images::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::containerd::services::images::v1::Image* CreateImageResponse::mutable_image() {
  ::containerd::services::images::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.CreateImageResponse.image)
  return _msg;
}
inline void CreateImageResponse::set_allocated_image(::containerd::services::images::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::images::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.CreateImageResponse.image)
}

// -------------------------------------------------------------------

// UpdateImageRequest

// .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
inline bool UpdateImageRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool UpdateImageRequest::has_image() const {
  return _internal_has_image();
}
inline void UpdateImageRequest::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::containerd::services::images::v1::Image& UpdateImageRequest::_internal_image() const {
  const ::containerd::services::images::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::images::v1::Image&>(
      ::containerd::services::images::v1::_Image_default_instance_);
}
inline const ::containerd::services::images::v1::Image& UpdateImageRequest::image() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.UpdateImageRequest.image)
  return _internal_image();
}
inline void UpdateImageRequest::unsafe_arena_set_allocated_image(
    ::containerd::services::images::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.UpdateImageRequest.image)
}
inline ::containerd::services::images::v1::Image* UpdateImageRequest::release_image() {
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::images::v1::Image* UpdateImageRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.UpdateImageRequest.image)
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::containerd::services::images::v1::Image* UpdateImageRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::images::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::containerd::services::images::v1::Image* UpdateImageRequest::mutable_image() {
  ::containerd::services::images::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.UpdateImageRequest.image)
  return _msg;
}
inline void UpdateImageRequest::set_allocated_image(::containerd::services::images::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::images::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.UpdateImageRequest.image)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateImageRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateImageRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateImageRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateImageRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.UpdateImageRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateImageRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.UpdateImageRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateImageRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateImageRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.UpdateImageRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateImageRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateImageRequest::mutable_update_mask() {
  PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.UpdateImageRequest.update_mask)
  return _msg;
}
inline void UpdateImageRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.UpdateImageRequest.update_mask)
}

// -------------------------------------------------------------------

// UpdateImageResponse

// .containerd.services.images.v1.Image image = 1 [(.gogoproto.nullable) = false];
inline bool UpdateImageResponse::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool UpdateImageResponse::has_image() const {
  return _internal_has_image();
}
inline void UpdateImageResponse::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::containerd::services::images::v1::Image& UpdateImageResponse::_internal_image() const {
  const ::containerd::services::images::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::services::images::v1::Image&>(
      ::containerd::services::images::v1::_Image_default_instance_);
}
inline const ::containerd::services::images::v1::Image& UpdateImageResponse::image() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.UpdateImageResponse.image)
  return _internal_image();
}
inline void UpdateImageResponse::unsafe_arena_set_allocated_image(
    ::containerd::services::images::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.services.images.v1.UpdateImageResponse.image)
}
inline ::containerd::services::images::v1::Image* UpdateImageResponse::release_image() {
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::services::images::v1::Image* UpdateImageResponse::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.UpdateImageResponse.image)
  
  ::containerd::services::images::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::containerd::services::images::v1::Image* UpdateImageResponse::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::services::images::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::containerd::services::images::v1::Image* UpdateImageResponse::mutable_image() {
  ::containerd::services::images::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.UpdateImageResponse.image)
  return _msg;
}
inline void UpdateImageResponse::set_allocated_image(::containerd::services::images::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::services::images::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.UpdateImageResponse.image)
}

// -------------------------------------------------------------------

// ListImagesRequest

// repeated string filters = 1;
inline int ListImagesRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int ListImagesRequest::filters_size() const {
  return _internal_filters_size();
}
inline void ListImagesRequest::clear_filters() {
  filters_.Clear();
}
inline std::string* ListImagesRequest::add_filters() {
  std::string* _s = _internal_add_filters();
  // @@protoc_insertion_point(field_add_mutable:containerd.services.images.v1.ListImagesRequest.filters)
  return _s;
}
inline const std::string& ListImagesRequest::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const std::string& ListImagesRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.ListImagesRequest.filters)
  return _internal_filters(index);
}
inline std::string* ListImagesRequest::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.ListImagesRequest.filters)
  return filters_.Mutable(index);
}
inline void ListImagesRequest::set_filters(int index, const std::string& value) {
  filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:containerd.services.images.v1.ListImagesRequest.filters)
}
inline void ListImagesRequest::set_filters(int index, std::string&& value) {
  filters_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:containerd.services.images.v1.ListImagesRequest.filters)
}
inline void ListImagesRequest::set_filters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containerd.services.images.v1.ListImagesRequest.filters)
}
inline void ListImagesRequest::set_filters(int index, const char* value, size_t size) {
  filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containerd.services.images.v1.ListImagesRequest.filters)
}
inline std::string* ListImagesRequest::_internal_add_filters() {
  return filters_.Add();
}
inline void ListImagesRequest::add_filters(const std::string& value) {
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containerd.services.images.v1.ListImagesRequest.filters)
}
inline void ListImagesRequest::add_filters(std::string&& value) {
  filters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containerd.services.images.v1.ListImagesRequest.filters)
}
inline void ListImagesRequest::add_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containerd.services.images.v1.ListImagesRequest.filters)
}
inline void ListImagesRequest::add_filters(const char* value, size_t size) {
  filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containerd.services.images.v1.ListImagesRequest.filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListImagesRequest::filters() const {
  // @@protoc_insertion_point(field_list:containerd.services.images.v1.ListImagesRequest.filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListImagesRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.images.v1.ListImagesRequest.filters)
  return &filters_;
}

// -------------------------------------------------------------------

// ListImagesResponse

// repeated .containerd.services.images.v1.Image images = 1 [(.gogoproto.nullable) = false];
inline int ListImagesResponse::_internal_images_size() const {
  return images_.size();
}
inline int ListImagesResponse::images_size() const {
  return _internal_images_size();
}
inline void ListImagesResponse::clear_images() {
  images_.Clear();
}
inline ::containerd::services::images::v1::Image* ListImagesResponse::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.ListImagesResponse.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::images::v1::Image >*
ListImagesResponse::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:containerd.services.images.v1.ListImagesResponse.images)
  return &images_;
}
inline const ::containerd::services::images::v1::Image& ListImagesResponse::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::containerd::services::images::v1::Image& ListImagesResponse::images(int index) const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.ListImagesResponse.images)
  return _internal_images(index);
}
inline ::containerd::services::images::v1::Image* ListImagesResponse::_internal_add_images() {
  return images_.Add();
}
inline ::containerd::services::images::v1::Image* ListImagesResponse::add_images() {
  ::containerd::services::images::v1::Image* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:containerd.services.images.v1.ListImagesResponse.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containerd::services::images::v1::Image >&
ListImagesResponse::images() const {
  // @@protoc_insertion_point(field_list:containerd.services.images.v1.ListImagesResponse.images)
  return images_;
}

// -------------------------------------------------------------------

// DeleteImageRequest

// string name = 1;
inline void DeleteImageRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteImageRequest::name() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.DeleteImageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteImageRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.services.images.v1.DeleteImageRequest.name)
}
inline std::string* DeleteImageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.services.images.v1.DeleteImageRequest.name)
  return _s;
}
inline const std::string& DeleteImageRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteImageRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteImageRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteImageRequest::release_name() {
  // @@protoc_insertion_point(field_release:containerd.services.images.v1.DeleteImageRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteImageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.services.images.v1.DeleteImageRequest.name)
}

// bool sync = 2;
inline void DeleteImageRequest::clear_sync() {
  sync_ = false;
}
inline bool DeleteImageRequest::_internal_sync() const {
  return sync_;
}
inline bool DeleteImageRequest::sync() const {
  // @@protoc_insertion_point(field_get:containerd.services.images.v1.DeleteImageRequest.sync)
  return _internal_sync();
}
inline void DeleteImageRequest::_internal_set_sync(bool value) {
  
  sync_ = value;
}
inline void DeleteImageRequest::set_sync(bool value) {
  _internal_set_sync(value);
  // @@protoc_insertion_point(field_set:containerd.services.images.v1.DeleteImageRequest.sync)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace images
}  // namespace services
}  // namespace containerd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_images_2eproto
