// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_container_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_container_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "gogo.pb.h"
#include "fieldpath.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_container_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_container_5fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_container_5fevents_2eproto;
namespace containerd {
namespace events {
class ContainerCreate;
struct ContainerCreateDefaultTypeInternal;
extern ContainerCreateDefaultTypeInternal _ContainerCreate_default_instance_;
class ContainerCreate_Runtime;
struct ContainerCreate_RuntimeDefaultTypeInternal;
extern ContainerCreate_RuntimeDefaultTypeInternal _ContainerCreate_Runtime_default_instance_;
class ContainerDelete;
struct ContainerDeleteDefaultTypeInternal;
extern ContainerDeleteDefaultTypeInternal _ContainerDelete_default_instance_;
class ContainerUpdate;
struct ContainerUpdateDefaultTypeInternal;
extern ContainerUpdateDefaultTypeInternal _ContainerUpdate_default_instance_;
class ContainerUpdate_LabelsEntry_DoNotUse;
struct ContainerUpdate_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ContainerUpdate_LabelsEntry_DoNotUseDefaultTypeInternal _ContainerUpdate_LabelsEntry_DoNotUse_default_instance_;
}  // namespace events
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> ::containerd::events::ContainerCreate* Arena::CreateMaybeMessage<::containerd::events::ContainerCreate>(Arena*);
template<> ::containerd::events::ContainerCreate_Runtime* Arena::CreateMaybeMessage<::containerd::events::ContainerCreate_Runtime>(Arena*);
template<> ::containerd::events::ContainerDelete* Arena::CreateMaybeMessage<::containerd::events::ContainerDelete>(Arena*);
template<> ::containerd::events::ContainerUpdate* Arena::CreateMaybeMessage<::containerd::events::ContainerUpdate>(Arena*);
template<> ::containerd::events::ContainerUpdate_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::containerd::events::ContainerUpdate_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containerd {
namespace events {

// ===================================================================

class ContainerCreate_Runtime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.ContainerCreate.Runtime) */ {
 public:
  inline ContainerCreate_Runtime() : ContainerCreate_Runtime(nullptr) {}
  ~ContainerCreate_Runtime() override;
  explicit constexpr ContainerCreate_Runtime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerCreate_Runtime(const ContainerCreate_Runtime& from);
  ContainerCreate_Runtime(ContainerCreate_Runtime&& from) noexcept
    : ContainerCreate_Runtime() {
    *this = ::std::move(from);
  }

  inline ContainerCreate_Runtime& operator=(const ContainerCreate_Runtime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerCreate_Runtime& operator=(ContainerCreate_Runtime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerCreate_Runtime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerCreate_Runtime* internal_default_instance() {
    return reinterpret_cast<const ContainerCreate_Runtime*>(
               &_ContainerCreate_Runtime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContainerCreate_Runtime& a, ContainerCreate_Runtime& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerCreate_Runtime* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerCreate_Runtime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerCreate_Runtime* New() const final {
    return new ContainerCreate_Runtime();
  }

  ContainerCreate_Runtime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerCreate_Runtime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerCreate_Runtime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainerCreate_Runtime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerCreate_Runtime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.ContainerCreate.Runtime";
  }
  protected:
  explicit ContainerCreate_Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const PROTOBUF_NAMESPACE_ID::Any& options() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_options();
  PROTOBUF_NAMESPACE_ID::Any* mutable_options();
  void set_allocated_options(PROTOBUF_NAMESPACE_ID::Any* options);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_options() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      PROTOBUF_NAMESPACE_ID::Any* options);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:containerd.events.ContainerCreate.Runtime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ContainerCreate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.ContainerCreate) */ {
 public:
  inline ContainerCreate() : ContainerCreate(nullptr) {}
  ~ContainerCreate() override;
  explicit constexpr ContainerCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerCreate(const ContainerCreate& from);
  ContainerCreate(ContainerCreate&& from) noexcept
    : ContainerCreate() {
    *this = ::std::move(from);
  }

  inline ContainerCreate& operator=(const ContainerCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerCreate& operator=(ContainerCreate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerCreate* internal_default_instance() {
    return reinterpret_cast<const ContainerCreate*>(
               &_ContainerCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContainerCreate& a, ContainerCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerCreate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerCreate* New() const final {
    return new ContainerCreate();
  }

  ContainerCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerCreate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerCreate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainerCreate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.ContainerCreate";
  }
  protected:
  explicit ContainerCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContainerCreate_Runtime Runtime;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kImageFieldNumber = 2,
    kRuntimeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // .containerd.events.ContainerCreate.Runtime runtime = 3;
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::containerd::events::ContainerCreate_Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::containerd::events::ContainerCreate_Runtime* release_runtime();
  ::containerd::events::ContainerCreate_Runtime* mutable_runtime();
  void set_allocated_runtime(::containerd::events::ContainerCreate_Runtime* runtime);
  private:
  const ::containerd::events::ContainerCreate_Runtime& _internal_runtime() const;
  ::containerd::events::ContainerCreate_Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::containerd::events::ContainerCreate_Runtime* runtime);
  ::containerd::events::ContainerCreate_Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:containerd.events.ContainerCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::containerd::events::ContainerCreate_Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ContainerUpdate_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerUpdate_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerUpdate_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ContainerUpdate_LabelsEntry_DoNotUse();
  explicit constexpr ContainerUpdate_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ContainerUpdate_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerUpdate_LabelsEntry_DoNotUse& other);
  static const ContainerUpdate_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerUpdate_LabelsEntry_DoNotUse*>(&_ContainerUpdate_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.events.ContainerUpdate.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containerd.events.ContainerUpdate.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ContainerUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.ContainerUpdate) */ {
 public:
  inline ContainerUpdate() : ContainerUpdate(nullptr) {}
  ~ContainerUpdate() override;
  explicit constexpr ContainerUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerUpdate(const ContainerUpdate& from);
  ContainerUpdate(ContainerUpdate&& from) noexcept
    : ContainerUpdate() {
    *this = ::std::move(from);
  }

  inline ContainerUpdate& operator=(const ContainerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerUpdate& operator=(ContainerUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerUpdate* internal_default_instance() {
    return reinterpret_cast<const ContainerUpdate*>(
               &_ContainerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContainerUpdate& a, ContainerUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerUpdate* New() const final {
    return new ContainerUpdate();
  }

  ContainerUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainerUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.ContainerUpdate";
  }
  protected:
  explicit ContainerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kIdFieldNumber = 1,
    kImageFieldNumber = 2,
    kSnapshotKeyFieldNumber = 4,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string snapshot_key = 4;
  void clear_snapshot_key();
  const std::string& snapshot_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_snapshot_key();
  void set_allocated_snapshot_key(std::string* snapshot_key);
  private:
  const std::string& _internal_snapshot_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_key(const std::string& value);
  std::string* _internal_mutable_snapshot_key();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.ContainerUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerUpdate_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fevents_2eproto;
};
// -------------------------------------------------------------------

class ContainerDelete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containerd.events.ContainerDelete) */ {
 public:
  inline ContainerDelete() : ContainerDelete(nullptr) {}
  ~ContainerDelete() override;
  explicit constexpr ContainerDelete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerDelete(const ContainerDelete& from);
  ContainerDelete(ContainerDelete&& from) noexcept
    : ContainerDelete() {
    *this = ::std::move(from);
  }

  inline ContainerDelete& operator=(const ContainerDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerDelete& operator=(ContainerDelete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerDelete& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerDelete* internal_default_instance() {
    return reinterpret_cast<const ContainerDelete*>(
               &_ContainerDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContainerDelete& a, ContainerDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerDelete* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerDelete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerDelete* New() const final {
    return new ContainerDelete();
  }

  ContainerDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerDelete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerDelete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainerDelete& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containerd.events.ContainerDelete";
  }
  protected:
  explicit ContainerDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:containerd.events.ContainerDelete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContainerCreate_Runtime

// string name = 1;
inline void ContainerCreate_Runtime::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ContainerCreate_Runtime::name() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerCreate.Runtime.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerCreate_Runtime::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerCreate.Runtime.name)
}
inline std::string* ContainerCreate_Runtime::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerCreate.Runtime.name)
  return _s;
}
inline const std::string& ContainerCreate_Runtime::_internal_name() const {
  return name_.Get();
}
inline void ContainerCreate_Runtime::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerCreate_Runtime::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerCreate_Runtime::release_name() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerCreate.Runtime.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerCreate_Runtime::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerCreate.Runtime.name)
}

// .google.protobuf.Any options = 2;
inline bool ContainerCreate_Runtime::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ContainerCreate_Runtime::has_options() const {
  return _internal_has_options();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ContainerCreate_Runtime::_internal_options() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ContainerCreate_Runtime::options() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerCreate.Runtime.options)
  return _internal_options();
}
inline void ContainerCreate_Runtime::unsafe_arena_set_allocated_options(
    PROTOBUF_NAMESPACE_ID::Any* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.events.ContainerCreate.Runtime.options)
}
inline PROTOBUF_NAMESPACE_ID::Any* ContainerCreate_Runtime::release_options() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ContainerCreate_Runtime::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerCreate.Runtime.options)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = options_;
  options_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ContainerCreate_Runtime::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ContainerCreate_Runtime::mutable_options() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerCreate.Runtime.options)
  return _msg;
}
inline void ContainerCreate_Runtime::set_allocated_options(PROTOBUF_NAMESPACE_ID::Any* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options));
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerCreate.Runtime.options)
}

// -------------------------------------------------------------------

// ContainerCreate

// string id = 1;
inline void ContainerCreate::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ContainerCreate::id() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerCreate.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerCreate::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerCreate.id)
}
inline std::string* ContainerCreate::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerCreate.id)
  return _s;
}
inline const std::string& ContainerCreate::_internal_id() const {
  return id_.Get();
}
inline void ContainerCreate::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerCreate::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerCreate::release_id() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerCreate.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerCreate::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerCreate.id)
}

// string image = 2;
inline void ContainerCreate::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& ContainerCreate::image() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerCreate.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerCreate::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerCreate.image)
}
inline std::string* ContainerCreate::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerCreate.image)
  return _s;
}
inline const std::string& ContainerCreate::_internal_image() const {
  return image_.Get();
}
inline void ContainerCreate::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerCreate::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerCreate::release_image() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerCreate.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerCreate::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerCreate.image)
}

// .containerd.events.ContainerCreate.Runtime runtime = 3;
inline bool ContainerCreate::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool ContainerCreate::has_runtime() const {
  return _internal_has_runtime();
}
inline void ContainerCreate::clear_runtime() {
  if (GetArenaForAllocation() == nullptr && runtime_ != nullptr) {
    delete runtime_;
  }
  runtime_ = nullptr;
}
inline const ::containerd::events::ContainerCreate_Runtime& ContainerCreate::_internal_runtime() const {
  const ::containerd::events::ContainerCreate_Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::containerd::events::ContainerCreate_Runtime&>(
      ::containerd::events::_ContainerCreate_Runtime_default_instance_);
}
inline const ::containerd::events::ContainerCreate_Runtime& ContainerCreate::runtime() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerCreate.runtime)
  return _internal_runtime();
}
inline void ContainerCreate::unsafe_arena_set_allocated_runtime(
    ::containerd::events::ContainerCreate_Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containerd.events.ContainerCreate.runtime)
}
inline ::containerd::events::ContainerCreate_Runtime* ContainerCreate::release_runtime() {
  
  ::containerd::events::ContainerCreate_Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::containerd::events::ContainerCreate_Runtime* ContainerCreate::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerCreate.runtime)
  
  ::containerd::events::ContainerCreate_Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::containerd::events::ContainerCreate_Runtime* ContainerCreate::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::containerd::events::ContainerCreate_Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::containerd::events::ContainerCreate_Runtime* ContainerCreate::mutable_runtime() {
  ::containerd::events::ContainerCreate_Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerCreate.runtime)
  return _msg;
}
inline void ContainerCreate::set_allocated_runtime(::containerd::events::ContainerCreate_Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete runtime_;
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::containerd::events::ContainerCreate_Runtime>::GetOwningArena(runtime);
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerCreate.runtime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerUpdate

// string id = 1;
inline void ContainerUpdate::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ContainerUpdate::id() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerUpdate.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerUpdate::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerUpdate.id)
}
inline std::string* ContainerUpdate::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerUpdate.id)
  return _s;
}
inline const std::string& ContainerUpdate::_internal_id() const {
  return id_.Get();
}
inline void ContainerUpdate::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerUpdate::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerUpdate::release_id() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerUpdate.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerUpdate::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerUpdate.id)
}

// string image = 2;
inline void ContainerUpdate::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& ContainerUpdate::image() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerUpdate.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerUpdate::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerUpdate.image)
}
inline std::string* ContainerUpdate::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerUpdate.image)
  return _s;
}
inline const std::string& ContainerUpdate::_internal_image() const {
  return image_.Get();
}
inline void ContainerUpdate::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerUpdate::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerUpdate::release_image() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerUpdate.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerUpdate::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerUpdate.image)
}

// map<string, string> labels = 3;
inline int ContainerUpdate::_internal_labels_size() const {
  return labels_.size();
}
inline int ContainerUpdate::labels_size() const {
  return _internal_labels_size();
}
inline void ContainerUpdate::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerUpdate::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerUpdate::labels() const {
  // @@protoc_insertion_point(field_map:containerd.events.ContainerUpdate.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerUpdate::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerUpdate::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:containerd.events.ContainerUpdate.labels)
  return _internal_mutable_labels();
}

// string snapshot_key = 4;
inline void ContainerUpdate::clear_snapshot_key() {
  snapshot_key_.ClearToEmpty();
}
inline const std::string& ContainerUpdate::snapshot_key() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerUpdate.snapshot_key)
  return _internal_snapshot_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerUpdate::set_snapshot_key(ArgT0&& arg0, ArgT... args) {
 
 snapshot_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerUpdate.snapshot_key)
}
inline std::string* ContainerUpdate::mutable_snapshot_key() {
  std::string* _s = _internal_mutable_snapshot_key();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerUpdate.snapshot_key)
  return _s;
}
inline const std::string& ContainerUpdate::_internal_snapshot_key() const {
  return snapshot_key_.Get();
}
inline void ContainerUpdate::_internal_set_snapshot_key(const std::string& value) {
  
  snapshot_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerUpdate::_internal_mutable_snapshot_key() {
  
  return snapshot_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerUpdate::release_snapshot_key() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerUpdate.snapshot_key)
  return snapshot_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerUpdate::set_allocated_snapshot_key(std::string* snapshot_key) {
  if (snapshot_key != nullptr) {
    
  } else {
    
  }
  snapshot_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerUpdate.snapshot_key)
}

// -------------------------------------------------------------------

// ContainerDelete

// string id = 1;
inline void ContainerDelete::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ContainerDelete::id() const {
  // @@protoc_insertion_point(field_get:containerd.events.ContainerDelete.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerDelete::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:containerd.events.ContainerDelete.id)
}
inline std::string* ContainerDelete::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:containerd.events.ContainerDelete.id)
  return _s;
}
inline const std::string& ContainerDelete::_internal_id() const {
  return id_.Get();
}
inline void ContainerDelete::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerDelete::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerDelete::release_id() {
  // @@protoc_insertion_point(field_release:containerd.events.ContainerDelete.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerDelete::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:containerd.events.ContainerDelete.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events
}  // namespace containerd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_container_5fevents_2eproto
