// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: containers.proto

#include "containers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace containerd {
namespace services {
namespace containers {
namespace v1 {
constexpr Container_LabelsEntry_DoNotUse::Container_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Container_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr Container_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Container_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Container_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Container_LabelsEntry_DoNotUseDefaultTypeInternal _Container_LabelsEntry_DoNotUse_default_instance_;
constexpr Container_Runtime::Container_Runtime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , options_(nullptr){}
struct Container_RuntimeDefaultTypeInternal {
  constexpr Container_RuntimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Container_RuntimeDefaultTypeInternal() {}
  union {
    Container_Runtime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Container_RuntimeDefaultTypeInternal _Container_Runtime_default_instance_;
constexpr Container_ExtensionsEntry_DoNotUse::Container_ExtensionsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Container_ExtensionsEntry_DoNotUseDefaultTypeInternal {
  constexpr Container_ExtensionsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Container_ExtensionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Container_ExtensionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Container_ExtensionsEntry_DoNotUseDefaultTypeInternal _Container_ExtensionsEntry_DoNotUse_default_instance_;
constexpr Container::Container(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , extensions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , snapshotter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , snapshot_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_(nullptr)
  , spec_(nullptr)
  , created_at_(nullptr)
  , updated_at_(nullptr){}
struct ContainerDefaultTypeInternal {
  constexpr ContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerDefaultTypeInternal() {}
  union {
    Container _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerDefaultTypeInternal _Container_default_instance_;
constexpr GetContainerRequest::GetContainerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetContainerRequestDefaultTypeInternal {
  constexpr GetContainerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetContainerRequestDefaultTypeInternal() {}
  union {
    GetContainerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetContainerRequestDefaultTypeInternal _GetContainerRequest_default_instance_;
constexpr GetContainerResponse::GetContainerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_(nullptr){}
struct GetContainerResponseDefaultTypeInternal {
  constexpr GetContainerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetContainerResponseDefaultTypeInternal() {}
  union {
    GetContainerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetContainerResponseDefaultTypeInternal _GetContainerResponse_default_instance_;
constexpr ListContainersRequest::ListContainersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_(){}
struct ListContainersRequestDefaultTypeInternal {
  constexpr ListContainersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListContainersRequestDefaultTypeInternal() {}
  union {
    ListContainersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListContainersRequestDefaultTypeInternal _ListContainersRequest_default_instance_;
constexpr ListContainersResponse::ListContainersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : containers_(){}
struct ListContainersResponseDefaultTypeInternal {
  constexpr ListContainersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListContainersResponseDefaultTypeInternal() {}
  union {
    ListContainersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListContainersResponseDefaultTypeInternal _ListContainersResponse_default_instance_;
constexpr CreateContainerRequest::CreateContainerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_(nullptr){}
struct CreateContainerRequestDefaultTypeInternal {
  constexpr CreateContainerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateContainerRequestDefaultTypeInternal() {}
  union {
    CreateContainerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateContainerRequestDefaultTypeInternal _CreateContainerRequest_default_instance_;
constexpr CreateContainerResponse::CreateContainerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_(nullptr){}
struct CreateContainerResponseDefaultTypeInternal {
  constexpr CreateContainerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateContainerResponseDefaultTypeInternal() {}
  union {
    CreateContainerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateContainerResponseDefaultTypeInternal _CreateContainerResponse_default_instance_;
constexpr UpdateContainerRequest::UpdateContainerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_(nullptr)
  , update_mask_(nullptr){}
struct UpdateContainerRequestDefaultTypeInternal {
  constexpr UpdateContainerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateContainerRequestDefaultTypeInternal() {}
  union {
    UpdateContainerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateContainerRequestDefaultTypeInternal _UpdateContainerRequest_default_instance_;
constexpr UpdateContainerResponse::UpdateContainerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_(nullptr){}
struct UpdateContainerResponseDefaultTypeInternal {
  constexpr UpdateContainerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateContainerResponseDefaultTypeInternal() {}
  union {
    UpdateContainerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateContainerResponseDefaultTypeInternal _UpdateContainerResponse_default_instance_;
constexpr DeleteContainerRequest::DeleteContainerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteContainerRequestDefaultTypeInternal {
  constexpr DeleteContainerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteContainerRequestDefaultTypeInternal() {}
  union {
    DeleteContainerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteContainerRequestDefaultTypeInternal _DeleteContainerRequest_default_instance_;
constexpr ListContainerMessage::ListContainerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_(nullptr){}
struct ListContainerMessageDefaultTypeInternal {
  constexpr ListContainerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListContainerMessageDefaultTypeInternal() {}
  union {
    ListContainerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListContainerMessageDefaultTypeInternal _ListContainerMessage_default_instance_;
}  // namespace v1
}  // namespace containers
}  // namespace services
}  // namespace containerd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_containers_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_containers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_containers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_containers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_Runtime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_Runtime, name_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_Runtime, options_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, id_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, labels_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, image_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, runtime_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, spec_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, snapshotter_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, snapshot_key_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, created_at_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, updated_at_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::Container, extensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::GetContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::GetContainerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::GetContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::GetContainerResponse, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::ListContainersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::ListContainersRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::ListContainersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::ListContainersResponse, containers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::CreateContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::CreateContainerRequest, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::CreateContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::CreateContainerResponse, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::UpdateContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::UpdateContainerRequest, container_),
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::UpdateContainerRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::UpdateContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::UpdateContainerResponse, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::DeleteContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::DeleteContainerRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::ListContainerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::containerd::services::containers::v1::ListContainerMessage, container_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::containerd::services::containers::v1::Container_Runtime)},
  { 16, 23, sizeof(::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse)},
  { 25, -1, sizeof(::containerd::services::containers::v1::Container)},
  { 40, -1, sizeof(::containerd::services::containers::v1::GetContainerRequest)},
  { 46, -1, sizeof(::containerd::services::containers::v1::GetContainerResponse)},
  { 52, -1, sizeof(::containerd::services::containers::v1::ListContainersRequest)},
  { 58, -1, sizeof(::containerd::services::containers::v1::ListContainersResponse)},
  { 64, -1, sizeof(::containerd::services::containers::v1::CreateContainerRequest)},
  { 70, -1, sizeof(::containerd::services::containers::v1::CreateContainerResponse)},
  { 76, -1, sizeof(::containerd::services::containers::v1::UpdateContainerRequest)},
  { 83, -1, sizeof(::containerd::services::containers::v1::UpdateContainerResponse)},
  { 89, -1, sizeof(::containerd::services::containers::v1::DeleteContainerRequest)},
  { 95, -1, sizeof(::containerd::services::containers::v1::ListContainerMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_Container_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_Container_Runtime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_Container_ExtensionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_Container_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_GetContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_GetContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_ListContainersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_ListContainersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_CreateContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_CreateContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_UpdateContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_UpdateContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_DeleteContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::containerd::services::containers::v1::_ListContainerMessage_default_instance_),
};

const char descriptor_table_protodef_containers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020containers.proto\022!containerd.services."
  "containers.v1\032\ngogo.proto\032\031google/protob"
  "uf/any.proto\032\033google/protobuf/empty.prot"
  "o\032 google/protobuf/field_mask.proto\032\037goo"
  "gle/protobuf/timestamp.proto\"\212\005\n\tContain"
  "er\022\n\n\002id\030\001 \001(\t\022H\n\006labels\030\002 \003(\01328.contain"
  "erd.services.containers.v1.Container.Lab"
  "elsEntry\022\r\n\005image\030\003 \001(\t\022E\n\007runtime\030\004 \001(\013"
  "24.containerd.services.containers.v1.Con"
  "tainer.Runtime\022\"\n\004spec\030\005 \001(\0132\024.google.pr"
  "otobuf.Any\022\023\n\013snapshotter\030\006 \001(\t\022\024\n\014snaps"
  "hot_key\030\007 \001(\t\0228\n\ncreated_at\030\010 \001(\0132\032.goog"
  "le.protobuf.TimestampB\010\220\337\037\001\310\336\037\000\0228\n\nupdat"
  "ed_at\030\t \001(\0132\032.google.protobuf.TimestampB"
  "\010\220\337\037\001\310\336\037\000\022V\n\nextensions\030\n \003(\0132<.containe"
  "rd.services.containers.v1.Container.Exte"
  "nsionsEntryB\004\310\336\037\000\032-\n\013LabelsEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032>\n\007Runtime\022\014\n\004n"
  "ame\030\001 \001(\t\022%\n\007options\030\002 \001(\0132\024.google.prot"
  "obuf.Any\032G\n\017ExtensionsEntry\022\013\n\003key\030\001 \001(\t"
  "\022#\n\005value\030\002 \001(\0132\024.google.protobuf.Any:\0028"
  "\001\"!\n\023GetContainerRequest\022\n\n\002id\030\001 \001(\t\"]\n\024"
  "GetContainerResponse\022E\n\tcontainer\030\001 \001(\0132"
  ",.containerd.services.containers.v1.Cont"
  "ainerB\004\310\336\037\000\"(\n\025ListContainersRequest\022\017\n\007"
  "filters\030\001 \003(\t\"`\n\026ListContainersResponse\022"
  "F\n\ncontainers\030\001 \003(\0132,.containerd.service"
  "s.containers.v1.ContainerB\004\310\336\037\000\"_\n\026Creat"
  "eContainerRequest\022E\n\tcontainer\030\001 \001(\0132,.c"
  "ontainerd.services.containers.v1.Contain"
  "erB\004\310\336\037\000\"`\n\027CreateContainerResponse\022E\n\tc"
  "ontainer\030\001 \001(\0132,.containerd.services.con"
  "tainers.v1.ContainerB\004\310\336\037\000\"\220\001\n\026UpdateCon"
  "tainerRequest\022E\n\tcontainer\030\001 \001(\0132,.conta"
  "inerd.services.containers.v1.ContainerB\004"
  "\310\336\037\000\022/\n\013update_mask\030\002 \001(\0132\032.google.proto"
  "buf.FieldMask\"`\n\027UpdateContainerResponse"
  "\022E\n\tcontainer\030\001 \001(\0132,.containerd.service"
  "s.containers.v1.ContainerB\004\310\336\037\000\"$\n\026Delet"
  "eContainerRequest\022\n\n\002id\030\001 \001(\t\"W\n\024ListCon"
  "tainerMessage\022\?\n\tcontainer\030\001 \001(\0132,.conta"
  "inerd.services.containers.v1.Container2\344"
  "\005\n\nContainers\022v\n\003Get\0226.containerd.servic"
  "es.containers.v1.GetContainerRequest\0327.c"
  "ontainerd.services.containers.v1.GetCont"
  "ainerResponse\022{\n\004List\0228.containerd.servi"
  "ces.containers.v1.ListContainersRequest\032"
  "9.containerd.services.containers.v1.List"
  "ContainersResponse\022\201\001\n\nListStream\0228.cont"
  "ainerd.services.containers.v1.ListContai"
  "nersRequest\0327.containerd.services.contai"
  "ners.v1.ListContainerMessage0\001\022\177\n\006Create"
  "\0229.containerd.services.containers.v1.Cre"
  "ateContainerRequest\032:.containerd.service"
  "s.containers.v1.CreateContainerResponse\022"
  "\177\n\006Update\0229.containerd.services.containe"
  "rs.v1.UpdateContainerRequest\032:.container"
  "d.services.containers.v1.UpdateContainer"
  "Response\022[\n\006Delete\0229.containerd.services"
  ".containers.v1.DeleteContainerRequest\032\026."
  "google.protobuf.EmptyBHZFgithub.com/cont"
  "ainerd/containerd/api/services/container"
  "s/v1;containersb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_containers_2eproto_deps[5] = {
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_containers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_containers_2eproto = {
  false, false, 2503, descriptor_table_protodef_containers_2eproto, "containers.proto", 
  &descriptor_table_containers_2eproto_once, descriptor_table_containers_2eproto_deps, 5, 14,
  schemas, file_default_instances, TableStruct_containers_2eproto::offsets,
  file_level_metadata_containers_2eproto, file_level_enum_descriptors_containers_2eproto, file_level_service_descriptors_containers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_containers_2eproto_getter() {
  return &descriptor_table_containers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_containers_2eproto(&descriptor_table_containers_2eproto);
namespace containerd {
namespace services {
namespace containers {
namespace v1 {

// ===================================================================

Container_LabelsEntry_DoNotUse::Container_LabelsEntry_DoNotUse() {}
Container_LabelsEntry_DoNotUse::Container_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Container_LabelsEntry_DoNotUse::MergeFrom(const Container_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Container_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[0]);
}

// ===================================================================

class Container_Runtime::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& options(const Container_Runtime* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Container_Runtime::_Internal::options(const Container_Runtime* msg) {
  return *msg->options_;
}
void Container_Runtime::clear_options() {
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
Container_Runtime::Container_Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.Container.Runtime)
}
Container_Runtime::Container_Runtime(const Container_Runtime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.Container.Runtime)
}

inline void Container_Runtime::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
options_ = nullptr;
}

Container_Runtime::~Container_Runtime() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.Container.Runtime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Container_Runtime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void Container_Runtime::ArenaDtor(void* object) {
  Container_Runtime* _this = reinterpret_cast< Container_Runtime* >(object);
  (void)_this;
}
void Container_Runtime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Container_Runtime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Container_Runtime::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.Container.Runtime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Container_Runtime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.Container.Runtime.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Container_Runtime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.Container.Runtime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.Container.Runtime.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any options = 2;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.Container.Runtime)
  return target;
}

size_t Container_Runtime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.Container.Runtime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any options = 2;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Container_Runtime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Container_Runtime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Container_Runtime::GetClassData() const { return &_class_data_; }

void Container_Runtime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Container_Runtime *>(to)->MergeFrom(
      static_cast<const Container_Runtime &>(from));
}


void Container_Runtime::MergeFrom(const Container_Runtime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.Container.Runtime)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Container_Runtime::CopyFrom(const Container_Runtime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.Container.Runtime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container_Runtime::IsInitialized() const {
  return true;
}

void Container_Runtime::InternalSwap(Container_Runtime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Container_Runtime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[1]);
}

// ===================================================================

Container_ExtensionsEntry_DoNotUse::Container_ExtensionsEntry_DoNotUse() {}
Container_ExtensionsEntry_DoNotUse::Container_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Container_ExtensionsEntry_DoNotUse::MergeFrom(const Container_ExtensionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Container_ExtensionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[2]);
}

// ===================================================================

class Container::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container_Runtime& runtime(const Container* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& spec(const Container* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Container* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Container* msg);
};

const ::containerd::services::containers::v1::Container_Runtime&
Container::_Internal::runtime(const Container* msg) {
  return *msg->runtime_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Container::_Internal::spec(const Container* msg) {
  return *msg->spec_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Container::_Internal::created_at(const Container* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Container::_Internal::updated_at(const Container* msg) {
  return *msg->updated_at_;
}
void Container::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
void Container::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Container::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void Container::clear_extensions() {
  extensions_.Clear();
}
Container::Container(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.Container)
}
Container::Container(const Container& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  extensions_.MergeFrom(from.extensions_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  snapshotter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshotter().empty()) {
    snapshotter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshotter(), 
      GetArenaForAllocation());
  }
  snapshot_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot_key().empty()) {
    snapshot_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_runtime()) {
    runtime_ = new ::containerd::services::containers::v1::Container_Runtime(*from.runtime_);
  } else {
    runtime_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new PROTOBUF_NAMESPACE_ID::Any(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.Container)
}

inline void Container::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
snapshotter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
snapshot_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&runtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&runtime_)) + sizeof(updated_at_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.Container)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Container::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete runtime_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
}

void Container::ArenaDtor(void* object) {
  Container* _this = reinterpret_cast< Container* >(object);
  (void)_this;
  _this->labels_. ~MapField();
  _this->extensions_. ~MapField();
}
inline void Container::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Container::ArenaDtor);
  }
}
void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.Container)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  extensions_.Clear();
  id_.ClearToEmpty();
  image_.ClearToEmpty();
  snapshotter_.ClearToEmpty();
  snapshot_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && runtime_ != nullptr) {
    delete runtime_;
  }
  runtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Container::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.Container.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.Container.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .containerd.services.containers.v1.Container.Runtime runtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any spec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshotter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_snapshotter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.Container.snapshotter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshot_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_snapshot_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.Container.snapshot_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> extensions = 10 [(.gogoproto.nullable) = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extensions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Container::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.Container)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.Container.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, string> labels = 2;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.containers.v1.Container.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.containers.v1.Container.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Container_LabelsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Container_LabelsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string image = 3;
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.Container.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // .containerd.services.containers.v1.Container.Runtime runtime = 4;
  if (this->_internal_has_runtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::runtime(this), target, stream);
  }

  // .google.protobuf.Any spec = 5;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::spec(this), target, stream);
  }

  // string snapshotter = 6;
  if (!this->_internal_snapshotter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshotter().data(), static_cast<int>(this->_internal_snapshotter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.Container.snapshotter");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_snapshotter(), target);
  }

  // string snapshot_key = 7;
  if (!this->_internal_snapshot_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot_key().data(), static_cast<int>(this->_internal_snapshot_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.Container.snapshot_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_snapshot_key(), target);
  }

  // .google.protobuf.Timestamp created_at = 8 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 9 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::updated_at(this), target, stream);
  }

  // map<string, .google.protobuf.Any> extensions = 10 [(.gogoproto.nullable) = false];
  if (!this->_internal_extensions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "containerd.services.containers.v1.Container.ExtensionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extensions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extensions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_extensions().begin();
          it != this->_internal_extensions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Container_ExtensionsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->_internal_extensions().begin();
          it != this->_internal_extensions().end(); ++it) {
        target = Container_ExtensionsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.Container)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Container_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .google.protobuf.Any> extensions = 10 [(.gogoproto.nullable) = false];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extensions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_extensions().begin();
      it != this->_internal_extensions().end(); ++it) {
    total_size += Container_ExtensionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string image = 3;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string snapshotter = 6;
  if (!this->_internal_snapshotter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshotter());
  }

  // string snapshot_key = 7;
  if (!this->_internal_snapshot_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_key());
  }

  // .containerd.services.containers.v1.Container.Runtime runtime = 4;
  if (this->_internal_has_runtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_);
  }

  // .google.protobuf.Any spec = 5;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .google.protobuf.Timestamp created_at = 8 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 9 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Container::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Container::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Container::GetClassData() const { return &_class_data_; }

void Container::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Container *>(to)->MergeFrom(
      static_cast<const Container &>(from));
}


void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.Container)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  extensions_.MergeFrom(from.extensions_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_snapshotter().empty()) {
    _internal_set_snapshotter(from._internal_snapshotter());
  }
  if (!from._internal_snapshot_key().empty()) {
    _internal_set_snapshot_key(from._internal_snapshot_key());
  }
  if (from._internal_has_runtime()) {
    _internal_mutable_runtime()->::containerd::services::containers::v1::Container_Runtime::MergeFrom(from._internal_runtime());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::InternalSwap(Container* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  extensions_.InternalSwap(&other->extensions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &snapshotter_, GetArenaForAllocation(),
      &other->snapshotter_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &snapshot_key_, GetArenaForAllocation(),
      &other->snapshot_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Container, updated_at_)
      + sizeof(Container::updated_at_)
      - PROTOBUF_FIELD_OFFSET(Container, runtime_)>(
          reinterpret_cast<char*>(&runtime_),
          reinterpret_cast<char*>(&other->runtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Container::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[3]);
}

// ===================================================================

class GetContainerRequest::_Internal {
 public:
};

GetContainerRequest::GetContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.GetContainerRequest)
}
GetContainerRequest::GetContainerRequest(const GetContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.GetContainerRequest)
}

inline void GetContainerRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetContainerRequest::~GetContainerRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.GetContainerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetContainerRequest::ArenaDtor(void* object) {
  GetContainerRequest* _this = reinterpret_cast< GetContainerRequest* >(object);
  (void)_this;
}
void GetContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.GetContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.GetContainerRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.GetContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.GetContainerRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.GetContainerRequest)
  return target;
}

size_t GetContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.GetContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetContainerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetContainerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetContainerRequest::GetClassData() const { return &_class_data_; }

void GetContainerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetContainerRequest *>(to)->MergeFrom(
      static_cast<const GetContainerRequest &>(from));
}


void GetContainerRequest::MergeFrom(const GetContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.GetContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetContainerRequest::CopyFrom(const GetContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.GetContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerRequest::IsInitialized() const {
  return true;
}

void GetContainerRequest::InternalSwap(GetContainerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[4]);
}

// ===================================================================

class GetContainerResponse::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container& container(const GetContainerResponse* msg);
};

const ::containerd::services::containers::v1::Container&
GetContainerResponse::_Internal::container(const GetContainerResponse* msg) {
  return *msg->container_;
}
GetContainerResponse::GetContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.GetContainerResponse)
}
GetContainerResponse::GetContainerResponse(const GetContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::containerd::services::containers::v1::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.GetContainerResponse)
}

inline void GetContainerResponse::SharedCtor() {
container_ = nullptr;
}

GetContainerResponse::~GetContainerResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.GetContainerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void GetContainerResponse::ArenaDtor(void* object) {
  GetContainerResponse* _this = reinterpret_cast< GetContainerResponse* >(object);
  (void)_this;
}
void GetContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.GetContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.GetContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.GetContainerResponse)
  return target;
}

size_t GetContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.GetContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetContainerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetContainerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetContainerResponse::GetClassData() const { return &_class_data_; }

void GetContainerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetContainerResponse *>(to)->MergeFrom(
      static_cast<const GetContainerResponse &>(from));
}


void GetContainerResponse::MergeFrom(const GetContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.GetContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_container()) {
    _internal_mutable_container()->::containerd::services::containers::v1::Container::MergeFrom(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetContainerResponse::CopyFrom(const GetContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.GetContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContainerResponse::IsInitialized() const {
  return true;
}

void GetContainerResponse::InternalSwap(GetContainerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContainerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[5]);
}

// ===================================================================

class ListContainersRequest::_Internal {
 public:
};

ListContainersRequest::ListContainersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.ListContainersRequest)
}
ListContainersRequest::ListContainersRequest(const ListContainersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.ListContainersRequest)
}

inline void ListContainersRequest::SharedCtor() {
}

ListContainersRequest::~ListContainersRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.ListContainersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListContainersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListContainersRequest::ArenaDtor(void* object) {
  ListContainersRequest* _this = reinterpret_cast< ListContainersRequest* >(object);
  (void)_this;
}
void ListContainersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListContainersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.ListContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.ListContainersRequest.filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.ListContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filters = 1;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    const auto& s = this->_internal_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.ListContainersRequest.filters");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.ListContainersRequest)
  return target;
}

size_t ListContainersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.ListContainersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filters = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filters_.size());
  for (int i = 0, n = filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filters_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListContainersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListContainersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListContainersRequest::GetClassData() const { return &_class_data_; }

void ListContainersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListContainersRequest *>(to)->MergeFrom(
      static_cast<const ListContainersRequest &>(from));
}


void ListContainersRequest::MergeFrom(const ListContainersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.ListContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListContainersRequest::CopyFrom(const ListContainersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.ListContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainersRequest::IsInitialized() const {
  return true;
}

void ListContainersRequest::InternalSwap(ListContainersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[6]);
}

// ===================================================================

class ListContainersResponse::_Internal {
 public:
};

ListContainersResponse::ListContainersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  containers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.ListContainersResponse)
}
ListContainersResponse::ListContainersResponse(const ListContainersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.ListContainersResponse)
}

inline void ListContainersResponse::SharedCtor() {
}

ListContainersResponse::~ListContainersResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.ListContainersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListContainersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListContainersResponse::ArenaDtor(void* object) {
  ListContainersResponse* _this = reinterpret_cast< ListContainersResponse* >(object);
  (void)_this;
}
void ListContainersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListContainersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.ListContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .containerd.services.containers.v1.Container containers = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.ListContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .containerd.services.containers.v1.Container containers = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.ListContainersResponse)
  return target;
}

size_t ListContainersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.ListContainersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .containerd.services.containers.v1.Container containers = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListContainersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListContainersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListContainersResponse::GetClassData() const { return &_class_data_; }

void ListContainersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListContainersResponse *>(to)->MergeFrom(
      static_cast<const ListContainersResponse &>(from));
}


void ListContainersResponse::MergeFrom(const ListContainersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.ListContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListContainersResponse::CopyFrom(const ListContainersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.ListContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainersResponse::IsInitialized() const {
  return true;
}

void ListContainersResponse::InternalSwap(ListContainersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[7]);
}

// ===================================================================

class CreateContainerRequest::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container& container(const CreateContainerRequest* msg);
};

const ::containerd::services::containers::v1::Container&
CreateContainerRequest::_Internal::container(const CreateContainerRequest* msg) {
  return *msg->container_;
}
CreateContainerRequest::CreateContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.CreateContainerRequest)
}
CreateContainerRequest::CreateContainerRequest(const CreateContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::containerd::services::containers::v1::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.CreateContainerRequest)
}

inline void CreateContainerRequest::SharedCtor() {
container_ = nullptr;
}

CreateContainerRequest::~CreateContainerRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.CreateContainerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void CreateContainerRequest::ArenaDtor(void* object) {
  CreateContainerRequest* _this = reinterpret_cast< CreateContainerRequest* >(object);
  (void)_this;
}
void CreateContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.CreateContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.CreateContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.CreateContainerRequest)
  return target;
}

size_t CreateContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.CreateContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateContainerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateContainerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateContainerRequest::GetClassData() const { return &_class_data_; }

void CreateContainerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateContainerRequest *>(to)->MergeFrom(
      static_cast<const CreateContainerRequest &>(from));
}


void CreateContainerRequest::MergeFrom(const CreateContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.CreateContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_container()) {
    _internal_mutable_container()->::containerd::services::containers::v1::Container::MergeFrom(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateContainerRequest::CopyFrom(const CreateContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.CreateContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContainerRequest::IsInitialized() const {
  return true;
}

void CreateContainerRequest::InternalSwap(CreateContainerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContainerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[8]);
}

// ===================================================================

class CreateContainerResponse::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container& container(const CreateContainerResponse* msg);
};

const ::containerd::services::containers::v1::Container&
CreateContainerResponse::_Internal::container(const CreateContainerResponse* msg) {
  return *msg->container_;
}
CreateContainerResponse::CreateContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.CreateContainerResponse)
}
CreateContainerResponse::CreateContainerResponse(const CreateContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::containerd::services::containers::v1::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.CreateContainerResponse)
}

inline void CreateContainerResponse::SharedCtor() {
container_ = nullptr;
}

CreateContainerResponse::~CreateContainerResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.CreateContainerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void CreateContainerResponse::ArenaDtor(void* object) {
  CreateContainerResponse* _this = reinterpret_cast< CreateContainerResponse* >(object);
  (void)_this;
}
void CreateContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.CreateContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.CreateContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.CreateContainerResponse)
  return target;
}

size_t CreateContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.CreateContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateContainerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateContainerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateContainerResponse::GetClassData() const { return &_class_data_; }

void CreateContainerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateContainerResponse *>(to)->MergeFrom(
      static_cast<const CreateContainerResponse &>(from));
}


void CreateContainerResponse::MergeFrom(const CreateContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.CreateContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_container()) {
    _internal_mutable_container()->::containerd::services::containers::v1::Container::MergeFrom(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateContainerResponse::CopyFrom(const CreateContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.CreateContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContainerResponse::IsInitialized() const {
  return true;
}

void CreateContainerResponse::InternalSwap(CreateContainerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContainerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[9]);
}

// ===================================================================

class UpdateContainerRequest::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container& container(const UpdateContainerRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateContainerRequest* msg);
};

const ::containerd::services::containers::v1::Container&
UpdateContainerRequest::_Internal::container(const UpdateContainerRequest* msg) {
  return *msg->container_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateContainerRequest::_Internal::update_mask(const UpdateContainerRequest* msg) {
  return *msg->update_mask_;
}
void UpdateContainerRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateContainerRequest::UpdateContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.UpdateContainerRequest)
}
UpdateContainerRequest::UpdateContainerRequest(const UpdateContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::containerd::services::containers::v1::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.UpdateContainerRequest)
}

inline void UpdateContainerRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&container_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&container_)) + sizeof(update_mask_));
}

UpdateContainerRequest::~UpdateContainerRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.UpdateContainerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateContainerRequest::ArenaDtor(void* object) {
  UpdateContainerRequest* _this = reinterpret_cast< UpdateContainerRequest* >(object);
  (void)_this;
}
void UpdateContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.UpdateContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.UpdateContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.UpdateContainerRequest)
  return target;
}

size_t UpdateContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.UpdateContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateContainerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateContainerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateContainerRequest::GetClassData() const { return &_class_data_; }

void UpdateContainerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateContainerRequest *>(to)->MergeFrom(
      static_cast<const UpdateContainerRequest &>(from));
}


void UpdateContainerRequest::MergeFrom(const UpdateContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.UpdateContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_container()) {
    _internal_mutable_container()->::containerd::services::containers::v1::Container::MergeFrom(from._internal_container());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateContainerRequest::CopyFrom(const UpdateContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.UpdateContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerRequest::IsInitialized() const {
  return true;
}

void UpdateContainerRequest::InternalSwap(UpdateContainerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateContainerRequest, update_mask_)
      + sizeof(UpdateContainerRequest::update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateContainerRequest, container_)>(
          reinterpret_cast<char*>(&container_),
          reinterpret_cast<char*>(&other->container_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContainerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[10]);
}

// ===================================================================

class UpdateContainerResponse::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container& container(const UpdateContainerResponse* msg);
};

const ::containerd::services::containers::v1::Container&
UpdateContainerResponse::_Internal::container(const UpdateContainerResponse* msg) {
  return *msg->container_;
}
UpdateContainerResponse::UpdateContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.UpdateContainerResponse)
}
UpdateContainerResponse::UpdateContainerResponse(const UpdateContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::containerd::services::containers::v1::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.UpdateContainerResponse)
}

inline void UpdateContainerResponse::SharedCtor() {
container_ = nullptr;
}

UpdateContainerResponse::~UpdateContainerResponse() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.UpdateContainerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void UpdateContainerResponse::ArenaDtor(void* object) {
  UpdateContainerResponse* _this = reinterpret_cast< UpdateContainerResponse* >(object);
  (void)_this;
}
void UpdateContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.UpdateContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.UpdateContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.UpdateContainerResponse)
  return target;
}

size_t UpdateContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.UpdateContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateContainerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateContainerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateContainerResponse::GetClassData() const { return &_class_data_; }

void UpdateContainerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateContainerResponse *>(to)->MergeFrom(
      static_cast<const UpdateContainerResponse &>(from));
}


void UpdateContainerResponse::MergeFrom(const UpdateContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.UpdateContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_container()) {
    _internal_mutable_container()->::containerd::services::containers::v1::Container::MergeFrom(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateContainerResponse::CopyFrom(const UpdateContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.UpdateContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerResponse::IsInitialized() const {
  return true;
}

void UpdateContainerResponse::InternalSwap(UpdateContainerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContainerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[11]);
}

// ===================================================================

class DeleteContainerRequest::_Internal {
 public:
};

DeleteContainerRequest::DeleteContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.DeleteContainerRequest)
}
DeleteContainerRequest::DeleteContainerRequest(const DeleteContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.DeleteContainerRequest)
}

inline void DeleteContainerRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteContainerRequest::~DeleteContainerRequest() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.DeleteContainerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteContainerRequest::ArenaDtor(void* object) {
  DeleteContainerRequest* _this = reinterpret_cast< DeleteContainerRequest* >(object);
  (void)_this;
}
void DeleteContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.DeleteContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "containerd.services.containers.v1.DeleteContainerRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.DeleteContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "containerd.services.containers.v1.DeleteContainerRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.DeleteContainerRequest)
  return target;
}

size_t DeleteContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.DeleteContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteContainerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteContainerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteContainerRequest::GetClassData() const { return &_class_data_; }

void DeleteContainerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteContainerRequest *>(to)->MergeFrom(
      static_cast<const DeleteContainerRequest &>(from));
}


void DeleteContainerRequest::MergeFrom(const DeleteContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.DeleteContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteContainerRequest::CopyFrom(const DeleteContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.DeleteContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteContainerRequest::IsInitialized() const {
  return true;
}

void DeleteContainerRequest::InternalSwap(DeleteContainerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteContainerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[12]);
}

// ===================================================================

class ListContainerMessage::_Internal {
 public:
  static const ::containerd::services::containers::v1::Container& container(const ListContainerMessage* msg);
};

const ::containerd::services::containers::v1::Container&
ListContainerMessage::_Internal::container(const ListContainerMessage* msg) {
  return *msg->container_;
}
ListContainerMessage::ListContainerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:containerd.services.containers.v1.ListContainerMessage)
}
ListContainerMessage::ListContainerMessage(const ListContainerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::containerd::services::containers::v1::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:containerd.services.containers.v1.ListContainerMessage)
}

inline void ListContainerMessage::SharedCtor() {
container_ = nullptr;
}

ListContainerMessage::~ListContainerMessage() {
  // @@protoc_insertion_point(destructor:containerd.services.containers.v1.ListContainerMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListContainerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void ListContainerMessage::ArenaDtor(void* object) {
  ListContainerMessage* _this = reinterpret_cast< ListContainerMessage* >(object);
  (void)_this;
}
void ListContainerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListContainerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:containerd.services.containers.v1.ListContainerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .containerd.services.containers.v1.Container container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:containerd.services.containers.v1.ListContainerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1;
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:containerd.services.containers.v1.ListContainerMessage)
  return target;
}

size_t ListContainerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:containerd.services.containers.v1.ListContainerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .containerd.services.containers.v1.Container container = 1;
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListContainerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListContainerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListContainerMessage::GetClassData() const { return &_class_data_; }

void ListContainerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListContainerMessage *>(to)->MergeFrom(
      static_cast<const ListContainerMessage &>(from));
}


void ListContainerMessage::MergeFrom(const ListContainerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:containerd.services.containers.v1.ListContainerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_container()) {
    _internal_mutable_container()->::containerd::services::containers::v1::Container::MergeFrom(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListContainerMessage::CopyFrom(const ListContainerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:containerd.services.containers.v1.ListContainerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainerMessage::IsInitialized() const {
  return true;
}

void ListContainerMessage::InternalSwap(ListContainerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainerMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_containers_2eproto_getter, &descriptor_table_containers_2eproto_once,
      file_level_metadata_containers_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace containers
}  // namespace services
}  // namespace containerd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::Container_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::Container_Runtime* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::Container_Runtime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::Container_Runtime >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::Container_ExtensionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::Container* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::Container >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::GetContainerRequest* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::GetContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::GetContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::GetContainerResponse* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::GetContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::GetContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::ListContainersRequest* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::ListContainersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::ListContainersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::ListContainersResponse* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::ListContainersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::ListContainersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::CreateContainerRequest* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::CreateContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::CreateContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::CreateContainerResponse* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::CreateContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::CreateContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::UpdateContainerRequest* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::UpdateContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::UpdateContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::UpdateContainerResponse* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::UpdateContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::UpdateContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::DeleteContainerRequest* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::DeleteContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::DeleteContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::containerd::services::containers::v1::ListContainerMessage* Arena::CreateMaybeMessage< ::containerd::services::containers::v1::ListContainerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::containerd::services::containers::v1::ListContainerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
